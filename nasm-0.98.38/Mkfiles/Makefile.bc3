# Makefile for the Netwide Assembler under 16-bit DOS (aimed at Borland C)
#
# The Netwide Assembler is copyright (C) 1996 Simon Tatham and
# Julian Hall. All rights reserved. The software is
# redistributable under the licence given in the file "Licence"
# distributed in the NASM archive.
#
# This Makefile compiles NASM and NDISASM for 16 bit DOS using Borland
# C++; tested with version 3.1.  It probably should work for any
# version of Turbo C++ or Borland C++ from version 3.0 upwards.
# For Turbo C++, replace "bcc" with "tcc", and replace "-O1" with "-O".
#
# Most everything is remarked, and explaned in full, it should be
# easy to convert it to another compiler. I tried to make the devision
# of information logical, and easy to follow.
#
# BEFORE YOU USE THIS MAKE FILE!!!
#
# Make sure the line below is set to the propper location of your standard
# Libaries, if not you'll get some errors. Make sure to keep the trailing
# backslash, as it's needed, and remeber to use \\ not \ as that will cause
# some errors.
#
# This Makefile was updated with NASM 0.98.31, and could compile that
# version correctly using Borland C++ 3.1 under DOS.
#

CC = bcc                #compiler

# opimizations
OPTFLAGS = -d -O1 -Ogmp -k-
  # -d  = merge duplicate strings
  # -O1 = optimize for size
  # -Og = enable global common subexpression elimination
  # -Om = enable loop invariant removal
  # -Op = enable constant propagation
  # ** WARNING: DO NOT ENABLE -Ov (strength reduction) ON BORLAND C++ 3.1 **
  # ** NASM IS KNOWN TO MISCOMPILE WITH -Ov **
  # -k- = omit stack frames where practical
#output formats
OUTFORMS = -DOF_ONLY -DOF_BIN -DOF_OBJ -DOF_WIN32 -DOF_AS86

#compiler flags
CFLAGS = $(OPTFLAGS) -mh -f- $(OUTFORMS)
  # -mh = model huge
  # -f- = no floating point

LINKFLAGS = -d -mh -M -f-
  # -d  = merge duplicate strings
  # -M  = generate map file (to find address space bottlenecks)

LIBS =                  #any libaries to add, out side of the standard libary
EXE = .exe              #executable file extention (keep the . as the start)
OBJ = obj               #OBJ file extention
LIB = lib               #LIB file extension

.c.$(OBJ):
	$(CC) $(CFLAGS) -c -o$@ $<

################################################################
# The OBJ files that NASM is dependent on

NASMOBJS = nasm.$(OBJ)   nasmlib.$(OBJ)  float.$(OBJ)  \
	   assemble.$(OBJ) labels.$(OBJ) \
	   parser.$(OBJ) outform.$(OBJ)  preproc.$(OBJ) \
	   listing.$(OBJ) eval.$(OBJ) insnsa.$(OBJ)

################################################################
# The OBJ files that NDISASM is dependent on

NDISASMOBJS = ndisasm.$(OBJ)  disasm.$(OBJ) sync.$(OBJ) \
	      nasmlib.$(OBJ) insnsd.$(OBJ)

################################################################
# The OBJ file for the output formats

OUTOBJ= output\\outbin.$(OBJ) output\\outaout.$(OBJ) output\\outcoff.$(OBJ) \
	output\\outelf.$(OBJ) output\\outobj.$(OBJ)  output\\outas86.$(OBJ) \
	output\\outdbg.$(OBJ) output\\outrdf2.$(OBJ) output\\outieee.$(OBJ)

################################################################
# Build everything

all : nasm$(EXE) ndisasm$(EXE)

################################################################
# Rules to put the CFLAGS in a file
CFLAGS: Makefile
	echo $(CFLAGS) > CFLAGS
	$(MAKE) clean

################################################################
# NASM, NDISASM link.  The &&!...! construct in Borland Make
# creates a temporary file and inserts its name on the command
# line.  It works around the DOS 127-character command line
# limit.

nasm$(EXE): $(NASMOBJS) output\\out.$(LIB)
	$(CC) $(LINKFLAGS) -onasm$(EXE) @&&!
$(NASMOBJS)
output\\out.$(LIB)
!

ndisasm$(EXE): $(NDISASMOBJS)
	$(CC) $(LINKFLAGS) -ondisasm$(EXE) @&&!
$(NDISASMOBJS)
!

################################################################
# Build the output formats as a library
# The & ... $? construct tells Borland Make to repeat for all
# out of date dependencies
output\\out.$(LIB): $(OUTOBJ)
	-del output\\out.$(LIB)
	for %a in (output\\*.$(OBJ)) do tlib /C output\\out.$(LIB) +%a

################################################################
# A quick way to delete the OBJ files as well as the binaries.

clean :
	-del *.$(OBJ)
	-del output\\*.$(OBJ)
	-del output\\out.$(LIB)
	-del *.$(LIB)
	-del insnsa_?.c
	-del nasm$(EXE)
	-del ndisasm$(EXE)
	-del *.map
	-del CFLAGS

#-- Magic hints to mkdep.pl --#
# @object-ending: ".$(OBJ)"
# @path-separator: "\\"
#-- Everything below is generated by mkdep.pl - do not edit --#
assemble.$(OBJ): assemble.c insns.h assemble.h regvals.c nasm.h regs.h \
 insnsi.h nasmlib.h version.h
disasm.$(OBJ): disasm.c insns.h regs.c sync.h names.c nasm.h disasm.h regs.h \
 insnsn.c insnsi.h version.h regdis.c
eval.$(OBJ): eval.c nasm.h regs.h labels.h nasmlib.h version.h eval.h
float.$(OBJ): float.c nasm.h regs.h version.h
insnsa.$(OBJ): insnsa.c insns.h nasm.h regs.h insnsi.h version.h
insnsd.$(OBJ): insnsd.c insns.h nasm.h regs.h insnsi.h version.h
insnsn.$(OBJ): insnsn.c
labels.$(OBJ): labels.c nasm.h regs.h nasmlib.h version.h
listing.$(OBJ): listing.c listing.h nasm.h regs.h nasmlib.h version.h
macros.$(OBJ): macros.c
names.$(OBJ): names.c regs.c insnsn.c
nasm.$(OBJ): nasm.c listing.h preproc.h insns.h outform.h assemble.h \
 parser.h nasm.h regs.h labels.h insnsi.h nasmlib.h version.h eval.h
nasmlib.$(OBJ): nasmlib.c insns.h regs.c names.c nasm.h regs.h insnsn.c \
 insnsi.h nasmlib.h version.h
ndisasm.$(OBJ): ndisasm.c insns.h sync.h nasm.h disasm.h regs.h insnsi.h \
 nasmlib.h version.h
outform.$(OBJ): outform.c outform.h nasm.h regs.h version.h
output\\outaout.$(OBJ): output\\outaout.c outform.h nasm.h regs.h nasmlib.h \
 version.h
output\\outas86.$(OBJ): output\\outas86.c outform.h nasm.h regs.h nasmlib.h \
 version.h
output\\outbin.$(OBJ): output\\outbin.c outform.h nasm.h regs.h nasmlib.h \
 version.h
output\\outcoff.$(OBJ): output\\outcoff.c outform.h nasm.h regs.h nasmlib.h \
 version.h
output\\outdbg.$(OBJ): output\\outdbg.c outform.h nasm.h regs.h nasmlib.h \
 version.h
output\\outelf.$(OBJ): output\\outelf.c outform.h nasm.h regs.h nasmlib.h \
 version.h
output\\outieee.$(OBJ): output\\outieee.c outform.h nasm.h regs.h nasmlib.h \
 version.h
output\\outobj.$(OBJ): output\\outobj.c outform.h nasm.h regs.h nasmlib.h \
 version.h
output\\outrdf.$(OBJ): output\\outrdf.c outform.h nasm.h regs.h nasmlib.h \
 version.h
output\\outrdf2.$(OBJ): output\\outrdf2.c outform.h nasm.h regs.h nasmlib.h \
 version.h
parser.$(OBJ): parser.c insns.h parser.h nasm.h regs.h insnsi.h regflags.c \
 float.h nasmlib.h version.h
preproc.$(OBJ): preproc.c nasm.h macros.c regs.h nasmlib.h version.h
regdis.$(OBJ): regdis.c
regflags.$(OBJ): regflags.c
regs.$(OBJ): regs.c
regvals.$(OBJ): regvals.c
sync.$(OBJ): sync.c sync.h
