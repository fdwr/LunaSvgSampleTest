# Makefile for the Netwide Assembler under 16-bit DOS
#
# The Netwide Assembler is copyright (C) 1996 Simon Tatham and
# Julian Hall. All rights reserved. The software is
# redistributable under the licence given in the file "Licence"
# distributed in the NASM archive.
#
# This Makefile is designed to build NASM using a 16-bit DOS C
# compiler such as Borland C, and has been tested with Borland C 2.3
# and Borland Make.

# CC = cl
# CCFLAGS = /c /O /AL
# LINK = cl
CC = bcc
CCFLAGS = -c -O -ml -A
LINK = tlink /c /Lc:\bc\lib
LINKFLAGS =
LIBRARIES =
EXE = .exe#
OBJ = obj#

.c.$(OBJ):
        $(CC) $(CCFLAGS) $*.c

NASMOBJS1 = nasm.$(OBJ) nasmlib.$(OBJ) float.$(OBJ) insnsa.$(OBJ)
NASMOBJS2 = assemble.$(OBJ) labels.$(OBJ) parser.$(OBJ) outform.$(OBJ)
NASMOBJS3 = output/outbin.$(OBJ) output/outaout.$(OBJ) output/outcoff.$(OBJ) output/outelf.$(OBJ)
NASMOBJS4 = output/outobj.$(OBJ) output/outas86.$(OBJ) output/outdbg.$(OBJ) output/outrdf.$(OBJ)
NASMOBJS5 = output/outrdf2.$(OBJ) output/outieee.$(OBJ)
NASMOBJS6 = preproc.$(OBJ) listing.$(OBJ) eval.$(OBJ)

NASMOBJS = $(NASMOBJS1) $(NASMOBJS2) $(NASMOBJS3) $(NASMOBJS4) $(NASMOBJS5) \
	   $(NASMOBJS6)

NDISASMOBJS = ndisasm.$(OBJ) disasm.$(OBJ) sync.$(OBJ) nasmlib.$(OBJ) \
              insnsd.$(OBJ)

all : nasm$(EXE) ndisasm$(EXE)

# We have to have a horrible kludge here to get round the 128 character
# limit, as usual...
nasm$(EXE): $(NASMOBJS)
#       $(LINK) /Fenasm.exe a*.obj f*.obj insnsa.obj l*.obj na*.obj o*.obj p*.obj
        echo c0l.obj $(NASMOBJS1) +> nasmobjs.tmp
        echo $(NASMOBJS2) +>> nasmobjs.tmp
        echo $(NASMOBJS3) +>> nasmobjs.tmp
        echo $(NASMOBJS4) +>> nasmobjs.tmp
        echo $(NASMOBJS5),nasm.exe,,cl.lib, >> nasmobjs.tmp
        $(LINK) /Tde @nasmobjs.tmp

ndisasm$(EXE): $(NDISASMOBJS)
#       $(LINK) /Fendisasm.exe $(NDISASMOBJS)
        $(LINK) /Tde $(NDISASMOBJS),ndisasm.exe,,cl.lib,

clean :
        del *.obj
        del nasm$(EXE)
        del ndisasm$(EXE)

#-- Magic hints to mkdep.pl --#
# @object-ending: ".$(OBJ)"
# @path-separator: "/"		# Is this really right? -hpa
#-- Everything below is generated by mkdep.pl - do not edit --#
assemble.$(OBJ): assemble.c insns.h assemble.h regvals.c nasm.h regs.h \
 insnsi.h nasmlib.h version.h
disasm.$(OBJ): disasm.c insns.h regs.c sync.h names.c nasm.h disasm.h regs.h \
 insnsn.c insnsi.h version.h regdis.c
eval.$(OBJ): eval.c nasm.h regs.h labels.h nasmlib.h version.h eval.h
float.$(OBJ): float.c nasm.h regs.h version.h
insnsa.$(OBJ): insnsa.c insns.h nasm.h regs.h insnsi.h version.h
insnsd.$(OBJ): insnsd.c insns.h nasm.h regs.h insnsi.h version.h
insnsn.$(OBJ): insnsn.c
labels.$(OBJ): labels.c nasm.h regs.h nasmlib.h version.h
listing.$(OBJ): listing.c listing.h nasm.h regs.h nasmlib.h version.h
macros.$(OBJ): macros.c
names.$(OBJ): names.c regs.c insnsn.c
nasm.$(OBJ): nasm.c listing.h preproc.h insns.h outform.h assemble.h \
 parser.h nasm.h regs.h labels.h insnsi.h nasmlib.h version.h eval.h
nasmlib.$(OBJ): nasmlib.c insns.h regs.c names.c nasm.h regs.h insnsn.c \
 insnsi.h nasmlib.h version.h
ndisasm.$(OBJ): ndisasm.c insns.h sync.h nasm.h disasm.h regs.h insnsi.h \
 nasmlib.h version.h
outform.$(OBJ): outform.c outform.h nasm.h regs.h version.h
output/outaout.$(OBJ): output/outaout.c outform.h nasm.h regs.h nasmlib.h \
 version.h
output/outas86.$(OBJ): output/outas86.c outform.h nasm.h regs.h nasmlib.h \
 version.h
output/outbin.$(OBJ): output/outbin.c outform.h nasm.h regs.h nasmlib.h \
 version.h
output/outcoff.$(OBJ): output/outcoff.c outform.h nasm.h regs.h nasmlib.h \
 version.h
output/outdbg.$(OBJ): output/outdbg.c outform.h nasm.h regs.h nasmlib.h \
 version.h
output/outelf.$(OBJ): output/outelf.c outform.h nasm.h regs.h nasmlib.h \
 version.h
output/outieee.$(OBJ): output/outieee.c outform.h nasm.h regs.h nasmlib.h \
 version.h
output/outobj.$(OBJ): output/outobj.c outform.h nasm.h regs.h nasmlib.h \
 version.h
output/outrdf.$(OBJ): output/outrdf.c outform.h nasm.h regs.h nasmlib.h \
 version.h
output/outrdf2.$(OBJ): output/outrdf2.c outform.h nasm.h regs.h nasmlib.h \
 version.h
parser.$(OBJ): parser.c insns.h parser.h nasm.h regs.h insnsi.h regflags.c \
 float.h nasmlib.h version.h
preproc.$(OBJ): preproc.c nasm.h macros.c regs.h nasmlib.h version.h
regdis.$(OBJ): regdis.c
regflags.$(OBJ): regflags.c
regs.$(OBJ): regs.c
regvals.$(OBJ): regvals.c
sync.$(OBJ): sync.c sync.h
