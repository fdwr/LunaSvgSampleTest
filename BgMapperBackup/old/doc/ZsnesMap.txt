Used to view the video planes and sprites of saved games to see them in
their still form, and export graphics elements to separate image files.
Unlike in an emulator, you can scroll around to see more than just the
current window and separate the individual parts of the scene.

It also returns info about the video mode, number of planes, scroll offsets
of each one, number of colors, size of the tilemaps, and sprite info (for
those for of you out there that actually care).

All graphics modes are to be supported, without any HDMA effects, mode 7
scaling/rotation, transparency, or windowing. They all are simply seen in
flat form, which might be exactly what you want. Also, no special effects
drawn by custom chips inside the cartridges themself can be viewed (like
Mario Kart or Star Fox) since I do not have the slightest knowledge of how
they work. It would be kind of awesome though to be able recreate a complete
3D scene that could viewed from any angle, and possibly save your Arwing as
as a separate object! So if anybody out there could tell me, please do :-)

The cache is 35k, with the last 3k holding a list of up to 512 object
bitmaps. The other 32k holds the bitmaps. They can be sprites or plane tiles.
As new bitmaps that have not already been put in the cache are translated,
they are put after the last one and the pointer is moved forward. When the
pointer reaches the end, it wraps around back to the beginning to overwrite
older tiles. This greatly reduces the time taken to redraw the scene by just
translating a tile once and from then on reusing that translation. Only when
the cache becomes so full that older tiles are overwritten will they have to
be retranslated. The slowest case would be if there were no two tiles in the
scene that were the same, but that is very rare. Even when it does happen,
it isn't any slower than it would be without the cache. The main advantage of
the cache is speeding up panning, since the cache contents remain intact
between scene redraws.

The last 3k consists of up to 512 names and 512 pointers to each of those
objects. The pointer to it is simply a word that points to a byte position
plus a word that tells how long the object bitmap is. The object name is
also a word. The lower 12 bits contain the tile or sprite character number,
and the three higher bits tell wether it is a sprite or plane tile. A value
of zero would be null (meaning no object). 1-4 would tell what BG the tile
was from, and 5 would mean it was a sprite.