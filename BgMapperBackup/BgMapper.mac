;Definitions and little macros for BgMapper

BITS 32

;------------------------------------------------------------
; Definitions
;------------------------------------------------------------

MainOpLongFilenamesUse	equ 32

;------------------------------
MainPageLoadScene	equ 1	;ID's for each of the main menu choices
MainPageReloadScene	equ 2	;also serve as name for main routines to call
MainPageSceneInfo	equ 3	;other main routines, without using actual addresses
MainPageSceneViewer	equ 4
MainPageVramViewer	equ 5
MainPageTilemapViewer	equ 6
MainPageSpriteList	equ 7
MainPageOptions		equ 8
MainPage.Help		equ 9
MainProgExit		equ 0

Timer			equ 1132;memory location used to keep track of timer

;------------------------------ flags for menu choices
MenuListSub		equ 1	;choice opens a submenu
MenuListDisabled	equ 2	;you can't use this choice now
MenuListDivider		equ 4	;divider exists between this and the next choice
MenuAttribHorizontal	equ 1	;most are vertical menus so this bit is usually off
MenuAttribEmbedded	equ 2	;the menu is a separate entity or embedded in the dialog box
MenuDrawFull		equ 1	;flag to redraw all choices
MenuDrawComplete	equ 2	;draw menu background, dividers, and border
MenuDrawNotMade		equ 4	;menu has not been constructed yet
MenuChngSelect		equ 1	;whenever a menu choice is changed, this is flagged
MenuChngAccept		equ 2	;when a choice is chosen, this flagged
MenuCenterEquate	equ	(-200 & 65535)|((-320 & 65535)<<16)
MenuStructList      equ 0
MenuStructChoices   equ 4
MenuStructPreChoice equ 6
MenuStructPosition  equ 8

SavestateLoadedVRAM equ 1   ;flag video memory is loaded
SavestateLoadedWRAM equ 2   ;SNES work memory is loaded (7E:0000-7F:FFFF)
SavestateLoadedSPC  equ 4   ;savestate included SPC portion
SavestateLoadedERAM equ 8   ;extra RAM was also loaded (FX chip)
SavestateOpenErr        equ 1    ;could not open the filename given
SavestateLoadReadErr    equ 2    ;for some reason the file could not be read
SavestateLoadMemoryErr  equ 4    ;error when memory could not be allocated for savestate

SceneViewTransparency	equ 1	;whether or not to use transparency
SceneViewHighColor	equ 2	;blit in 8bit or 15bit mode

RenderBgMainSubScreen	equ 4
RenderBgTilePriority	equ 8

BgTileNumber		equ 1023
BgTilePalette		equ 7<<10
BgTilePriority		equ 1<<13
BgTileHflip		equ 1<<14
BgTileVflip		equ 1<<15

;------------------------------------------------------------
; Special push/pulls/defs
;
;------------------------------
; (reg)
; No different from pop, I just like pull better (like SNES assembly)
; Pop is soda, something that shouldn't be around computers
;
%imacro Pull 1
  pop %1
%endmacro

;------------------------------
; (prm1, prm2, prm3...)
; Used by routines for saving multiple registers before they are destroyed
;
%imacro PushAll 0-10
  %rep %0
    push %1
    %rotate 1
  %endrep
%endmacro

;------------------------------
; Better for calling routines when the parameters need to be pushed on from right
; to left instead of the normal left to right
;
%imacro PushAllReverse 0-10
  %rep %0
    %rotate -1
    push %1
  %endrep
%endmacro

;------------------------------
; Used before coming out of a routine to restore registers
;
%imacro PullAll 0-10
  %rep %0
    %rotate -1
    pop %1
  %endrep
%endmacro

;------------------------------
; (definition type, definition name)
; Used to easily add new definitions for error codes or switches
; Each one is added sequentially with the current definition type number, then the type
; is incremented by one for the next number
; The user does not and does not need to know the actual numbers used (and that is the point)
; but just that when that symbol is referred to, it will have the right meaning
;
%imacro AddDef 2
	%2 equ %1
	%assign %1 %1+1
%endmacro

;------------------------------
; String macros
;------------------------------
; (string name, string) (len_stringname)
; Declares a label, the string associated with the label, and a length constant
%imacro String 2
	%1: db %2
	Len_%1 equ $-%1
%endmacro

; (string name, string)
; Declares a label, and the null terminated string associated with the label
%imacro StrNull 2
	%1: db %2,0
%endmacro

; (string1, string2, string3...)
; Adds a null to the end of whatever strings are passed onto it
; Turning them into 'ASCIIZ' or 'C' like strings
; No limit to the number
%imacro StringsASCIIZ 1-*
  %rep %0
    db %1,0
    %rotate 1
  %endrep
%endmacro

%imacro LenStr 1
  db (%%LengthOfString-$)-1,%1
  %%LengthOfString:
%endmacro

;------------------------------------------------------------
; Debug output
;------------------------------------------------------------
%imacro DebugPrintValue 1
%if debug
	push eax
	mov eax,%1
	call _DebugPrintValue
	pull eax
%endif
%endmacro

%imacro DebugPrintValueAndWait 1
%if debug
	push eax
	mov eax,%1
	call _DebugPrintValue.AndWait
	pull eax
%endif
%endmacro

%imacro DebugPrintValueNow 1
	push eax
	mov eax,%1
	call _DebugPrintValue
	pull eax
%endmacro

%imacro DebugPrintValueNowAndWait 1
	push eax
	mov eax,%1
	call _DebugPrintValue.AndWait
	pull eax
%endmacro

;------------------------------------------------------------
; Command line parameter macros
;------------------------------------------------------------
;------------------------------
; (reg=number of parameter to grab, label=if greater than last parameter) (esi=string pointer)
; All other registers preserved
;
; Grabs a null terminated parameter from the command line arguments
;
;%imacro StartOptionsGet 2
;	cmp %1,[StartOptCount]	;check that not greater than last one
;	jae near %2
;	mov esi,[StartOptPtrs]	;get pointer to table
;	mov esi,[esi+%1*4]	;get pointer to string
;%endmacro

;------------------------------------------------------------
; Graphics macros
;------------------------------
; (TopRow, BtmRow, LeftCol, RiteCol, Mode) ()
%imacro DrawBorder 5
	PushAll word %5,word %4,word %3,word %2,word %1
	call _DrawBorder
	add esp,byte 10
%endmacro

; (TopRow, BtmRow, LeftCol, RiteCol, Color) ()
%imacro DrawBox 5
	PushAll word %5,word %4,word %3,word %2,word %1
	call _DrawBox
	add esp,byte 10
%endmacro

; (words Char, TopRow, LeftCol, Color, dwords FontSet, ColorTable) ()
%imacro FontBlitChar 3
	PushAll word %3,word %2,word %1
	;word %6,word %5,word %4,
	call _FontBlitChar
	add esp,byte 6
%endmacro

; (ptr String, words Length, TopRow, LeftCol) ()
%macro FontBlitStr 4
	PushAllReverse dword %1,word %2,word %3,word %4
	call _FontBlitStr
	add esp,byte 10
%endmacro

; (ptr String, words TopRow, LeftCol) ()
%macro FontBlitPar 3
        PushAllReverse dword %1,dword %2|(%3<<16)
        call _FontBlitPar
        add esp,byte 8
%endmacro

; (dword String, words Length, TopRow) ()
;%imacro FontBlitCenteredStr 3
;        PushAllReverse dword %1,word %2,word %3
;        call _FontBlitCenteredStr
;        add esp,byte 8
;%endmacro

; (words expected number of choices, menu type) (cf=failure, eax=to menu structure)
%macro MenuCreate 2
	PushAllReverse word %1,word %2
	call _MenuCreate
	lea esp,[esp+4]		;do not modify carry flag
%endmacro

; (words expected number of choices, menu type) (cf=failure, eax=to menu structure)
%macro MenuCreate2 1
    PushAllReverse dword %1
	call _MenuCreate
	lea esp,[esp+4]		;do not modify carry flag
%endmacro

; (word ptr to menu structure) (cf=failure)
%macro MenuDestroy 1
	push dword %1
	call _MenuDestroy
	lea esp,[esp+4]		;do not modify carry flag
%endmacro

; (dwords ptr to menu structure, ptr to new list, word number of choices) ()
%macro MenuAddChoices 3
	PushAllReverse dword %1,dword %2,word %3
	call _MenuAddChoices
	lea esp,[esp+10]		;do not modify carry flag
%endmacro

; (dwords ptr to menu structure, ptr to new list, word number of choices) ()
; Does not free stack!
%macro MenuAddChoices2 3
	PushAllReverse dword %1,dword %2,word %3
	call _MenuAddChoices
%endmacro

; (dword ptr to menu structure, words basechoice, count, ANDattributes, ORattributes) (cf=error)
%macro MenuSetChoiceAttribs 5
	PushAllReverse dword %1,word %2,word %3,word (~%4 << 8) | %5
	call _MenuSetChoiceAttribs
	lea esp,[esp+10]		;do not modify carry flag
%endmacro

%imacro MenuChoice 3
	dd %1			;dword ptr to choice's string
	db %2,%3		;ID byte and attributes
%endmacro

; (dword ptr to menu structure, word new choice) (al=change, ah=choice)
%imacro MenuSetCurrentChoice 2
	PushAllReverse dword %1,word %2
	call _MenuSetCurrentChoice
	add esp,byte 6
%endmacro

;------------------------------
; Scene rendering related macros
;------------------------------
%imacro RenderBplBg 1
	mov al,%1
	call RenderBg.Bitplane
%endmacro

%imacro RenderSprites 1
	;push word %1
	;call _RenderSprites
%endmacro

;------------------------------------------------------------
; Structures
;------------------------------------------------------------
%macro StructNew 1
        %1:
	%define StructName %1
	%assign StructBase 0
%endmacro

%macro StructAdd 2
    ;{StructName}%1 equ StructBase
    %1 equ StructBase
	%assign StructBase StructBase+%2
%endmacro

%macro StructEnd 1
	Size_%1 equ StructBase
%endmacro

;------------------------------
StructNew Menu
StructAdd .ListSize,4		;size in bytes of menu list
StructAdd .ListPtr,4		;pointer to menu list
StructAdd .FontPtr,4		;font used by menu
StructAdd .Background,4		;pointer screen area behind opened menu
StructAdd .NumChoices,1		;number of choices in list
StructAdd .CurChoice,1		;current choice
StructAdd .PriorChoice,1	;choice selected just before current choice
StructAdd .Redraw,1		;flags specifying what to redraw
StructAdd .Attribs,2		;general attributes of menu
StructAdd .TopRow,2		;top row of menu
StructAdd .LeftCol,2		;left column of menu
StructAdd .Height,2		;total height of menu
StructAdd .Width,2		;total width of menu
;StructAdd .ChoiceTopRow,2	;
;StructAdd .ChoiceLeftCol,2	;
StructAdd .EdgeIndent,2		;space between menu border and inside choices
StructAdd .ChoiceHeight,2	;height of an individual choice
StructAdd .ChoiceWidth,2	;width of the choices
StructEnd Menu

;------------------------------
StructNew MenuList
StructAdd .Text,4		;pointers to each choice string in the menu
StructAdd .ChoiceID,1		;unique identification for each choice
StructAdd .Attribs,1		;attributes of each menu choice
StructAdd .Pos,2		;x or y position of choice, depending on menu format
.Size		equ 8
StructEnd MenuList

%ifdef thisdontwork
------------------------------
StructNew SnesState
StructAdd .VRAM,65536
StructAdd .ERAM,65536
StructAdd .WRAM,131072
StructAdd .OAM,544
StructAdd .CGRAM,512
StructAdd .CycleCount,2
StructAdd .ScanLine,2		;0-261, the last vivisible line 223
StructAdd .VideoMode,1		;0-7
StructAdd .Brightness,1		;0-15, 15 is full normal brightness
StructAdd .MainScreen,1		;bits 0-3 for planes, bit 4 for sprites
StructAdd .Subscreen,1		;bits 0-3 for planes, bit 4 for sprites
StructAdd .MosaicApplied,1	;same again (except not applied to sprites)
StructAdd .MosaicSize,1		;0-15 in pixels
StructAdd .FixedColor,3		;background color constant
StructAdd .Window1Left,1	;0-255 in pixels for both windows
StructAdd .Window1Right,1
StructAdd .Window2Left,1
StructAdd .Window2Right,1
StructAdd .WindowMainScrn,1	;bits 0-3 for planes, bit 4 for sprites
StructAdd .WindowSubScrn,1	;bits 0-3 for planes, bit 4 for sprites
StructAdd .WindowAttrib,3
	which windows are applied and if they are clipped in or out
	four bits each: BG1 BG2 BG3 BG4 OAM
	bits:	0 - Window1 in or out	values: 0=in 1=out
		1 - Window1 enable		0=off 1=on
		2 - Window2 in or out		0=in 1=out
		3 - Window2 enable		0=off 1=on
StructAdd .WindowMasking,2
	how two windows overlapping work over bgs and sprites
	two bits each: BG1 BG2 BG3 BG4 OAM
	values: 0=OR	1=AND	2=XOR	3=XNOR
StructAdd .OAMTileBase,2	;0-49152 in bytes (16384 increments)
StructAdd .OAMSizeSelect,1	;0-5
StructAdd .OAMSmallSize,1	;8/16/32/64
StructAdd .OAMLargeSize,1	;8/16/32/64
StructAdd .OAMnada,1
StructAdd .Colors,4		;4/16/256 (Colors is zero if that plane is inactive)
StructAdd .TileHeight,4		;8/16 (valid combinations are 8x8,16x16,16x8 in pixels)
StructAdd .TileWidth,4
StructAdd .MapHeight,4		;32/64 in tiles
StructAdd .MapWidth,4
StructAdd .PixelHeight,8	;256/512/1024 (pixels = tilesize * mapsize)
StructAdd .PixelWidth,8
StructAdd .ScrollX,8		;0-2047 (0-65535 if using mode 7) in pixels
StructAdd .ScrollY,8
StructAdd .MapBase,8		;0-63488 in bytes (2048 increments)
StructAdd .TileBase,8		;0-57344 in bytes (8192 increments)
StructEnd SnesState

;------------------------------
StructNew SceneView
StructAdd SceneView.TileCache,65536	;64k to hold translated bitmaps
					;can hold 16 64x64 sprites or 4096 2bit 8x8 tiles
StructAdd SceneView.CacheNames,1024	;names of each entity
StructAdd SceneView.CachePtrs,2048	;pointers and lengths to 512 entities
StructAdd .TileCache,4096		;4k to hold translated bitmaps up to 64x64 pixels
StructAdd .SpritePos,512		;small array to speed up sprite searching
StructAdd .ScrollY,2			;user's scroll in view scene
StructAdd .ScrollX,2
StructAdd .SceneBuffer,65536		;buffer to hold drawn scenes
StructAdd .BackgroundPtr,4		;pointer to a variable size background
StructAdd .Transparency,1		;flag whether or not transparency is used
StructEnd SceneView

;------------------------------
STRUC SnesState
.VRAM:	resb 65536	;64k of video ram
.WRAM:	resb 131072	;128k of work ram
.OAM:	resb 544	;128 sprites
.CGRAM:	resb 512	;256 colors (plus background color?)
.CycleCount	resw 1	;0-150 (about 150 cycles every scanline)
.ScanLine	resw 1	;0-261
.VideoMode	resb 1	;0-7
.Brightness	resb 1	;0-15
.MainScreen	resb 1	;bits 0-3 for planes, bit 4 for sprites
.Subscreen 	resb 1	;same as main screen
.MosaicApplied	resb 1	;same again (except not applied to sprites)
.MosaicSize	resb 1	;0-15 in pixels
.FixedColor	resd 1	;background color constant
.Window1Left	resb 1	;0-255 in pixels
.Window1Right	resb 1
.Window2Left	resb 1	;same as window 1
.Window2Right	resb 1
.WindowMainScrn	resb 1	;same as main screen
.WindowSubScrn	resb 1	;same again
.WindowMasking	resw 1	;how two windows overlapping work
			;bgs 1-4 and sprites (each has its own two bits)
			;  0=OR	 1=AND	2=XOR	3=XNOR
.WindowAttrib	resd 1	;what window is applied and if it is clipped in or out
			;bgs 1-4 and sprites (each has its own four bits)
			;  0 - Window1 in or out	2 - Window2 in or out	(0=in 1=out)
			;  1 - Window1 enable		3 - Window2 enable	(0=off 1=on)
.OAMTileBase	resd 1	;0-49152 in bytes (16384 increments)
.OAMSizeSelect	resb 1	;0-5
.OAMSmallSize	resb 1	;8/16/32/64
.OAMLargeSize	resb 1	;8/16/32/64

SnesStatePlanesInfo:
.Colors		resb 1	;4/16/256 (Colors is zero if that plane is inactive)
.TileHeight	resb 1	;8/16 (valid combinations are 8x8,16x16,16x8)
.TileWidth	resb 1
.MapHeight	resb 1	;32/64 in tiles
.MapWidth	resb 1
		alignb 2
.PixelHeight	resw 1	;256/512/1024 (pixels = tilesize * mapsize)
.PixelWidth	resw 1
.ScrollX	resw 1	;0-2047 (0-65535 if using mode 7) in pixels
.ScrollY	resw 1
.MapBase	resw 1	;0-63488 in bytes (2048 increments)
.TileBase	resw 1	;0-57344 in bytes (8192 increments)
times ($-SnesStatePlanesInfo)*3 resb 1	;reserve enough space for four planes
ENDSTRUC

%endif

;------------------------------
StructNew ZsnesState
StructAdd .zsmesg,27		; 'ZSNES Save State File V0.6',26
StructAdd .versn,1		; version #/100
StructAdd .curcyc,1		; cycles left in scanline
StructAdd .curypos,2		; current y position
StructAdd .cacheud,1		; update cache every ? frames
StructAdd .ccud,1		; current cache increment
StructAdd .intrset,1		; interrupt set
StructAdd .cycpl,1		; cycles per scanline
StructAdd .cycphb,1		; cycles per hblank
StructAdd .spcon,1		; SPC Enable (1=enabled)
StructAdd .stackand,2		; value to and stack to keep it from going to the wrong area
StructAdd .stackor,2		; value to or stack to keep it from going to the wrong area

; 65816 registers
StructAdd .xat,2
StructAdd .xdbt,1
StructAdd .xpbt,1
StructAdd .xst,2
StructAdd .xdt,2
StructAdd .xxt,2
StructAdd .xyt,2
StructAdd .xp,1
StructAdd .xe,1
StructAdd .xpc,2
StructAdd .xirqb,1		; which bank the irqs start at
StructAdd .debugger,1		; Start with debugger (1=yes,0=no)
StructAdd .Curtableaddr,4	; Current table address
StructAdd .curnmi,1		; if in NMI(1) or not(0)
StructAdd .cycpbl,4		; percentage left of CPU/SPC to run  (3.58 = 175)
StructAdd .cycpblt,4		; percentage of CPU/SPC to run

; SNES PPU Registers
StructAdd .sndrot,1		; rotates to use A,X or Y for sound skip
StructAdd .sndrot2,1		; rotates a random value for sound skip
StructAdd .INTEnab,1		; enables NMI(7)/VIRQ(5)/HIRQ(4)/JOY(0)
StructAdd .NMIEnab,1		; controlled in e65816 loop.  Sets to 81h
StructAdd .VIRQLoc,2		; VIRQ Y location
StructAdd .vidbright,1		; screen brightness (0 .. 15)
StructAdd .previdbr,1		; previous screen brightness
StructAdd .forceblnk,1		; force blanking on/off ($80=on)
StructAdd .objptr,4		; pointer to object data in VRAM
StructAdd .objptrn,4		; pointer2 to object data in VRAM
StructAdd .objsize1,1		; 1 = 8dot, 4=16 dot, 16=32 dot, 64=64dot
StructAdd .objsize2,1		; large object size
StructAdd .objmovs1,1		; number of bytes to move/paragraph
StructAdd .objadds1,2		; number of bytes to add/paragraph
StructAdd .objmovs2,1		; number of bytes to move/paragraph
StructAdd .objadds2,2		; number of bytes to add/paragraph
StructAdd .oamaddrt,2		; oam address
StructAdd .oamaddrs,2		; oam address at beginning of vblank
StructAdd .objhipr,1		; highest priority object #
StructAdd .bgmode,1		; graphics mode ( 0 .. 7 )
StructAdd .bg3highst,1		; is 1 if background 3 has the highest priority
StructAdd .bgtilesz,1		; 0 = 8x8, 1 = 16x16, bit 0=bg1,bit1=bg2,etc
StructAdd .mosaicon,1		; mosaic on, bit 0=bg1,bit1=bg2, etc
StructAdd .mosaicsz,1		; mosaic size in pixels
StructAdd .bg1ptr,2		; pointer to background1
StructAdd .bg2ptr,2		; pointer to background2
StructAdd .bg3ptr,2		; pointer to background3
StructAdd .bg4ptr,2		; pointer to background4
StructAdd .bg1ptrb,2		; pointer to background1
StructAdd .bg2ptrb,2		; pointer to background2
StructAdd .bg3ptrb,2		; pointer to background3
StructAdd .bg4ptrb,2		; pointer to background4
StructAdd .bg1ptrc,2		; pointer to background1
StructAdd .bg2ptrc,2		; pointer to background2
StructAdd .bg3ptrc,2		; pointer to background3
StructAdd .bg4ptrc,2		; pointer to background4
StructAdd .bg1ptrd,2		; pointer to background1
StructAdd .bg2ptrd,2		; pointer to background2
StructAdd .bg3ptrd,2		; pointer to background3
StructAdd .bg4ptrd,2		; pointer to background4
StructAdd .bg1scsize,1		; bg #1 screen size (0=1x1,1=1x2,2=2x1,3=2x2)
StructAdd .bg2scsize,1		; bg #2 screen size (0=1x1,1=1x2,2=2x1,3=2x2)
StructAdd .bg3scsize,1		; bg #3 screen size (0=1x1,1=1x2,2=2x1,3=2x2)
StructAdd .bg4scsize,1		; bg #4 screen size (0=1x1,1=1x2,2=2x1,3=2x2)
StructAdd .bg1objptr,2		; pointer to tiles in background1
StructAdd .bg2objptr,2		; pointer to tiles in background2
StructAdd .bg3objptr,2		; pointer to tiles in background3
StructAdd .bg4objptr,2		; pointer to tiles in background4
StructAdd .bg1scrolx,2		; background 1 x position
StructAdd .bg2scrolx,2		; background 2 x position
StructAdd .bg3scrolx,2		; background 3 x position
StructAdd .bg4scrolx,2		; background 4 x position
StructAdd .bg1sx,2		; Temporary Variable for Debugging purposes
StructAdd .bg1scroly,2		; background 1 y position
StructAdd .bg2scroly,2		; background 2 y position
StructAdd .bg3scroly,2		; background 3 y position
StructAdd .bg4scroly,2		; background 4 y position
StructAdd .addrincr,2		; vram increment (2,64,128,256)
StructAdd .vramincr,1		; 0 = inrement at 2118/2139, 1 =2119,213A
StructAdd .vramread,1		; 0 = address set, 1 = already read once
StructAdd .vramaddr,4		; vram address
StructAdd .cgaddr,2		; cg (palette) address
StructAdd .cgmod,1		; if cgram is modified or not
StructAdd .scrnon,2		; main & sub screen on
StructAdd .scrndist,1		; which background is disabled
StructAdd .resolutn,2		; screen resolution
StructAdd .multa,1		; multiplier A
StructAdd .diva,2		; divisor C
StructAdd .divres,2		; quotent of divc/divb
StructAdd .multres,2		; result of multa * multb/remainder of =divc/divb
StructAdd .latchx,2		; latched x value
StructAdd .latchy,2		; latched y value
StructAdd .latchxr,1		; low or high byte read for x value
StructAdd .latchyr,1		; low or high byte read for y value
StructAdd .frskipper,1		; used to control frame skipping
StructAdd .winl1,1		; window 1 left position
StructAdd .winr1,1		; window 1 right position
StructAdd .winl2,1		; window 2 left position
StructAdd .winr2,1		; window 2 right position
StructAdd .winbg1en,1		; Win1 on (IN/OUT) or Win2 on (IN/OUT) on BG1
StructAdd .winbg2en,1		; Win1 on (IN/OUT) or Win2 on (IN/OUT) on BG2
StructAdd .winbg3en,1		; Win1 on (IN/OUT) or Win2 on (IN/OUT) on BG3
StructAdd .winbg4en,1		; Win1 on (IN/OUT) or Win2 on (IN/OUT) on BG4
StructAdd .winobjen,1		; Win1 on (IN/OUT) or Win2 on (IN/OUT) on =sprites
StructAdd .wincolen,1		; Win1 on (IN/OUT) or Win2 on (IN/OUT) on = backarea
StructAdd .winlogica,1		; Window logic type for BG1 to 4
StructAdd .winlogicb,1		; Window logic type for Sprites and Backarea
StructAdd .winenabm,1		; Window logic enable for main screen
StructAdd .winenabs,1		; Window logic enable for sub screen
StructAdd .mode7set,1		; mode 7 settings
StructAdd .mode7A,2		; A value for Mode 7
StructAdd .mode7B,2		; B value for Mode 7
StructAdd .mode7C,2		; C value for Mode 7
StructAdd .mode7D,2		; D value for Mode 7
StructAdd .mode7X0,2		; Center X for Mode 7
StructAdd .mode7Y0,2		; Center Y for Mode 7
StructAdd .JoyAPos,1		; Old-Style Joystick Read Position for Joy 1 & 3
StructAdd .JoyBPos,1		; Old-Style Joystick Read Position for Joy 2 & 4
StructAdd .compmult,4		; Complement Multiplication for Mode 7
StructAdd .joyalt,1		; temporary joystick alternation

StructAdd .wramrwadr,4		; continuous read/write to wram address
StructAdd .dmadata,129		; dma data (written from ports 43xx)
StructAdd .irqon,1		; if IRQ has been called (80h) or not (0)
StructAdd .nexthdma,1		; HDMA data to execute once vblank ends
StructAdd .curhdma,1		; Currently executed hdma
StructAdd .hdmadata,8*19		; 4 dword register addresses, # of bytes to
                          	; transfer/line, address increment (word)
StructAdd .hdmatype,1		; if first time executing hdma or not
StructAdd .coladdr,1		; red value of color to add
StructAdd .coladdg,1		; green value of color to add
StructAdd .coladdb,1		; blue value of color to add
StructAdd .colnull,1		; keep this 0 (when accessing colors by dword)
StructAdd .scaddset,1		; screen/fixed color addition settings
StructAdd .scaddtype,1		; which screen to add/sub
StructAdd .Voice0Disabl2,1	; Disable Voice 0
StructAdd .Voice1Disabl2,1	; Disable Voice 1
StructAdd .Voice2Disabl2,1	; Disable Voice 2
StructAdd .Voice3Disabl2,1	; Disable Voice 3
StructAdd .Voice4Disabl2,1	; Disable Voice 4
StructAdd .Voice5Disabl2,1	; Disable Voice 5
StructAdd .Voice6Disabl2,1	; Disable Voice 6
StructAdd .Voice7Disabl2,1	; Disable Voice 7

StructAdd .oamram,1024		; OAMRAM (544 bytes)
StructAdd .cgram,512		; CGRAM
StructAdd .pcgram,512		; Previous CGRAM

StructAdd .vraminctype,1

; New variables
StructAdd .vramincby8on,1	; if increment by 8 is on
StructAdd .vramincby8left,1	; how many left
StructAdd .vramincby8totl,1	; how many in total (32,64,128)
StructAdd .vramincby8rowl,1	; how many left in that row (start at 8)
StructAdd .vramincby8ptri,2	; increment by how many when rowl = 0

StructAdd .nexthprior,1
StructAdd .doirqnext,1

StructAdd .vramincby8var,2
StructAdd .screstype,1
StructAdd .extlatch,1
StructAdd .cfield,1
StructAdd .interlval,1

StructAdd .HIRQLoc,2		; HIRQ X location

StructAdd .tempdat,490		; expandable area

StructAdd .wram7E,65536
StructAdd .wram7F,65536
StructAdd .vram,65536

StructEnd ZsnesState
