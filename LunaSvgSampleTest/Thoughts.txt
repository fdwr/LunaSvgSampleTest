Random thoughts for the future:

TODO:
    - Draw triange showing path start and direction
    - Add option to display size label or not
    - Wrap labels correctly if too narrow, paired with image
    - Add 'switch' element too.
    - Support non-square SVG's
    - Upload LunaSvg changes:
        - (fixed locally) Blank canvas treated as blank
        - (fixed locally) Missing em and ex from switch statement property.cpp Length::value
        - (defer until SVG2 published?) Unknown elements treated as g
        - (fixed locally) Clear faster
        - (added locally) enumerate contours
        - Eventually grid fitting
    - Screenshot candidates
        - icons8-fluency-fill-color.svg lavender paint needs proportional shear to maintain shape 24x24
        - icons8-fluency-select-none.svg dashed dots become solid gray line 24x24
        - icons8-fluency-afro-pick 28x28 bad (24x24 good)
        - icons8-fluency-bar-chart 32x32 on black background has visible dark vertical lines due to antialiasing (MSAA would fix this)
        - icons8-google-play boundaries are dark between blue and red, needing MSAA
        - icons8-fluency-add-to-clipboard horizontal rows too much detail 16x16, needs conditional reduction
        - icons8-color-check-circle checkmark can round points only to pixel corners or centers on both axes or else 45 angle would distort
        - icons8-color-settings gear shape for displacement of gear cogs. Displacing the top/bottom cogs should display the others along their tangent.
        - icons8-applet pie chart as example where you want the circle to always be an even number of pixels to avoid blurry midline
        - icons8-libre-office-writer blue lines disappear
        - Microsoft Teams View 16x16 needs midline to be crisp, so utilize rounding via scale every 2 pixels
        - Google news.svg 18x18 show individual points snapped vs 4-part, 19x19 will have uneven stem widths horizontally vs vertically
        - YouTube apps icon 28 through 40 in waterfall
        - stackoverflow.com Inbox.svg keeping inner bottom angle at 45 degrees while moving outer angle along tangent
        - MicrosoftSharePointFiles.svg top right corner because aligning the edges does not align the folder corner, and there's shear
        - booth.pm assets illustration ...svg show weird tiny cubic beziers in top right under the wedge which would mess with projection.
    - Add roadmap
        - Implement grid fitting spec in lunasvg https://github.com/sammycage/lunasvg
        - Publish spec rough draft
        - Implement spec in SVG Native Viewer https://github.com/adobe/svg-native-viewer
        - Implement Javascript polyfill library. Test with Blink/Chromium (Chrome/Edge/Opera), Gecko (FireFox), WebKit (Safari).
        - Perhaps augment https://pypi.org/project/svgpathtools/ and/or ImageMagick https://imagemagick.org/script/display.php

Fix void Canvas::rgba() to use macros. canvas.cpp line 195
    plutovg-private.h
    #define plutovg_alpha_shift 24
    #define plutovg_red_shift 0
    #define plutovg_green_shift 8
    #define plutovg_blue_shift 16

Gridfitting prototype - add extended SVG attributes for gridfitting
    Anchor points
        Invisible points solely for anchoring other shape's points to
        It has no fill, stroke, or visibility.
        Bounding box and clipping path calculations do not apply (so getBBox, getBoundingClientRect, getClientRects). Though SVG editors may have a more inclusive bounding box to show anchors.
        Pointer or keyboard events do not apply.
        Anchor sets contain multiple anchors, each potentially with different rounding modes
            1 point yields translation
            2 points yield uniform scaling along both axes - for asymmetric scaling, use 3 (e.g. x=10,y=20 to x=30,y=20)
            3 points yield arbitrary transformation (asymmetric scaling, shear, rotation)
            4+ points are unsupported, but a future version could treat them like a mesh warp.
        Can the points be expressed inline, and if so, via (a) anchor(12 42 floor(x)) (b) 12,42, 13,66 floor(x) (c) 12,42; 13,16; top,left floor(x).
        Semicolons have precedent in svg.elements.animate.keyTimes https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/keyTimes
        Semicolons are also oddly used to separate attributes inside attributes svgView(viewBox(0,0,200,200);preserveAspectRatio(none))) https://svgwg.org/svg-next/linking.html#SVGFragmentIdentifiersDefinitions
        They need not be on-counter. Indeed, for rounded rectangles, off-contour corners are desired.
    Grid fitting
        Align group of objects to adjusted/aligned point
        Translate anchor and entire grouped object and then stretch by other anchor
        transform-grid(translate(...) scale(...)
    Rounding
        Modes:
            floor, ceil
            halves to nearest floor or ceil
            toZero, toInfinity
            in, out
            up, down, left, right
        rounding-origin for in (toward zero) and out (toward infinity) rounding, or maybe an offset inside the rounding mode. e.g. to-zero(x 0 -23 0)
            Similar to https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/transform-origin
        inward and outward rounding based on path direction clockwise vs counterclockwise
        Round relative to another point
        Round even/odd (e.g. 1/3/5 odd pixel lines to half pixel vs 2/4/6 even pixel lines to pixel intersection) grid-rounding="evenodd(2)" or odd-shift(2)
        Round at a fraction of the grid, such as half pixels grid-rounding="x floor half"? grid-scale="0.5 0.5"? grid-transform="scale(0.5 0.5)"
        No rounding mode supported for halves toward even numbers (also called "banker's rounding" or "convergent").
        Round conditionally depending on whether axis aligned. e.g. grid-rounding="axis-aligned(x) non-axis-aligned(y)" 
        Reinterpret rounding direction depending on rotation or mirroring, such that a mirrored/rotated graphic looked the same as a rotated/mirrored bitmap. reinterpet-on-transform(true)
        At the lower level, these resolve to bit flags: enabled/disabled per axis, floor/ceil, enabled when axis aligned true/false, flip on winding orientation, reinterpret on transform (default true) 
    Conditional details
        Conditional visibility based on device pixels per canvas unit (PPU)
        If the condition is false, all children are hidden too (more like display:none than visibility:hidden).
        If applied to an anchor, that anchor is not considered part of the rendering tree, and any children depending on it behave like a nop.
        Possible differences:
            Omit details like drop shadow
            Perspective orientation when the icon is large, but flat when tiny (e.g. Windows 7 Notepad in Alt+Tab vs top left system icon)
            Fewer objects, such as a pad with pencil at large sizes but just the pad for smaller sizes.
    Minimum constraints
        Set minimum path width minimum-strokewidth="1px" (e.g. no thinner than 1 pixel)
        Ensure minimum 1-pixel gap between lines (e.g. Outlook office calendar icon)
    Not turing complete
        No loops, intermediate variables, or functions, just math statements

Read:
    A vector format for Flutter by Google - https://docs.google.com/document/d/1YWffrlc6ZqRwfIiR1qwp1AOkS9JyA_lEURI8p5PsZlg/edit#heading=h.8crpi5305nr
    Rendering good looking text with resolution-independent layout - http://people.redhat.com/otaylor/grid-fitting/
    https://yqnn.github.io/svg-path-editor/
    https://svg-path-visualizer.netlify.app/
    Understanding grid sizes of (SVG) icons - https://makandracards.com/makandra/467222-understanding-grid-sizes-of-svg-icons

Investigate callstack for pixel coordinate rounding / grid-fitting:
    lunasvgtest.exe!sw_ft_outline_convert(const plutovg_path * path, const plutovg_matrix_t * matrix) Line 128	C
    lunasvgtest.exe!plutovg_rle_rasterize(plutovg_rle_t * rle, const plutovg_path * path, const plutovg_matrix_t * matrix, const plutovg_rect_t * clip, const plutovg_stroke_data_t * stroke, plutovg_fill_rule_t winding) Line 268	C
    lunasvgtest.exe!plutovg_fill_preserve(plutovg * pluto) Line 464	C
    lunasvgtest.exe!plutovg_fill(plutovg * pluto) Line 426	C
    lunasvgtest.exe!lunasvg::Canvas::fill(const lunasvg::Path & path, const lunasvg::Transform & transform, lunasvg::WindRule winding, lunasvg::BlendMode mode, double opacity) Line 111	C++
    lunasvgtest.exe!lunasvg::FillData::fill(lunasvg::RenderState & state, const lunasvg::Path & path) Line 332	C++
    lunasvgtest.exe!lunasvg::LayoutShape::render(lunasvg::RenderState & state) Line 409	C++
    lunasvgtest.exe!lunasvg::LayoutContainer::renderChildren(lunasvg::RenderState & state) Line 88	C++
    lunasvgtest.exe!lunasvg::LayoutGroup::render(lunasvg::RenderState & state) Line 180	C++
    lunasvgtest.exe!lunasvg::LayoutContainer::renderChildren(lunasvg::RenderState & state) Line 88	C++
    lunasvgtest.exe!lunasvg::LayoutSymbol::render(lunasvg::RenderState & state) Line 160	C++
    lunasvgtest.exe!lunasvg::Document::render(lunasvg::Bitmap bitmap, const lunasvg::Matrix & matrix, unsigned int backgroundColor) Line 212	C++

    lunasvgtest.exe!lunasvg::to_plutovg_path(plutovg * pluto, const lunasvg::Path & path) Line 293	C++
    lunasvgtest.exe!lunasvg::Canvas::fill(const lunasvg::Path & path, const lunasvg::Transform & transform, lunasvg::WindRule winding, lunasvg::BlendMode mode, double opacity) Line 106	C++
    lunasvgtest.exe!lunasvg::FillData::fill(lunasvg::RenderState & state, const lunasvg::Path & path) Line 332	C++
    lunasvgtest.exe!lunasvg::LayoutShape::render(lunasvg::RenderState & state) Line 409	C++
    lunasvgtest.exe!lunasvg::LayoutContainer::renderChildren(lunasvg::RenderState & state) Line 88	C++
    lunasvgtest.exe!lunasvg::LayoutGroup::render(lunasvg::RenderState & state) Line 180	C++
    lunasvgtest.exe!lunasvg::LayoutContainer::renderChildren(lunasvg::RenderState & state) Line 88	C++
    lunasvgtest.exe!lunasvg::LayoutSymbol::render(lunasvg::RenderState & state) Line 160	C++
    lunasvgtest.exe!lunasvg::Document::render(lunasvg::Bitmap bitmap, const lunasvg::Matrix & matrix, unsigned int backgroundColor) Line 212	C++

    lunasvgtest.exe!plutovg_matrix_map_point(const plutovg_matrix_t * matrix, const plutovg_point_t * src, plutovg_point_t * dst) Line 128	C
    lunasvgtest.exe!sw_ft_outline_convert(const plutovg_path * path, const plutovg_matrix_t * matrix) Line 108	C
    lunasvgtest.exe!plutovg_rle_rasterize(plutovg_rle_t * rle, const plutovg_path * path, const plutovg_matrix_t * matrix, const plutovg_rect_t * clip, const plutovg_stroke_data_t * stroke, plutovg_fill_rule_t winding) Line 268	C
    lunasvgtest.exe!plutovg_fill_preserve(plutovg * pluto) Line 464	C
    lunasvgtest.exe!plutovg_fill(plutovg * pluto) Line 426	C

Elements:
    anchor - invisible point for other shapes to align/fit to (translation). Can be used as a point in an anchor set.
    anchor-set - invisible point(s) used for other shapes to align/fit to (translation, scaling, arbitrary). Anchor group/frame? A 4th point can be used to use "in" and "out" grid rounding mode.
    grid-rounding - element in defs to avoid repeating the same rounding so often?

    bikeshed:
        anchor - Provide with a firm basis or foundation. A heavy object attached to a rope or chain and used to moor a vessel to the sea bottom. (see text-anchor - https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/text-anchor). *One downside is that Adobe Illustrator uses anchor point to mean *any* point along a curve, which could confuse graphic designers. -_-
        alignment - arrangement in a straight line, or in correct or appropriate relative positions. (see text-align - https://developer.mozilla.org/en-US/docs/Web/CSS/text-align)
        adjustment - Small alteration or movement made to achieve a desired fit, appearance, or result. (see font-size-adjust - https://developer.mozilla.org/en-US/docs/Web/CSS/font-size-adjust)
        arrangement - Action, process, or result of arranging or being arranged.
        displacement - The moving of something from its place or position.
        fit - Fix or put (something) into place. be of the right shape and size for.
        fitment - Thing fitted to another in order to accomplish a specific purpose. The proper positioning and orientation of a thing for it to serve its designed purpose.
        grapnel - Device consisting essentially of one or more hooks or clamps, for grasping or holding something.
        pillar - Tall vertical structure of stone, wood, or metal, used as a support for a building, or as an ornament or monument.
        frame - Rigid structure that surrounds or encloses something such as a door or window.
        rigging - Network used for support and manipulation (as in theater scenery). The system of ropes, cables, or chains employed to support a ship's masts.
        rig - Particular way in which a sailboat's masts, sails, and rigging are arranged.
        ballast - Heavy material, such as gravel, sand, iron, or lead, placed low in a vessel to improve its stability.
        hook - Piece of metal or other material, curved or bent back at an angle, for catching hold of or hanging things on.
        support - Thing that bears the weight of something or keeps it upright.
        binding - Material or device used to bind such as the cover and materials that hold a book together.
        buttress - Architectural structure built against or projecting from a wall which serves to support or reinforce the wall.
        fixture - Piece of equipment or furniture which is fixed in position in a building or vehicle.
        attachment - An extra part or extension that is or can be attached to something to perform a particular function.
        fastener - Device that closes or secures something. Any of various devices, as a snap or hook and eye, for holding together two objects.
        node - Point at which lines or pathways intersect or branch; a central or connecting point.
        keypoint - Characteristic point of interest.
        project - Extend outward beyond something else; protrude.
        displace - Cause (something) to move from its proper or usual place.
        protrude - Extend beyond or above a surface.
        warp - Twist or distortion in the shape or form of something.
        delta - Difference between two things or values.
        expand - become or make larger or more extensive.
        contract - decrease in size, number, or range.
        shrink - become or make smaller in size or amount.
        grow - become larger or greater over a period of time; increase.
        erode - gradually destroy or be gradually destroyed. (common binary image operation https://hcimage.com/help/Content/Quantitation/Measurements/Processing%20and%20Analysis/Modify/Copy%20of%20Binary_Operations.htm)
        dilate - make or become wider, larger, or more open. (common binary image operation https://hcimage.com/help/Content/Quantitation/Measurements/Processing%20and%20Analysis/Modify/Copy%20of%20Binary_Operations.htm)

Attributes:
    *.ppu-range - display the object if the pixels per unit is within this range (upper bound exclusive). Can be used inside a switch statement or by itself (alternate name required-ppu?). This level of detail enables small blurry details to hide.
    *.grid-fit/align - fit shape to anchor points via translation and/or scaling (stretch/scale) given anchor ids. todo: Only anchor names or coordinates? It may be convenient, but mixing the two would be confusing. Naming: grid-align? grid-adjust? grid-nudge? grid-distort?
        Anchors and anchor sets may be referenced by id. Only id's of type anchors and anchor sets may be used, not arbitrary objects. https://www.w3.org/TR/SVG/linking.html
        References may not be circular and cannot refer to parent elements (which would yield a paradox because the parent alignment already affects the children)
        Invalid/non-existent references are treated as nops
        Require prefix # or no # in name?
    *.grid-origin - relative origin in user coordinates. When anchor names are given, it's relative to the snapped position, not the original.
    *.grid-offset - adjustment in device pixels, such as shifting to a half pixel. todo: just use grid-rounding prebias and postbias instead?
    *.grid-scale - multiplier for the device grid, such as rounding to every half pixel instead.
    *.grid-transform - apply multiple transformation matrix operations (scale, offset, shear) to the grid's tranform (not the general shape transform).
    *.grid-rounding - left/right/up/down/in/out/floor/ceil/to-infinity/to-zero (combined modes: nearest-left, center-down, nearest-center-right, evenodd, evenodd-left)
    *.anchor-rounding - specific to anchors without interfering with grid-rounding, which is useful for inline anchors where applying both can yield detrimental results. Defaults to inherit-grid-rounding. Can use any values from grid-rounding.
    *.stroke-rounding - like grid-rounding and anchor-rounding but specific to stroke width. Useful for ensuring minimum 1px strokes and pixel integer stroke widths.
    *.anchor-points - shorthand inline form rather than declaring a separate <anchor/> with id and grid-fit/grid-align attribute in the shape. The shorthand accepts % relative to the shape bounds.
        direction keyword | <length> | <percentage>
        Maybe accept keywords left/top/center/right/bottom too like https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/transform-origin.
    path.anchor-list - list of anchor id's used within the path (referred to by number 0 to N-1 in the path string). naming: anchors?
    path.d - augmented to include new per-point anchors. Existing path letters include "MmLlHhVvCcSsQqTtAaZz". So maybe use "ga" and "gf" (grid align and grid fit) or "Gg" (for grid) or "f" (for fit) or "ps" (for pixel snap) or "an" for "anchor".
    anchor.points - list in an anchor element of x,y coordinates (first three 3 are used for computing affine transformation).
    anchor.list - list of id's of other anchors that comprise this anchor. Note the comprising anchors already had a grid-rounding applied where they were defined, making any grid-rounding on this anchor element irrelevant. naming? uses=""? using=""? Not href because it shouldn't be an xlink.
    anchor.enclosing-region - a path statement that encloses applicable points affected by that anchor. Only used by editors and tooling, not renderers, to quickly assign nodes in paths to all respective overlapping points. *naming: applicable-region?
    anchor.grid-anchor-units - objectBoundingBox is the default (see https://www.w3.org/TR/SVG11/coords.html#ObjectBoundingBoxUnits).

    todo: like-this or likeThis? SVG is a goofy mix of the two.

Attribute details:
    grid-rounding: e.g.
        `floor(x 0.5 2 -0.5) ceil(y)`,
        `up left`
        `x floor prebias(0.5) scale(2) postbias(-0.5); y ceil`
        `up left`
        `floor(0.5 -0.5 2, 0.5 -0.5 2)`
        `transform(1 1 -1 1 0.5 0.5)`
        main equation:
            if world transform is axis aligned or rounding does not require axis aligment
                if transform reinterpretation matters
                    swap axes if rotated 90 or 270
                    mirror axes if mirrored or rotated 180
                if direction inversion matters
                    if line direction negative xor winding direction inverted
                        reverse mode function
                axisRoundedValue = modeFunction((axisValue - prebias) / scale) * scale - postbias)
                todo: subtract or add postbias? Does +prebias -postbias also work?
                todo: consider even/odd parity shift and rounding lines to nearest tangent (e.g. a 1.5 pixel wide vertical line left or right)
                orthogonalAxisValue += (axisRoundedValue - axisValue) * slope of perpendicular edge
        transform order:
            1.  world transform              [[sx, hy ], [hx, sy ], [dx, dy ] nop if identity
                (now in screen space)
            2.  anchor(s) grid fit/align
                a. nop                       [[1,  0  ], [0,  1  ], [0,  0  ] nop
                b. translate                 [[1,  0  ], [0,  1  ], [dx, dy ]
                c. scale & translate         [[s,  0  ], [0,  s  ], [dx, dy ]
                d. arbitrary                 [[sx, hy ], [hx, sy ], [dx, dy ]
            3.  ppu stroke widening/thinning [[1,  0  ], [0,  1  ], [ppu*dx, ppu*dy ] perpendicular to line segments
            4.  anchor delta multiplier      [[sx, hy ], [hx, sy ], [0,  0  ] perpendicular to line segments, used to push out vertices proportional to anchor displacement
            5.  ?scaled prebias(sx hy hx sy) [[sx, hy ], [hx, sy ], [0,  0  ] possibly a way to implement grid snapping to 45 degree angles like a checkmark?
            6.  prebias(dx dy)               [[1,  0  ], [0,  1  ], [dx, dy ] nop if dx = 0 and dy = 0
            7.  inverse scale(s)             [[1/s,0  ], [0,  1/s], [0,  0  ] nop if s = 1 todo: *is s affected by MSAA multisampled antialiasing?
            8.  floor/ceil/none              [[1,  0  ], [0,  1  ], [dx, dy ] nop if 'none' rounding mode
            9.  size scale(s)                [[s,  0  ], [0,  s  ], [0,  0  ] nop if s = 1
            10. delta multiplier(dx dy)      [[sx, hy ], [hx, sy ], [0,  0  ] nop if identity (useful for proportional delta multiple)
            11. postbias(dx dy)              [[sx, hy ], [hx, sy ], [dx, dy ] nop if identity todo: *scale by MSAA factor?
            12. minimum distance             [[1,  0  ], [0,  1  ], [dx, dy ] not useful unless a relative grid-origin is specified
            ? can prebias/postbias refer to an anchor name? e.g. prebias(someAnchor) It could be useful to align one shape to another or to force a minimum distance.
        primitives:
            none - no grid rounding along x or y. e.g "x none; y floor"
            floor - round to nearest integer toward negative infinity (equivalent to floor(xy)). Can specify prebias, scale, and postbias: floor(x 0.5 2 -0.5) ceil(y) What about a freedom vector to round along, like 45 degrees?
            ceil -  round to nearest integer toward positive infinity
            vector-floor - round along given vector? vector-floor(1 1 -1 1 0.5 0.5 0.5 0.5) scale factors x 4, prebias x y, postbias x y. Can this be simplified by using a vector in floor? Seems redundant, but maybe it is the most complete form while not allowing full matrix transforms. Inverse is computed as det = a*d - b*c. 2D inverse = [d -b; -c a] / det.
            vector-ceil - inverse of vector-floor. Tis technically redundant since can flip the scale sign (e.g. ceil = -floor(-x)).
            to-infinity - round away from zero (toward positive or negative infinity) to nearest integer. Equals iif(x > 0, ceil(x), floor(x)).
            to-zero - round toward zero to nearest integer (equivalent to to-zero-y and to-zero-y). Also called "truncation". Equals iif(x > 0, floor(x), ceil(x)).
            bias - combo of both that applies to both prebias and postbias. e.g. bias(0.5) equivalent to prebias(-0.5), postbias(0.5). bias differs from transform's "translate" in that both x and y use a single value, whereas transform's "translate" treats an absent y value as 0 (not helpful here). https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/transform
            prebias - amount to add (subtract?) to coordinate before applying scale
            postbias - amount to add (subtract?) to coordinate after applying rounding and scale. If single parameter, then it's the x/y/xy value. If two passed, x then y. If 6 passed, then it is the full transform including proportional shift. Passing 6 values doesn't feel like just a "bias" anymore; maybe rename to "transform" there.
            scale - a scale factor to divide by before flooring/ceiling, and then remultiply (e.g. to floor to the nearest multiple of 2). There is no prescale/postscale equivalent to bias, as it would yield nonsense.
            even - todo: somehow turn this into evenodd scaled by current ppu (pixels per unit/user coordinate).
            odd - todo: somehow turn this into evenodd scaled by current ppu (pixels per unit/user coordinate).
            min? - todo: somehow integrate minimum distance from other anchors into this. Can this be achieved via prebias and scale instead? e.g. for min(2 otherAnchor) use prebias(-otherAnchor) scale(2) prebias(otherAnchor). Should it only apply to anchors? Should it be a separate attribute and not part of grid rounding? mindist(x,y,dist) = iif(dist > 0, max(x + dist, y), iif(dist < 0, min(x + dist, y), y);
            transform-reinterprets(true/false) - the world transform reinterprets the rounding mode when rotated or mirrored, swapping axes for 90/270 or reversing floor/ceil for 180 or mirroring. *naming: transform-inversion:applied/ignored, reorient-by-transform, transform-reorients
            require-axis-alignmentment(true/false) - round-if-axis-aligned? only apply the rounding when it is axis aligned, including straight lines (horizontal/vertical) and bezier nodes with straight handles.
            direction-inverts(true/false) - the line direction reverses interpretation. e.g. floor(x) is treated as ceil(x) for a line going up (negative) vs down (positive). Otherwise ceil is ceil, floor is floor. *naming: invert-by-direction?
            winding-inverts(true/false) - treat direction-inverted so that lines going down as reverse interpretation. Unclosed paths or polylines are treated as if closed. Note the original path winding in design space is used (not the path winding after world transformation, which flips when mirrored).
            proportional - "tangent"? adjust the axis proportional to the displacement of the other axis, following the contour of the vertex. e.g. Consider the letter A's T-junction on the horizontal bar, where aligning y vertically to a whole pixel without also adjusting x would distort the shape and give an awkwardly thin/thick stem near that T junction. proportion(0.2 1)
            proportion(1 0 0 1) - multiply the final deltas with an additional proportional bias. naming: delta-shear? displacement-scale? delta-multiplier?
            position based on object size? e.g. anchor-position="0% 100%" for left top. Or maybe anchor-points="0,0 40,0 40,20" to directly use an implicit anchor.
            project-ppu(round=ceil bias=0 scale=0.5 minimum=1)
            nudge perpendicular to strokes based on ppu (grid size agnostic) to widen or narrow a path to whole pixels. Can apply 0.5 to adjust half on either side of a path.
            Should anchor-rounding be a separate attribute in that case to avoid points also being rounded?
            ?round along a given vector. Consider an octagon where the top left line might need to move orthogonal to the 45-degree line rather than along x and y axes.
            ?proportional is essentially a form of postbias (or maybe it literally is the m12 and m21 fields of the postbias transform).
             it's useful for a pair of open scissors or the tab of a manilla folder where pure rounding would distort the 45-degree line shape.
             useful for icons8-fluency-windows-calendar.svg to ensure dots are even spaced apart, so the outer dots are spaced as much as the distance between the inner dots.
            ?round proportionally based on adjacent line segment angle rather explicit proportion keyword which would require a different value per each point and be far more tedious?
            ?round only if at least a given ppu? can this be achieve via anchors with ppu-range?
        aliases:
            left - snap to nearest pixel integer coordinate left from x, if not already perfectly aligned. Equals floor(x).
            right - snap to nearest pixel integer coordinate right from x, if not already perfectly aligned. Equals ceil(x).
            up - snap to nearest pixel integer coordinate up from y, if not already perfectly aligned. Equals floor(y).
            down - snap to nearest pixel integer coordinate down from y, if not already perfectly aligned. Equals ceil(x).
            nearest-ties-low - round to nearest integer with ties down, not banker's rounding which would yield uneven appearance. Equals nearest-left and nearest-up.
            nearest-ties-high - round to nearest integer with ties down, not banker's rounding which would yield uneven appearance. Equals nearest-left and nearest-up.
            nearest-left - snap to nearest pixel coordinate left from x and up from y (if not already perfectly aligned). Equals `ceil(x-.5)`.
            nearest-right - Equals `floor(x+.5)`.
            nearest-up - ...
            nearest-down - ...
            nearest-diagonal-half - snap to pixel corners or pixel centers on both axes. Equivalent to: prebias(1 1 -1 1 0.5 0.5) floor postbias(0.5 -0.5 0.5 0.5 -0.5 -0.5).
            rotate-ccw-45-sqrt-two - Equivalent to: prebias(1 1 -1 1 0.5 0.5)
            rotate-cw-45-inverse-sqrt-two - Equivalent to: postbias(0.5 -0.5 0.5 0.5 -0.5 -0.5).
            todo: should "nearest" name be avoided because Nearest may also mean rounded away from zero? halves-up? fraction-up? "Halves up would be confusing with existing rounding nomenclature because geometric "up" is actually numerically "down".
            center - snap to pixel center. Ties default to left and up. Equals `ceil(x-.5)+.5`. Equivalent to `ceil(xy -0.5 1 0.5)`.
            center-left - snap to nearest pixel center to the left from the x coordinate (if not already perfectly aligned)
            center-right
            center-up
            center-down
            nearest-center-left
            nearest-center-right
            nearest-center-up
            nearest-center-down
            nearest-up - preferring this one
            in - snap pixel inward (equivalent to outward on counter-clockwise shape). e.g. in(x) out(y) alias for "floor direction-inverts(true) winding-inverts(true)"
            in-cw - snap pixel inward if clockwise winding (outward on counter-clockwise shape). "floor direction-inverts(true) winding-inverts(false)"
            out - ... alias for "ceil direction-inverts(true) winding-inverts(true)"
            out-cw - ... snap pixel outward if clockwise winding (inward on counter-clockwise shape).
            in-cw-center - ...
            in-ccw-center - ...
            out-cw-center - ...
            out-ccw-center - ...
            in-cw-nearest-center - ...
            in-ccw-nearest-center - ...
            out-cw-nearest-center - ...
            out-ccw-nearest-center - ...
            evenodd-low - Round to pixel coordinate if even or pixel center if odd ppu. e.g. `evenodd(2)`
            evenodd-high
            evenodd-left
            evenodd-right
            evenodd-up
            evenodd-down
            odd-shift?
            parity-shift?
            nearest edge shift? When stems could be closer to the left edge or right edge, choose whichever edge is closer. Maybe a subclass of parity-shift, customizable by accepting numeric parameters?
        interactions
            calc() https://drafts.csswg.org/css-values-4/#funcdef-calc and var() https://www.w3.org/TR/css-variables-1/#variables-in-shorthands are not supported inside grid rounding. This should be compatible with SVG Native which doesn't support them anyway, but all parsers must skip unknown identifers and the following content within parentheses to allow for future calls.
            axis alignment and direction inversion uses the resolved effective transform rather than the raw world transform, thus considering any active vector-effect: non-scaling-size, non-rotation, fixed-position (2022-04-19 https://svgwg.org/svg2-draft/coords.html#VectorEffectProperty)
            shape-rendering crispEdges is not affected https://www.w3.org/TR/SVG11/painting.html#ShapeRenderingProperty
            stroke-alignment (https://www.w3.org/TR/svg-strokes/#SpecifyingStrokeAlignment) and outline projection are independent. Imo Gavin Kistner's stroke-alignment is currently insufficiently defined, as inner and outer are ambiguous in too many cases, but it's a step forward. There should also be a 'left' and 'right' side enum, depending on the stroke direction. Clipping and masks are another way to achieve them: https://alexwlchan.net/2021/03/inner-outer-strokes-svg/.
            vector effects (https://dev.w3.org/SVG/modules/vectoreffects/master/SVGVectorEffectsPrimer.html) apply to the individual shapes, not the result.
        questions:
            How to snap diagonal lines, to either pixel centers or corners, but not midpoints between pixel centers? e.g. D:\src\Pikselai\resources\icons\icons8\icons8-color-close.svg
            ?How does vector-effect="non-scaling-stroke" interact?
            When fitting to two anchors, where one of the other anchors was also displaced by an anchor, is the displacement just the final grid rounding delta or the whole delta from the original ideal coordinate in world space?

Example:
    Grid alignment cannot be part of the existing transform() as browsers (Chrome and Edge anyway) ignore the entire transform attribute entirely upon seeing any unrecognized calls, ruining forwards compatibility with older clients (e.g. transform="grid-align(plusSignCenter) translate(13 24)" also ignores the translate).
    Additionally grid alignment needs to be relative to the actual device space, thus a 

        <!-- icons8-fluency-add-ot-clipboard-4-sizes.svg -->
        <anchor id="plusSignTopLeftCorner" x="37.5" y="37.5" grid-rounding="up left" />
        <g grid-align="plusSignTopLeftCorner">
            <anchor id="plusSignCenter" x="38" y="38" grid-rounding="nearest-low" grid-multiple="0.5"/><!-- round to nearest half pixel -->
            <g grid-align="plusSignCenter">
                <circle cx="38" cy="38" r="10"/>
                <path d="m 38.5,43 h -1 C 37.224,43 37,42.776 37,42.5 v -9 C 37,33.224 37.224,33 37.5,33 h 1 c 0.276,0 0.5,0.224 0.5,0.5 v 9 c 0,0.276 -0.224,0.5 -0.5,0.5 z" fill="#FFFFFF">
                <path d="m 33,38.5 v -1 C 33,37.224 33.224,37 33.5,37 h 9 c 0.276,0 0.5,0.224 0.5,0.5 v 1 c 0,0.276 -0.224,0.5 -0.5,0.5 h -9 C 33.224,39 33,38.776 33,38.5 z" fill="#FFFFFF">

                ...
                <!-- 3 anchors are used in the path for displacement.
                     Multiple anchors can apply to multiple points,
                     such as leftPart (#0) and anotherPart (#2) applying to the last point. -->
                <path anchor-list="leftPart rightPart anotherPart" d="m 10 10 h20 v20 z" grid-d="an0 m 10 10 an1 h20 an0 2 v20 z"/>
            </g>
        </g>

        <svg xmlns="http://www.w3.org/2000/svg">
          ...
          <anchor id="plusSignCenter" x="38" y="38" grid-rounding="up left" />
          ...
          <g grid-align="plusSignCenter">
            <circle cx="38" cy="38" r="10"/>
            <path d="m 38.5,43 h -1 C 37.224,43 37,42.776 37,42.5 v -9 C 37,33.224 37.224,33 37.5,33 h 1 c 0.276,0 0.5,0.224 0.5,0.5 v 9 c 0,0.276 -0.224,0.5 -0.5,0.5 z" fill="#FFFFFF">
            <path d="m 33,38.5 v -1 C 33,37.224 33.224,37 33.5,37 h 9 c 0.276,0 0.5,0.224 0.5,0.5 v 1 c 0,0.276 -0.224,0.5 -0.5,0.5 h -9 C 33.224,39 33,38.776 33,38.5 z" fill="#FFFFFF">
          </g>
          ...
          <switch>
            <g ppu-range="0 16">
              <!-- less detailed version for less than 16 pixels per unit... -->
            </g>
            <g ppu-range="16">
              <!-- tiny details visible at higher ppu, at least 16 PPU... -->
            </g>
          </switch>
        </svg>

    One anchor can be defined relative to another one.
    Below, the bottom component is kept at least 1 pixel away from the top component so there is separation between them.
        <anchor x="20" y="30" grid-minimum-distance="otherAnchor 1 0; secondAnchor 0 -1"/>
    todo: second anchor is relative to the first anchor's rounded screen location rather than user coordinates.
    todo: what if you want *exactly* 1 device pixel regardless of size, not just a minimum? round up combined with minimum?
    todo: what about 45 degree angles, so that two octagons keep the same distance from each other? It's okay if the corners
    todo: should origin be the final device pixels or the user coordinates? rounding to nearest half pixel would be useful, e.g. grid-origin="0.5px 0.5px"
          are antialiased if the straight lines are snapped, and probably more important they have the same relative thickness.
          A grid-rounding attribute like "tangential" or "linear" or "fromOrigin" or "alongOriginAxis"...?
    todo: can you have relative inline anchors, such as <rect ...><anchor position="0% 0%" grid-rounding="up"/></rect> which is positioned at the left top of the rect.
          How do you align to it though? Does it need an id, just for that one case, which kinda defeats the convenience factor?
          Or <rect ... anchor-points="0% 100%" anchor-rounding="up" grid-rounding="out"/></rect> ?
          Percentages are similar in concept to primitiveUnits="objectBoundingBox" which make the lengths relative to the referencing object's bounding box https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/primitiveUnits
          Anchor set percentages in <defs> could be treated as userSpaceOnUse or objectBoundingBox?

        <anchor id="topComponentBottomAnchor" y="40" grid-rounding="nearest">
        <anchor id="bottomComponentTopAnchor" y="41" grid-rounding="down" grid-origin="topComponentBottomAnchor"><!-- ensure at least one pixel away -->
        <path id="topComponent" anchor-list="topComponentBottomAnchor" d="an m0 0 h80 an0 v40 h-80 z"/><!-- first "an" sets to no anchors, second "an" sets anchor #0 -->
        <path id="bottomComponent" anchor-list="bottomComponentTopAnchor" d="an0 m0 41 h80 an v40 h-80 z"/><!-- first "an" sets anchor, second "an" resets to no anchors -->

    You can supply a scale and bias directly in the rounding mode. floor((x-bias)/scale)*scale+bias

        <g grid-rounding="floor-x(1 0.5)"><!-- round down to pixel centers -->
        <g grid-rounding="floor-x(2 0.0)"><!-- scale grid by 2x -->
        <g grid-rounding="floor-x(2 -0.5 0.5)"><!-- scale grid by 2x and round to 0.5's, where 0 to 2.49 yield 0.5, 2.5 to 4.49 yield 2.5. Formula = floor((x-.5)/2)*2+.5 -->
        <g grid-rounding="floor-x(0.5)"><!-- round to every half a pixel -->

        <g grid-rounding="x floor prebias(0.5)"><!-- round down to pixel centers -->
        <g grid-rounding="x floor scale(2)"><!-- scale grid by 2x -->
        <g grid-rounding="x floor scale(2) prebias(-0.5) postbias(0.5)"><!-- scale grid by 2x and round to 0.5's, where 0 to 2.49 yield 0.5, 2.5 to 4.49 yield 2.5. Formula = floor((x-.5)/2)*2+.5 -->
        <g grid-rounding="x floor scale(0.5)"><!-- round to every half a pixel -->

    Referring to the same anchor twice in a nested group will be a nop, since the outer group
    already aligned the anchor. (but how to achieve this? how to know the outer one applied?)

        <anchor id="plusSignTopLeftCorner" x="37.5" y="37.5" grid-rounding="up left">
        <g grid-align="plusSignTopLeftCorner">
            <g grid-align="plusSignTopLeftCorner"><!-- nop since already pixel aligned -->
                <path d="m 10 10 h20 v20 z"/>
            </g>
        </g>

    You should be able to stretch components too between the bounds, which translates to a tranform scale and translate:

        <anchor id="topLeftCorner" x="40" y="40" grid-rounding="up left">
        <anchor id="bottomRightCorner" x="60" y="60" grid-rounding="down right">
        <g grid-fit="topLeftCorner bottomRightCorner">
            <circle cx="50" cy="50" r="10"/>
        </g>

    You should be able to define an anchor set comprised of other existing anchors:
    
        <anchor id="anchorA" x="40" y="40" grid-rounding="up left"/>
        <anchor id="anchorB" x="60" y="40" grid-rounding="up right"/>
        <anchor id="anchorC" x="60" y="60" grid-rounding="down left"/>
        <anchor id="anchorD" x="40" y="60" grid-rounding="up left"/>
        ...
        <anchor-set id="anchorSetA" anchor-list="anchorA anchorB anchorC"/>
        <anchor-set id="anchorSetB" anchor-list="anchorA anchorD anchorC"/>

    Or via containment? (id's on internal anchors are then unnecessary):
    
        <anchor-set id="anchorSetA">
            <anchor x="40" y="40" grid-rounding="up left"/>
            <anchor x="60" y="40" grid-rounding="up right"/>
            <anchor x="40" y="60" grid-rounding="down left"/>
        </anchor-set>

    Or via points? (which would allow in/out rounding modes)

        <anchor-set id="anchorSetA" points="40,40 60,40 60,60 40,60" grid-rounding="out"/>
        <anchor-set id="anchorSetA" anchors="40,40 60,40 60,60 40,60" grid-rounding="out"/>

    Or should there just be <anchor>, not anchor-set, except it accepts multiple existing ones?

        <anchor id="anchorSetA" anchor-list="anchorA anchorB anchorC"/>

    Or mix of both?

        <anchor-set id="anchorSetA" anchors="42,36 anchorB 0%,50% left,top"/>

    Anchor sets may only take "anchors" or "points" attributes or child anchor elements, but not more than one.
    An anchors attribute is preferred over points, and points over child elements.

    Can anchors have multiple points? e.g. <anchor points="40,60 40,40 60,60" grid-rounding="down left"/>
    Or should anchors only ever be 1D points? And only anchor sets allow "points" attributes?
    It would be more concise to allow anchor with "points" and often mean only one primitive to think about <anchor>.
    Though it would be confusing if anchor allowed multiple points because when an anchor set then references an anchor, what does that mean?

    grid-fit should accept 1, 2, or 3 anchors for points, which is translation, scaling along x and y, or arbitrary scaling/rotation/shear.
    1 point is equivalent to 3 points repeating the same value.
    2 points is equivalent to 3 points with the 3rd point holding an x and y value from the other 2 points. Or 4 points making a square?
    If more than 3 points are provided, only 3 points are used to extract the affine transformation, as non-affine transforms are unsupported by most 2D renderers.

    Rotation should reinterpret rounding modes, so that the final bitmap looks identical when rotated in-place as it would if it was
    graphically rotated. There are however times where disabling that reinterpretation is useful, such as when rotating a petal
    around a flower or mirroring slats of a fence, where having consistent rounding across mirrored segments looks better.
    Attribute grid-rounding: subattribute transform-matters

    Inline anchors Would a be convenient shorthand rather than needing a separate anchor each time with a unique id.
    Instead of:

        <anchor id="RectAnchor" x="23" y="42" grid-point-rounding="up left"/>
        <rect x1="23" y1="42" width="20" height="10" grid-align="RectAnchor"/>

    Just say:
        <rect x1="23" y1="42" width="20" height="10" grid-align="anchor(23 42 up left)"/>
        <rect x1="23" y1="42" width="20" height="10" grid-align="0%,0% 100%,100% up left)"/>
        <rect x1="23" y1="42" width="20" height="10" grid-align="points(0%,0% 100%,100%) rounding(up left))"/>

    Note aligning a single anchor point is different from aligning all the points individually, which would change the height/width:
        <rect x1="23" y1="42" width="20" height="10" grid-point-rounding="up left"/>

    Or maybe:
        <rect x1="23" y1="42" width="20" height="10" grid-points="0%,0% 100%,100%" anchor-rounding="up left"/>
        <rect x1="23" y1="42" width="20" height="10" grid-points="0%,0%" anchor-rounding="up left"/> // translate by rounded top left

    Minimum stroke:
        <circle cx="50" cy="50" r="10" stroke="#70F800" stroke-width="3" grid-minimum-stroke-width="1px"/>

    Pixel aligned stroke width (e.g. rounded to nearest whole pixel):
        <circle cx="50" cy="50" r="10" stroke="#70F800" stroke-width="3" grid-stroke-width-rounding="ceil"/>

    Using the art picture frame:

    <!-- booth.pm assets arts 144-4b309d4dce8b848ec7713199ba3b782ec1915a1550f7efd179de4332d54040bd.svg -->
    <svg ...>
        <!-- top left outer, top left inner -->
        <anchor x="2"  y="10" id="clipboardTLO" grid-round="up left">
        <anchor x="8"  y="16" id="clipboardTLI" grid-align="clipboardTLO" grid-round="down right">
        <anchor x="38" y="10" id="clipboardBLO" grid-round="down left">
        <anchor x="32" y="16" id="clipboardBLI" grid-align="clipboardBLO" grid-round="up right">
        <anchor x="2"  y="38" id="clipboardTRO" grid-round="up right">
        <anchor x="8"  y="32" id="clipboardTRI" grid-align="clipboardTRO" grid-round="down left">
        <anchor x="38" y="38" id="clipboardBRO" grid-round="down right">
        <anchor x="32" y="32" id="clipboardBRI" grid-align="clipboardBRO" grid-round="up left">

        <!-- alternately use the edges instead -->
        <anchor y="10" id="clipboardTopOuter"    grid-round="up">
        <anchor y="16" id="clipboardTopInner"    grid-align="clipboardTopOuter" grid-round="down">
        <anchor y="38" id="clipboardBottomOuter" grid-round="down">
        <anchor y="32" id="clipboardBottomInner" grid-align="clipboardBottomOuter" grid-round="up">
        <anchor x="2"  id="clipboardLeftOuter"   grid-round="left">
        <anchor x="8"  id="clipboardLeftInner"   grid-align="clipboardLeftOuter" grid-round="right">
        <anchor x="38" id="clipboardRightOuter"  grid-round="left">
        <anchor x="32" id="clipboardRightInner"  grid-align="clipboardRightOuter" grid-round="right">

        <!-- starting from top right corner of picture frame, use top outer and right outer, then preceeding counter-clockwise use just top outer, then top and right... -->
        <path
            anchor-list="clipboardTopOuter clipboardTopInner clipboardBottomOuter clipboardBottomInner clipboardLeftOuter clipboardLeftInner clipboardRightOuter clipboardRightInner"
            d="ga 0 6 M 38,11 C 38 10.9 38 10.7 37.9 10.6 .. ga 0 H 33.3 L 22.8 2.8 C 21.1 1.6 18.8 1.6 17.1 2.8 ... g 0 2"
        />

        <!--
            Can you pass anchors to rect/circle/ellipse?
            If so, should they be relative to the corners or the edges?
            If using corners, what does it mean to pass 4 anchors if the 4th point would create a trapezoid?
            Edges may be cleaner?
            Maybe there should be no "anchors" and only a "grid-fit" (or "grid-align"/"grid-adjust").
        -->
        <anchor x="20" y="20" id="boxTopLeft" grid-round="nearest-ties-low">
        <anchor x="38" y="38" id="circleCenter" grid-round="odd-shift-ties-low(xy 20)">

        <rect x="20" y="20" width="10" height="10" anchor-list="boxTopLeft boxTopRight boxBottomLeft boxBottomRight"/>
        <circle cx="38" cy="38" r="10" anchor-list="circleCenter circleTopLeft circleTopRight circleBottomLeft circleBottomRight"/>
    </svg>

    Interaction with elements:
        circle cx cy rx ry - rounded how exactly?
        ellipse cx cy rx ry - rounded how exactly?
        line x1 y1 x2 y2 - each point is rounded
        polygon points="0,100 50,25" - each point is rounded
        polyline points="0,100 50,25" - each point is rounded
        rect x y width height rx ry - rounded how exactly?
        path - all points in "d" attribute rounded
        pattern x y width height viewBox - rounded after any patternTransform
        text/textPath x y dx dy - the final pixel position x+dx is rounded, not individually. If you want them separately rounded, wrap it in a <g>.
        use x y - rounded
        image x y width height - rounded
        clipPath - not affected, just subelements (e.g. the circle <clipPath id="someClip"><circle cx="40" cy="35" r="35"/></clipPath>)
        linearGradient - not affected
        radialGradient - not affected

    <switch requiredFeatures="http://www.w3.org/TR/SVG11/feature#GridFitting">
    <switch><g ppu-range="0 2"><g ppu-range="2 10"><g ppu-range="10"></switch>

    For computing ppuc along minimum axis, think of computing the minor axis length along a sheared/rotated ellipse.
        -Possibly use matrix inverse and rotate a point to axis aligned unit vector? [a b; c d] Possibly det = a*d - b*c. 2D inverse = [d -b; -c a] / det.
        -Possibly use eigen vector?
        Use this:
            numpy.set_printoptions(precision=3, floatmode='fixed', suppress=True)
            angle = math.tau * 45 / 360
            r = numpy.array([[cos(angle), -sin(angle)], [sin(angle), cos(angle)]])
            sx = numpy.array([[0.5, 0], [0, 1]])
            sy = numpy.array([[1, 0], [0, 0.5]])
            sxy = numpy.array([[0.5, 0], [0, 0.5]])
            M = R; a = M[0][0]; b = M[0][1]; c = M[1][0]; d = M[1][1]; sqrt(b*b + d*d); sqrt(a*a + c*c)
      Possibly just check x and y after rotating the transform back to axis alignment?
      Unfortunately just transforming 2 unit vectors of axis aligned x and y don't seem robust to all transformations, such as scaling along the diagonal, such as numpy.array([[ 0.707, -0.707], [ 0.354,  0.354]]).

Code snippets
    Determine winding order: https://stackoverflow.com/a/18472899/937938
    Note this won't work with the infinity sign (8) shape.

        double sum = 0.0;
        Vector v1 = vertices[vertices.Count - 1]; // or vertices[^1] with
                                                  // C# 8.0+ and .NET Core
        for (int i = 0; i < vertices.Count; i++) {
            Vector v2 = vertices[i];
            sum += (v2.X - v1.X) * (v2.Y + v1.Y);
            v1 = v2;
        }
        return sum > 0.0;

    https://stackoverflow.com/questions/22954239/given-three-points-compute-affine-transformation

        void AffineSolver(float* AtoF, float* a, float* b)
        {
            AtoF[0] = ( b[1].x * a[0].y - b[2].x * a[0].y - b[0].x * a[1].y + b[2].x * a[1].y + b[0].x * a[2].y - b[1].x * a[2].y) / 
                      ( a[1].x * a[0].y - a[2].x * a[0].y - a[0].x * a[1].y + a[2].x * a[1].y + a[0].x * a[2].y - a[1].x * a[2].y);

            AtoF[1] = ( b[1].x * a[0].x - b[2].x * a[0].x - b[0].x * a[1].x + b[2].x * a[1].x + b[0].x * a[2].x - b[1].x * a[2].x) / 
                      (-a[1].x * a[0].y + a[2].x * a[0].y + a[0].x * a[1].y - a[2].x * a[1].y - a[0].x * a[2].y + a[1].x * a[2].y);

            AtoF[2] = ( b[1].y * a[0].y - b[2].y * a[0].y - b[0].y * a[1].y + b[2].y * a[1].y + b[0].y * a[2].y - b[1].y * a[2].y) / 
                      ( a[1].x * a[0].y - a[2].x * a[0].y - a[0].x * a[1].y + a[2].x * a[1].y + a[0].x * a[2].y - a[1].x * a[2].y);

            AtoF[3] = ( b[1].y * a[0].x - b[2].y * a[0].x - b[0].y * a[1].x + b[2].y * a[1].x + b[0].y * a[2].x - b[1].y * a[2].x) / 
                      (-a[1].x * a[0].y + a[2].x * a[0].y + a[0].x * a[1].y - a[2].x * a[1].y - a[0].x * a[2].y + a[1].x * a[2].y);

            AtoF[4] = ( b[2].x * a[1].x * a[0].y - b[1].x * a[2].x * a[0].y - b[2].x * a[0].x * a[1].y +
                        b[0].x * a[2].x * a[1].y + b[1].x * a[0].x * a[2].y - b[0].x * a[1].x * a[2].y) / 
                      ( a[1].x * a[0].y - a[2].x * a[0].y - a[0].x * a[1].y + a[2].x * a[1].y + a[0].x * a[2].y - a[1].x * a[2].y);

            AtoF[5] = ( b[2].y * a[1].x * a[0].y - b[1].y * a[2].x * a[0].y - b[2].y * a[0].x * a[1].y +
                        b[0].y * a[2].x * a[1].y + b[1].y * a[0].x * a[2].y - b[0].y * a[1].x * a[2].y) / 
                      ( a[1].x * a[0].y - a[2].x * a[0].y - a[0].x * a[1].y + a[2].x * a[1].y + a[0].x * a[2].y - a[1].x * a[2].y);
        }

        https://www.w3.org/TR/SVG11/intro.html#TermConditionalProcessingAttribute

    Matrix transform of point
        https://docs.microsoft.com/en-us/windows/win32/api/wingdi/ns-wingdi-xform
        x = m11*x + m21*y + dx
        y = m12*x + m22*y + dy

    d:\src\lunasvgsampletest\external\lunasvg\source\property.cpp

        Transform Transform::operator*(const Transform& transform) const
        {
            double m00 = this->m00 * transform.m00 + this->m10 * transform.m01;
            double m10 = this->m00 * transform.m10 + this->m10 * transform.m11;
            double m01 = this->m01 * transform.m00 + this->m11 * transform.m01;
            double m11 = this->m01 * transform.m10 + this->m11 * transform.m11;
            double m02 = this->m02 * transform.m00 + this->m12 * transform.m01 + transform.m02;
            double m12 = this->m02 * transform.m10 + this->m12 * transform.m11 + transform.m12;

            return Transform{m00, m10, m01, m11, m02, m12};
        }

        Transform Transform::inverted() const
        {
            double det = (this->m00 * this->m11 - this->m10 * this->m01);
            if(det == 0.0)
                return Transform{};

            double inv_det = 1.0 / det;
            double m00 = this->m00 * inv_det;
            double m10 = this->m10 * inv_det;
            double m01 = this->m01 * inv_det;
            double m11 = this->m11 * inv_det;
            double m02 = (this->m01 * this->m12 - this->m11 * this->m02) * inv_det;
            double m12 = (this->m10 * this->m02 - this->m00 * this->m12) * inv_det;

            return Transform{m11, -m10, -m01, m00, m02, m12};
        }

        template <size_t ByteSize>
        struct GetCorrespondingUnsignedIntegerType;
        template<> struct GetCorrespondingUnsignedIntegerType<1> { using Type = uint8_t; };
        template<> struct GetCorrespondingUnsignedIntegerType<2> { using Type = uint16_t; };
        template<> struct GetCorrespondingUnsignedIntegerType<4> { using Type = uint32_t; };
        template<> struct GetCorrespondingUnsignedIntegerType<8> { using Type = uint64_t; };

        template <typename T, typename D = GetCorrespondingUnsignedIntegerType<sizeof(T)>::Type>
        D GetUlpDifference(T a, T b)
        {
            D aBitValue = std::bit_cast<D>(a);
            D bBitValue = std::bit_cast<D>(b);
            return (aBitValue > bBitValue) ?
                   (aBitValue - bBitValue) :
                   (bBitValue - aBitValue); // abs() only accepts signed values
        }

Reference:
    TrueType
        https://docs.microsoft.com/en-us/typography/opentype/spec/tt_instructions#round-to-half-grid
        RTHG - round to half grid
        RTG - round to grid
        RTDG - Round To Double Grid
        RDTG - Round Down To Grid
        RUTG - Round Up To Grid
        ROFF - Round OFF
        SROUND - Super ROUND
        Threshold = prebias
        Phase = postbias
        roundedValue = floor(x - phase - threshold) + phase
    Direct3D 11
        https://microsoft.github.io/DirectX-Specs/d3d/archive/D3D11_3_FunctionalSpec.htm#3.4.2.1%20Top-Left%20Rule
        In graphics triangle rasterization, ties round down (e.g. 1.5->1.0, 2.5->2.0)

Related:
    SVG
        SVG specification - https://github.com/w3c/svgwg/tree/master, https://www.w3.org/TR/SVG2/
        SVG Hinting Proposals - https://www.w3.org/Graphics/SVG/WG/wiki/Proposals/SVG_hinting
        Microsoft W3C rep for SVG - https://github.com/atanassov, https://www.w3.org/groups/wg/svg/participants
        https://svgwg.org/specs/svg-native/
        https://svgwg.org/svg2-draft/conform.html#secure-static-mode
    WPF
        WPF SnapsToDevicePixels and UseLayoutRounding - https://blog.benoitblanchon.fr/wpf-blurry-images/
        WPF GuidelineSets - https://www.wpftutorial.net/DrawOnPhysicalDevicePixels.html
        Images and Icons for Visual Studio - https://docs.microsoft.com/en-us/visualstudio/extensibility/ux-guidelines/images-and-icons-for-visual-studio?view=vs-2022
    TrueType
        TrueType hinting is overkill - https://docs.microsoft.com/en-us/typography/opentype/spec/ttch01
    Tools
        Inkscape SVG editor - https://inkscape.org/
        Cairo based convertor for SVG to PNG - https://cairosvg.org/
        Cairo rendering API - https://cairographics.org/download/
        SVG Path Visualizer webpage - https://svg-path-visualizer.netlify.app/
        SVG Native Viewer - https://github.com/adobe/svg-native-viewer
        CodePen - https://codepen.io/mattdesl/pen/QjMrXV
        Inkscape Plugin PixelSnap - https://code.google.com/archive/p/pixelsnap/
        Sketch Plugin Pixel Perfecter - https://github.com/swiadek/pixel-perfecter-sketch-plugin
        The magnificent 2d matrix - https://ncase.me/matrix/
        Yuri Sulyma's Matrix Visualizer - https://web.ma.utexas.edu/users/ysulyma/matrix/
    Libraries
        parse-svg-path - https://www.npmjs.com/package/parse-svg-path
        normalize-svg-path - https://www.npmjs.com/package/normalize-svg-path
    Guidance
        Material Design "Clarity (Pixel perfection)" - https://material.io/design/iconography/system-icons.html#grid-and-keyline-shapes
        Adobe Spectrum Iconography - https://spectrum.adobe.com/page/iconography/#Characteristics
        Adobe Draw pixel-perfect art https://helpx.adobe.com/illustrator/using/pixel-perfect.html
        IBM Carbon Design System - https://www.carbondesignsystem.com/guidelines/icons/contribute/
        Firefox Photon Design System - https://design.firefox.com/photon/visuals/iconography.html
        Pixel-fitting by Dustin Curtis - https://dcurt.is/pixel-fitting 2012-05-09
        Pushing Pixels About Those Vector Icons by Kirill Grouchnikov - https://www.pushing-pixels.org/2011/11/04/about-those-vector-icons.html 2022-04-25
        Icon Design Vector vs Bitmap by Josh Williams - https://web.archive.org/web/20130209065422/http://www.firewheeldesign.com/sparkplug/2006/April/icon_design_bitmap_vs_vector.php 2022-04-25
        Pixel-snapping in icon design by Helena Zhang - https://uxdesign.cc/pixel-snapping-in-icon-design-a-rendering-test-6ecd5b516522 2022-04-25
        Precision With Every Pixel by Ashley Chang - https://blog.readme.com/precision-with-every-pixel/ 2022-04-25
        The Designer's Guide to Pixel Hinting by Dustin Cartwright *Note he uses the term incorrectly. It's not called "pixel hinting" in this context - https://www.webdesignerdepot.com/2014/03/the-designers-guide-to-pixel-hinting/.  2014-03-17
        My Illustrator snapping settings by Bjango https://bjango.com/articles/illustratorsnapping/  2022-05-22
        The one killer feature icon fonts have over svg OR: why github icons look like shit now https://swatinem.de/blog/the-one-killer-feature-of-icon-fonts/ 2016-01-31
        Pixel Hinting for Crisp Icons by Danelle Bailey http://danellebailey.com/design-blog/2016/9/29/pixel-hinting-for-crisp-icons 2016-10-05
