%ifndef _MEMORY_MACROS

%define _MEMORY_MACROS

%include "System.mac"

%macro HeapInit 1
	push	dword %1
	call	_myheap_init_2
	lea	esp,[esp + 4]
%define _MYHEAP_INIT_MACRO
%endmacro

%macro HeapExit 0
	call	_myheap_exit_2
%define _MYHEAP_EXIT_MACRO
%endmacro

%macro Malloc 2
	push	dword %1
	call	_myheap_alloc_2
	lea	esp,[esp + 4]
%ifid %2
	mov	%2,[_myheap_spare1]
%else
	push	eax
	mov	eax,[_myheap_spare1]
	mov	%2,eax
	pop	eax
%endif
%define _MYHEAP_ALLOC_MACRO
%endmacro

%macro Calloc 2
	push	dword %1
	call	_myheap_alloc_2
	lea	esp,[sep + 4]
%ifid %2
	mov	%2,[_myheap_spare1]
%else
	push	eax
	mov	eax,[_myheap_spare1]
	mov	%2,eax
	pop	eax
%endif
	jc	%%Calloc_Error			; end if error
	push	ecx				; save registers
	push	esi
	pushfd					; don't forget the flags!
	push	dword %2
	pop	esi				; get address of first byte
	push	dword %1
	pop	ecx				; get size of block
	add	ecx,7				; align size up to nearest
	and	ecx,$0fffffff8			; 8-byte boundary
	shr	ecx,3				; divide by 8 (we'll do two dwords/loop)
%%Calloc_Loop:
	mov	[esi],dword 0
	mov	[esi + 4],dword 0
	add	esi,8
	dec	ecx				; two more dwords done
	jnz	%%Calloc_Loop
	popfd					; restore registers
	pop	esi
	pop	ecx
%%Calloc_Error:
%define _MYHEAP_ALLOC_MACRO
%endmacro

%macro Realloc 3
	push	dword %1
	push	dword %2
	call	_myheap_realloc_2
	lea	esp,[esp + 8]
%ifid %3
	mov	%3,[_myheap_spare1]
%else
	push	eax
	mov	eax,[_myheap_spare1]
	mov	%3,eax
	pop	eax
%endif
%define _MYHEAP_REALLOC_MACRO
%endmacro

%macro Free 1
	push	dword %1
	call	_myheap_free_2
	lea	esp,[esp + 4]
%define _MYHEAP_FREE_MACRO
%endmacro

%macro HeapReset 0
	call	_myheap_reset_2
%define _MYHEAP_RESET_MACRO
%endmacro

%macro HeapSize 1
	call	_myheap_size_2
%ifid %1
	mov	%1,[_myheap_spare1]
%else
	push	eax
	mov	eax,[_myheap_spare1]
	mov	%1,eax
	pop	eax
%endif
%define _MYHEAP_SIZE_MACRO
%endmacro

%macro HeapSpace 1
	call	_myheap_space_2
%ifid %1
	mov	%1,[_myheap_spare1]
%else
	push	eax
	mov	eax,[_myheap_spare1]
	mov	%1,eax
	pop	eax
%endif
%define _MYHEAP_SPACE_MACRO
%endmacro

%macro HeapBlockCheck 2
	push	dword %1
	call	_myheap_blockcheck_2
	lea	esp,[esp + 4]
%ifid %2
	mov	%2,[_myheap_spare1]
%else
	push	eax
	mov	eax,[_myheap_spare1]
	mov	%2,eax
	pop	eax
%endif
%define _MYHEAP_BLOCKCHECK_MACRO
%endmacro

%macro HeapBlockSpace 1
	push	dword %1
	call	_myheap_blockspace_2
	lea	esp,[esp + 4]
%define _MYHEAP_BLOCKSPACE_MACRO
%endmacro

%endif
