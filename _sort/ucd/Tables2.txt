# This is the control file for ucdtool.exe.  It specifies which properties
# to generate information for.
#
# Rebuilding data:
#   cd %_NTROOT%\windows\core\text\data\generated
#   sd edit UcdProperties.h
#   sd edit UcdData.bin
#   cd ..\tables
#   ucdtool.exe
#
# Boolean properties also require the Category to be specified.  Typically
# Ucd files containing boolean properties have several different properties
# in a single file.  The Category disambiguates which one to generate for.  
# The generated header will contain a function named "UcdIs<GeneratedType>".
#
# Emumerated properties require the DefaultValue to be specified.  The
# generated header will contain an enum <GeneratedType> containing all the 
# values for that property as well as a function named "UcdGet<GeneratedType>".
# Enumerated properties may optionally specify a SymbolPrefix that is
# prepended to the value names listed in the enum.  If no SymbolPrefix is
# given than <GeneratedType> is used as the prefix.
#
# Value properties can be either hex or decimal (HexValue/DecimalValue),
# and require a DefaultValue in case one is not specified for the character.
# The generated function will will be named "UcdGet<GeneratedType>".
#
# Note that all attributes are case-sensitive.


# These first few attributes (before the first File attribute) are directives
# to ucdtool. Note that the paths here assume that ucdtool is run from
# windows\core\text\data\tables.

GeneratedHeader=..\Generated\UcdProperties.h
GeneratedBinary=..\Generated\UcdData.bin


# Now for the properties.
################################################################################

Property=WhiteSpace
Type=Boolean
FileIn=PropList.txt
Category=White_Space

################################################################################

Property=BidiMirrored
Type=Boolean
FileIn=DerivedBinaryProperties.txt
Category=Bidi_Mirrored

################################################################################

Property=Diacritic
Type=Boolean
FileIn=PropList.txt
Category=Diacritic

################################################################################

Property=VariationSelector
Type=Boolean
FileIn=PropList.txt
Category=Variation_Selector

################################################################################

Property=LineBreakClass
Type=Enumeration
FileIn=LineBreak.txt
DefaultValue=XX

################################################################################

Property=Script
Type=Enumeration
FileIn=Scripts.txt
DefaultValue=Zzzz
Enum=Zzzz;0
Enum=Common;1
Enum=Inherited;2

################################################################################

Property=BidiClass
Type=Enumeration
FileIn=DerivedBidiClass.txt
SymbolPrefix=BidiClass_
DefaultValue=L

################################################################################

Property=GeneralCategory
Type=Enumeration
FileIn=DerivedGeneralCategory.txt
DefaultValue=Cn
Exception=2028;Cc                  # Treat line separator as control, not it's own special category
Exception=2029;Cc                  # Treat paragraph separator as control, not it's own special category

################################################################################

Property=MirrorCharacter
Type=HexValue
FileIn=BidiMirroring.txt
DefaultValue=inputChar

################################################################################

Property=OrientationClass
Type=Enumeration
FileIn=Orientation.txt
DefaultValue=Unknown

################################################################################

Property=CharacterComplexity
Type=Enumeration
FileIn=CharacterComplexity.txt
Enum=Simple;0x00                   # Completely simple
Enum=Complex;0x01                  # Complex script
Enum=Bidi;0x02                     # May not need shaping, but needs bidi
Enum=Supplementary;0x04            # May be simple, but beyond BMP
Enum=LineBreak;0x08                # Line break
Enum=Unknown;0xFF                  # unknown
DefaultValue=Complex

#################################################################################
## This input property is not stored, just used by other properties.

#Property=OldCharacterName
#Type=String
#FileIn=UnicodeData.txt
#IsStoredProperty=false
#Column=10
#
#Property=NewCharacterName
#Type=String
#FileIn=UnicodeData.txt
#IsStoredProperty=false
#Column=1
#
#Property=CharacterName
#Type=String
#IsStoredProperty=false
#Rule=IsNamed: Out NewCharacterName <control>
#Rule=Select NewCharacterName IsNamed
#Rule=Select OldCharacterName

Property=CharacterName
Type=String
FileIn=UnicodeData.txt
IsStoredProperty=false
Column=1

#################################################################################

Property=Block
Type=Enumeration
FileIn=Blocks.txt
#todo:FileOut=..\Generated\Blocks.generated.txt
DefaultValue=No_Block
IsStoredProperty=false

#################################################################################

Property=OrientationClass2
Type=Enumeration
#FileIn=Orientation.txt
#todo:FileOut=..\Generated\Orientation.generated.txt
IsStoredProperty=false
DefaultValue=Unknown

# May be stackable or rotatable depending on script,
# so we just do nothing and leave it up to the script.
#
# Lu Uppercase_Letter - an uppercase letter
# Ll Lowercase_Letter - a lowercase letter
# Lt Titlecase_Letter - a digraphic character, with first part uppercase
# Lm Modifier_Letter - a modifier letter
# Lo Other_Letter - other letters, including syllables and ideographs
# Cs Surrogate - a surrogate code point

# Inherit whatever came before them.
#
# Mn Nonspacing_Mark - a nonspacing combining mark (zero advance width)
# Mc Spacing_Mark - a spacing combining mark (positive advance width)
# Me Enclosing_Mark - an enclosing combining mark

Rule=IsInheritedGc: In GeneralCategory Mn Mc Me
Rule=IsInheritedScript: In Script Inherited
Rule=IsInherited: Or IsInheritedGc IsInheritedScript

# Numbers default to rotating, but can also stack, even in connected scripts.
# The circled digits 2460..249B are stacked.
#
# Nd Decimal_Number - a decimal digit
# Nl Letter_Number - a letterlike numeric character
# No Other_Number - a numeric character of other type

Rule=IsNumber: In GeneralCategory Nd Nl No

# Symbols default to rotating but can stack.
#
# Sc Currency_Symbol - a currency sign
# So Other_Symbol - a symbol of other type
# Po Other_Punctuation - a punctuation mark of other type
# Sm Math_Symbol - a symbol of primarily mathematical use

Rule=IsSymbol: In GeneralCategory Sc So Po Sm

# Rotate for both default and stacked, either via transform or font feature.
#
# Pc Connector_Punctuation - A connecting punctuation mark, like a tie.
#
# 005F    _    LOW LINE
# 203F    ‿    UNDERTIE
# 2040    ⁀    CHARACTER TIE
# 2054    ⁔    INVERTED UNDERTIE
# FE4D    ﹍    DASHED LOW LINE
# FE4E    ﹎    CENTRELINE LOW LINE
# FE4F    ﹏    WAVY LOW LINE
# FF3F    ＿    FULLWIDTH LOW LINE
#
# The presentation forms explicitly do not rotate.
# FE33    ︳    PRESENTATION FORM FOR VERTICAL LOW LINE
# FE34    ︴    PRESENTATION FORM FOR VERTICAL WAVY LOW LINE

Rule=IsConnector: In GeneralCategory Pc

# Rotate visually when stacked, either via transform or font feature.
#
# Pd Dash Punctuation - a dash or hyphen punctuation mark
#
# 002D    -    HYPHEN-MINUS
# 058A    ֊    ARMENIAN HYPHEN
# 05BE    ־    HEBREW PUNCTUATION MAQAF
# 1400    ᐀    CANADIAN SYLLABICS HYPHEN
# 1806    ᠆    MONGOLIAN TODO SOFT HYPHEN
# 2E17    ⸗    DOUBLE OBLIQUE HYPHEN
# 2E1A    ⸚    HYPHEN WITH DIAERESIS
#
# These are flaky, as fonts may define 2, 7, or none, via 'vert'.
# So we'll consistently rotate for each.
#
# General punctuation block
# 2010    ‐    HYPHEN
# 2011    ‑    NON-BREAKING HYPHEN
# 2012    ‒    FIGURE DASH
# 2013    –    EN DASH
# 2014    —    EM DASH
# 2015    ―    HORIZONTAL BAR
#
# CJK dashes rotate via font GSUB. A graphical rotation would
# not be right here, since some characters like the wave dash
# not only rotate but also mirror and/or change stroke thickness.
#
# CJK Symbols and Punctuation block
# CJK Compatibility Forms block
# 301C    〜    WAVE DASH
# 3030    〰    WAVY DASH
# 30A0    ゠    KATAKANA-HIRAGANA DOUBLE HYPHEN
# FE31    ︱    PRESENTATION FORM FOR VERTICAL EM DASH
# FE32    ︲    PRESENTATION FORM FOR VERTICAL EN DASH
# FE58    ﹘    SMALL EM DASH
# FE63    ﹣    SMALL HYPHEN-MINUS
# FF0D    －    FULLWIDTH HYPHEN-MINUS

Rule=IsDash: In GeneralCategory Pd

# These should rotate in both default and stacked.
#
# Open_Punctuation - an opening punctuation mark (of a pair)
# Close_Punctuation - a closing punctuation mark (of a pair)
# Initial_Punctuation - an initial quotation mark
# Final_Punctuation - a final quotation mark
#
# The full width characters in the blocks 'CJK Symbols and Punctuation'
# and 'CJK Compatibility Forms' rotate via the 'vert' feature
# (such U+3014 LEFT TORTOISE SHELL BRACKET).
#
# Others use graphic rotation (such as the ASCII bracket '[').

Rule=IsOpeningClosing: In GeneralCategory Ps Pe Pi Pf

# Stackable but rotate by default
#
# Modifier_Symbol - a non-letterlike modifier symbol

Rule=IsModifierSymbol: In GeneralCategory Sk

# Space rotates or stacks.
# Ideographic space always stacks.
# Fixed width spaces always rotate even in stacked mode,
# following the baseline (otherwise their purpose would be mute).
#
# Zs Space_Separator - a space character (of various non-zero widths)

Rule=IsSpace: In GeneralCategory Zs
Rule=IsSpaceFixedWidth: In Block General_Punctuation

# Co Private_Use - a private-use character
#
# Private use are stackable and are upright in default mode, since
# the common case usage is for ideographic characters. Both GDI
# and GDI+ do this. There are two private use ranges though, one
# at E000..F8FF, and another at F0000..10FFF0. For the higher
# range, it's likely these will be used for unknown scripts where
# it would be safer to rotate or stack, depending on the mode.
#
# So we use the block instead of general category here.

Rule=IsPrivateUse: In Block Private_Use_Area
Rule=IsPrivateUseHigh: In Block Private_Use_Area_A Private_Use_Area_B

# Line_Separator - U+2028 LINE SEPARATOR only
# Paragraph_Separator - U+2029 PARAGRAPH SEPARATOR only
# Control - a C0 or C1 control code
# Format - a format control character
# Unassigned - a reserved unassigned code point or a noncharacter
#
# Hidden and zero-width characters always rotate.
# We don't want them to stack and cause an awkward looking gap.

Rule=IsControl: In GeneralCategory Zl Zp Cc Cf Cn

# Katakana has half-width forms.
Rule=IsHalfWidth: In LineBreakClass AL

# Whether the symbol has a mirror pair.
Rule=IsMirroredPair: In BidiMirrored

# Use the font's 'vert' feature rather than graphical rotation here.
Rule=IsIdeographicBlock: In Block CJK_Symbols_and_Punctuation CJK_Compatibility_Forms

# Even script-specific Latin has full-width forms, which should only stack.
Rule=IsIdeographicLineBreak: In LineBreakClass ID

# Ideographic characters only stack.
Rule=IsIdeographic: Or IsIdeographicBlock IsIdeographicLineBreak

# Keep upright
Rule=IsArrow: In Block Arrows Supplemental_Arrows_A Supplemental_Arrows_B

# Keep upright.
Rule=IsBlockElement: In Block Box_Drawing Block_Elements

# Keep upright
Rule=IsUprightSymbol: In Block Geometric_Shapes Miscellaneous_Symbols Dingbats Miscellaneous_Mathematical_Symbols_A Miscellaneous_Mathematical_Symbols_B Supplemental_Mathematical_Operators Miscellaneous_Symbols_and_Arrows Enclosed_Alphanumeric_Supplement Enclosed_Ideographic_Supplement Miscellaneous_Symbols_And_Pictographs Emoticons Transport_And_Map_Symbols Alchemical_Symbols Mahjong_Tiles Domino_Tiles Playing_Cards

# By default, each script is allowed to rotate or stack. Specific scripts
# may be restricted to only rotate (Arabic) or stack (Chinese).

# These always rotate, either due to cursive connection (Arabic) or
# significantly variable width (Khmer) that would stack very poorly.
# Note that specific characters within the script, like numbers and
# punctuation, may still be allowed to stack fine; but the letters
# do not.
Rule=IsRotatedScript: In Script
    #
    # RTL connected
    Arabic
    Syriac
    Syriac_Estrangelo
    Syriac_Western
    Syriac_Eastern
    Mandaic               # related to Syriac
    Manichaean            # evolved from Syriac
    Ancient_North_Arabian
    Psalter_Pahlavi
    Book_Pahlavi
    #
    # TTB connected rotatable, rotates fully (weakly horizontal,
    # typically LTR, but seen as RTL 270CW on Arabic webpage)
    Phags_Pa
    Mongolian
    #
    # TTB/LTR/BTT connected rotatable, rotates fully
    Ogham
    #
    # TTB discrete, rotatable, rotates fully (weakly horizontal)
    Sarati                # one of Tolkien's, TTB/LTR
    #
    # LTR discrete, rotatable
    # * Not reliably stackable because the characters are too wide
    #   to fit into columns, like U+0D10 ഐ Malayalam letter ai Lo L.
    #   Some could reasonably be stacked if the glyphs within clusters
    #   were fragmented, but certain single glyphs themselves are too
    #   unwieldly.
    # * Or because it is technically discrete but has wide ligatures,
    #   like Avestan.
    Telugu
    Malayalam
    Grantha               # resembles Malayam
    Avestan
    Cham
    Duployan              # shorthand safest to rotate (though doesn't appear connected)
    Javanese              # widely variable-width swashes below letters (but the letters appear fine)
    Khmer                 # South Asian agglutinative variable-width
    Kannada               # South Asian agglutinative variable-width
    Tai_Tham              # South Asian agglutinative variable-width
    Myanmar               # South Asian agglutinative variable-width (Burmese script)
    Oriya                 # South Asian agglutinative variable-width
    Sinhala               # South Asian agglutinative variable-width
    Tamil                 # South Asian agglutinative variable-width

# These always stack
Rule=IsStackedScript: In Script
    #
    # TTB discrete, stackable, not rotated or mirrored (includes ideographs)
    Bopomofo
    Korean
    Hangul
    Han
    HanSimplified
    HanTraditional
    Japanese              # Alias for Hiragana + Katakana + Kanji
    Katakana_Or_Hiragana
    Hiragana
    Katakana
    Yi
    Sign_Writing          # TTB
    #
    # LTR discrete, stackable
    Visible_Speech        # rotation would change meaning, so keep upright
    Canadian_Aboriginal   # Unified Canadian Aboriginal Syllabics - keep upright as rotation easily changes meaning!
    Blissymbols
    Moon                  # rotation would change meaning, so keep upright
    Lisu                  # keep upright, since the alphabet has rotated forms and is used in China
    Loma                  # probably wisest to keep upright for reading clarity
    Linear_A              # stackable
    Linear_B              # U+10000 stackable
    Vai
    Nakhi_Geba            # resembles Yi, LTR
    Miao                  # resembles some Latin but with rotational variants
    Ugaritic              # cuneiform where rotation could change meaning (some occurrences of RTL too)
    Old_Persian           # Old Persian cuneiform LTR
    #
    # RTL/LTR/TTB discrete stackable mirrorable
    Egyptian_demotic      # (more cursive, maybe even be rotatable)
    Egyptian_hieratic     # (had a rare but existent TTB legacy before Amenemhat III)
    Egyptian_Hieroglyphs
    Mayan_Hieroglyphs     # stackable, mirrorable, not rotatable
    Meroitic_Hieroglyphs  # TTB/RTL
    #
    # LTR/RTL(upside down) discrete stackable not-mirrorable, rotates upside-down, not mirrored
    Rongorongo

Rule=IsMirrorableScript: In Script
    #
    # Some of these were mirrorable too in ancient legacy usage, but have since
    # standardized to a given orientation; though, you may still very uncommonly
    # find them mirrored today, places such as the sides of vehicles where a short
    # string of Latin on a Chinese truck door is mirrored on the other side.
    # Latin
    # Latin_Fraktur
    # Latin_Gaelic
    # Elbasan
    # Greek
    # Carian
    # Gothic
    # Coptic
    # Old_Italic            # developed from west Greek alphabet
    # Cyrillic
    # Cyrillic_Slavonic     # (Old Church Slavonic variant)
    # Deseret
    # Cherokee
    Runic                 # futhark, initially variable, later settled on LTR
    Old_Hungarian         # boustrophodon and mirroring
    Indus                 # RTL, sometimes boustrophodon
    Old_South_Arabian     # LTR or RTL, mirrored
    Egyptian_demotic      # (more cursive, maybe even be rotatable)
    Egyptian_hieratic     # (had a rare but existent TTB legacy before Amenemhat III)
    Egyptian_Hieroglyphs
    Mayan_Hieroglyphs     # stackable, mirrorable, not rotatable
    Meroitic_Hieroglyphs  # TTB/RTL

Rule=IsFullyRotatingScript: In Script
    #
    # TTB connected rotatable, rotates fully (weakly horizontal,
    # typically LTR, but seen as RTL 270CW on Arabic webpage)
    Phags_Pa
    Mongolian
    Ogham
    Sarati                # one of Tolkien's, TTB/LTR
    Rongorongo

# These are by default both rotatable and stackable (and thus not explicitly compared against)
# Rule=IsStackableRotatable In Script
#     #
#     # RTL discrete, stackable, rotatable
#     Hebrew
#     Old_Turkic            # Orkh, Old Turkic, Orkhon Runi (typical TTB is 270CW RTL rather than stacked)
#     Nko
#     Imperial_Aramaic
#     Cypriot               # thought to have developed from Linear A
#     Kharoshthi
#     Lydian
#     Mende                 # looks similar to Loma, but LTR instead, and many more symbols
#     Meroitic_Cursive      # called 'cursive' but doesn't appear connected
#     Nabataean
#     Palmyrene
#     Inscriptional_Pahlavi # unjoined
#     Phoenician
#     Inscriptional_Parthian
#     Samaritan
#     Tagalog
#     Thaana
#     #
#     # LTR connected, rotatable (and although very rare, stackable too)
#     Bengali
#     Devanagari
#     Gurmukhi
#     #
#     # LTR discrete, rotatable, stackable
#     Thai                  # stacks more vertically than horizontally (excluding Sara Am)
#     Lao                   # like Thai, it appears to stack vertically more than horizontally (which Malayam does)
#     New_Tai_Lue           # looks similar to Lanna/Lao but characters don't agglutinate very widely
#     Tai_Viet
#     Meetei_Mayek          # Mtei Meitei Mayek (Meithei, Meetei)
#     Syloti_Nagri
#     Braille
#     Balinese              # looks quite cursive, but doesn't appear connected; perhaps better never stacking
#     Bamum
#     Armenian
#     Brahmi
#     Buginese
#     Buhid
#     Chakma
#     Cirth
#     Ethiopic
#     Khutsuri
#     Georgian
#     Glagolitic
#     Gujarati
#     Hanunoo               # interestingly often written BTT/LTR, but read LTR/TTB
#     Tagbanwa              # written BTT/LTR, read LTR/TTB
#     PahawhHmong
#     Kayah_Li
#     Kpelle
#     Kaithi                # looks like much Devanagari without the hanging baseline
#     Lepcha
#     Limbu
#     Lycian
#     Ol_Chiki              # Ol Cemet'
#     Osmanya
#     Old_Permic
#     Rejang
#     Saurashtra
#     Shavian
#     Sindhi                # based mainly on Khudabadi script
#     Sundanese
#     Tai_Le                # Tai Nüa
#     Tengwar
#     Tifinagh              # Neo-Tifinagh, not traditional Tifinagh, which was RTL, though older Libyan inscriptions use BTT
#     Tibetan
#     Warang_Citi
#     Cuneiform             # the pictograms rotate 90CW in ancient vertical TTB (before the 3rd millenium BC)
#     #
#     # LTR discrete, stackable, rotatable, (and rarely mirrorable too in
#     # ancient legacy usage or uncommon places such as the sides of
#     # vehicles, such as an occurrence of short Latin on both sides of
#     # Chinese trucks where one side is mirrored the other).
#     Latin
#     Latin_Fraktur
#     Latin_Gaelic
#     Elbasan
#     Greek
#     Carian
#     Gothic
#     Coptic
#     Old_Italic            # developed from west Greek alphabet
#     Cyrillic
#     Cyrillic_Slavonic     # (Old Church Slavonic variant)
#     Deseret
#     Cherokee
#     #
#     # LTR/RTL discrete, stackable, rotatable
#     Bassa_Vah             # later settled on LTR in 1960's, can't confirm or deny mirroring
#     #
#     # LTR/RTL discrete, mirrorable scripts, stackable, rotatable
#     Runic                 # futhark, initially variable, later settled on LTR
#     Old_Hungarian         # boustrophodon and mirroring
#     Indus                 # RTL, sometimes boustrophodon
#     Old_South_Arabian     # LTR or RTL, mirrored
#     #
#     # BTT discrete, stackable, rotatable
#     Batak


# IsInherited
# IsNumber
# IsSymbol
# IsConnector
# IsDash
# IsOpeningClosing
# IsModifierSymbol
# IsSpace
# IsSpaceFixedWidth
# IsPrivateUse
# IsPrivateUseHigh
# IsControl
# IsHalfWidth
# IsMirroredPair
# IsIdeographicBlock
# IsIdeographicLineBreak
# IsIdeographic
# IsArrow
# IsBlockElement
# IsUprightSymbol
# IsRotatedScript
# IsStackedScript
# IsMirrorableScript
# IsFullyRotatingScript

#Rule=AllowsRotation
#Rule=AllowsStacking

#UsesFontRotation
#UsesGraphicRotation
#IsIdeographicBlock IsOpeningClosing

#Rule=Case CI IsInherited
#Rule=Case BOX IsBlockElement

Rule=IsUnassigned: In GeneralCategory Cn
Rule=HasNoBlock: Out Block
#Rule=Case DR IsUnassigned HasNoBlock

# Use general category and script when known. Only use the block when the
# character is common script or Unknown. This allows characters like U+2E9A
# in the CJK Radicals supplement to still get a sensible orientation.

#	RS AllowsRotationStacking
#	RO AllowsRotation
#	SO AllowsStacking

# DR,       OmpControl},
# CI,       OmpInherited},
# ADS,      OmpArrow}, // note it does not cover U+FFE9..FFEC, which are ADSR (in the data file already)
# BLK,      OmpBlockElement},
# BOX,      OmpBoxDrawing},
# DSR,      OmpPrivateUseHigh}, // rotate or stack depending on mode
# DS,       OmpPrivateUse},     // stack, since typically used for ideographs
# CRU,      OmpConnectedScript, OmpRotatesFully},
# CSR,      OmpConnectedScript, OmpStackableScript},
# CSR,      OmpConnectedScript, OmpSymbol},
# DSR,      OmpConnectedScript, OmpNumber}, // numbers are always discrete and stackable even in connected scripts
# CR,       OmpConnectedScript},
# DR,       OmpDiscreteScript, OmpSpaceFixedSize},
# DR,       OmpDiscreteScript, OmpSpace},
# DRF,      OmpDiscreteScript, OmpDash, OmpIdeographic},
# DR,       OmpDiscreteScript, OmpDash},
# DRF,      OmpDiscreteScript, OmpConnector, OmpIdeographic},
# DR,       OmpDiscreteScript, OmpConnector},
# DRFMP,    OmpDiscreteScript, OmpOpeningClosing, OmpIdeographic, OmpMirroredPair},
# DRF,      OmpDiscreteScript, OmpOpeningClosing, OmpIdeographic},
# DR,       OmpDiscreteScript, OmpOpeningClosing},
# DRU,      OmpDiscreteScript, OmpRotatesFully},
# DRMP,     OmpDiscreteScript, OmpOpeningClosing, OmpMirroredPair},
# DSR,      OmpDiscreteScript, OmpSymbol}, // symbols generally don't mirror
# DSRM,     OmpDiscreteScript, OmpRotatableScript, OmpMirrorableScript},
# DSM,      OmpDiscreteScript, OmpMirrorableScript},
# DSMP,     OmpDiscreteScript, OmpMirroredPair},
# DSR,      OmpDiscreteScript, OmpStackableScript, OmpRotatableScript},
# DS ,      OmpDiscreteScript, OmpStackableScript},
# DR,       OmpDiscreteScript, OmpRotatableScript},
# DS,       OmpDiscreteScript},
# DS,       OmpUprightSymbol},
# DSR,      OmpSymbol},
# Unknown},




################################################################################
Property=CharacterComplexity2
Type=Enumeration
FileIn=CharacterComplexity2.txt
FileOut=..\Generated\CharacterComplexity.generated.txt
#Exception=1;Simple
Enum=Simple;0x00                   # Completely simple
Enum=Complex;0x01                  # Complex script
Enum=Bidi;0x02                     # May not need shaping, but needs bidi
Enum=Supplementary;0x04            # May be simple, but beyond BMP
Enum=LineBreak;0x08                # Line break
Enum=Unknown;0xFF                  # unknown
DefaultValue=Complex
IsStoredProperty=false

# Generation when property is undefined.
Rule=Case LineBreak IsLineBreak
Rule=Case DefaultValue IsComplexGc
Rule=Case Supplementary IsBeyondBMP IsSimpleScript
Rule=Case Bidi IsRtl IsSimpleScript
Rule=Case Simple IsSimpleScript
Rule=Case Simple IsCommonScript IsSimpleCommonBlock
Rule=Case Simple IsPartiallySimpleScript IsSimpleScriptBlock
# else Complex

Rule=IsComplexGc: In GeneralCategory Cn Cf Cc Zl Zp Mn Me Mc
Rule=IsLineBreak: In LineBreakClass BK CR NL LF
Rule=IsRtl: In BidiClass R AL
Rule=IsSimpleScript: In Script
    # These have no complex behaviors, and except for diacritics,
    # are always simple.
    Latin
    Cyrillic
    Greek
    Hebrew
    Han
    Hiragana
    Katakana
    Braille
    # ...
Rule=IsCommonScript: In Script Common
Rule=IsSimpleCommonBlock: In Block
    # These blocks are full of common script simple characters.
    # We don't consider ALL common script characters to be simple
    # since characters like the Arabic tatweel are complex. Only
    # those which are common AND in simple blocks are simple.
    Superscripts_and_Subscripts
    Number_Forms
    Arrows
    Mathematical_Operators
    Miscellaneous_Technical
    Control_Pictures
    Optical_Character_Recognition
    Enclosed_Alphanumerics
    Box_Drawing
    Block_Elements
    Geometric_Shapes
    Miscellaneous_Symbols
    Dingbats
    Miscellaneous_Mathematical_Symbols_A
    # ...
Rule=IsPartiallySimpleScript: In Script
    # These may be simple depending on the block they are in.
    # Precomposed Hangul are simple, whereas the decomposed Jamo
    # require shaping.
    Hangul
Rule=IsSimpleScriptBlock: In Block
    Hangul_Syllables
    Hangul_Compatibility_Jamo
Rule=IsBeyondBMP: Range 10000..10FFFF

# Verification when property is already defined (double checking existing properties).

# Rules should not be marked as simple if they are actually complex.
# Explicitly marking one complex when the rules would think it are
# simple is okay.
Rule=AssertNot IsConflictingComplexity
Rule=IsConflictingComplexity: And IsMarkedSimple IsDefinitelyNotSimple
Rule=IsMarkedSimple: In CharacterComplexity2 Simple
Rule=IsDefinitelyNotSimple: Or IsComplexGc IsRtl IsBeyondBMP
