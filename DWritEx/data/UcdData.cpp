//+---------------------------------------------------------------------------
//
//  Copyright (c) Microsoft, 2007. All rights reserved.
//
//  Contents:   Functions pertaining to searching data generated by ucdtool
//
//  Author:     Michael Warning (mikew@microsoft.com)
//
//  History:    10-05-2007  mikew  Created
//
//----------------------------------------------------------------------------

#include "precomp.h"


// Global pointer to ucd binary data used by the lookup functions below
const UcdFileHeader* g_ucddata = NULL;

// Initialize the global Ucd data pointer to the Ucd data in the resources
bool UcdInitialize()
{
    return 
        LoadBinaryResource(
            L"UcdData",
            L"EMBEDDEDDATA",
            const_cast<void**>( reinterpret_cast<const void**>(&g_ucddata) )
        );
}


// General function for looking up boolean properties.
bool UcdLookupBooleanProperty(UcdProperty prop, char32_t c) throw()
{
    DEBUG_ASSERT(c <= UnicodeMax);

    UcdPropertyInfo const* propinfo = &g_ucddata->properties[prop - 1];
    uint8_t b0 = (c >> (ChildBlockBits * 3)) & (ChildBlockLevels - 1);
    uint8_t b1 = (c >> (ChildBlockBits * 2)) & (ChildBlockLevels - 1);
    uint8_t b2 = (c >> (ChildBlockBits * 1)) & (ChildBlockLevels - 1);
    uint8_t b3 = (c >> (ChildBlockBits * 0)) & (ChildBlockLevels - 1);

    uint8_t const* p = (uint8_t const*) g_ucddata + propinfo->offset;
    p += ((uint16_t const*) p)[b0];
    p += ((uint16_t const*) p)[b1];
    p += p[b2] * ChildBlockLevels / 8;

    return TestBit(p, b3);
}


// General function for looking up enumerated properties.
int32_t UcdLookupEnumeratedProperty(UcdProperty prop, char32_t c) throw()
{
    DEBUG_ASSERT(c <= UnicodeMax);

    UcdPropertyInfo const* propinfo = &g_ucddata->properties[prop - 1];
    uint8_t b0 = (c >> (ChildBlockBits * 3)) & (ChildBlockLevels - 1);
    uint8_t b1 = (c >> (ChildBlockBits * 2)) & (ChildBlockLevels - 1);
    uint8_t b2 = (c >> (ChildBlockBits * 1)) & (ChildBlockLevels - 1);
    uint8_t b3 = (c >> (ChildBlockBits * 0)) & (ChildBlockLevels - 1);

    uint8_t const* p = (uint8_t const*) g_ucddata + propinfo->offset;
    p += ((uint16_t const*) p)[b0];
    p += ((uint16_t const*) p)[b1];
    p += p[b2] * ChildBlockLevels;

    int32_t v = p[b3];

    return v;
}


// General function for looking up hex-value properties.  If the given
// character isn't found, return the given default value.
int32_t UcdLookupValueProperty(UcdProperty prop, char32_t c, int32_t defaultValue) throw()
{
    DEBUG_ASSERT(c <= UnicodeMax);

    UcdPropertyInfo const* propinfo = &g_ucddata->properties[prop - 1];
    uint8_t b0 = (c >> (ChildBlockBits * 3)) & (ChildBlockLevels - 1);
    uint8_t b1 = (c >> (ChildBlockBits * 2)) & (ChildBlockLevels - 1);
    uint8_t b2 = (c >> (ChildBlockBits * 1)) & (ChildBlockLevels - 1);
    uint8_t b3 = (c >> (ChildBlockBits * 0)) & (ChildBlockLevels - 1);

    uint8_t const* p = (uint8_t const*) g_ucddata + propinfo->offset;
    p += ((uint16_t const*) p)[b0];
    p += ((uint16_t const*) p)[b1];
    p += p[b2] * ChildBlockLevels;

    int32_t v = ((int32_t *) p)[b3];

    if (v == 0)
        v = defaultValue;

    return v;
}
