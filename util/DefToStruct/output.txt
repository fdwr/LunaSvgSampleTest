#include <search.h>
#ifndef elmsof
#define elmsof(element) (sizeof(element)/sizeof(element[0]))
#endif

struct NameValuePair {
	TCHAR* name;
	int value;
};

static NameValuePair names[] = {
_T("VK_LBUTTON"), 0x0001,
_T("VK_RBUTTON"), 0x0002,
_T("VK_CANCEL"), 0x0003,
_T("VK_MBUTTON"), 0x0004,
_T("VK_XBUTTON1"), 0x0005,
_T("VK_XBUTTON2"), 0x0006,
_T("VK_BACK"), 0x0008,
_T("VK_TAB"), 0x0009,
_T("VK_CLEAR"), 0x000C,
_T("VK_RETURN"), 0x000D,
_T("VK_SHIFT"), 0x0010,
_T("VK_CONTROL"), 0x0011,
_T("VK_MENU"), 0x0012,
_T("VK_PAUSE"), 0x0013,
_T("VK_CAPITAL"), 0x0014,
_T("VK_KANA"), 0x0015,
_T("VK_HANGEUL"), 0x0015,
_T("VK_HANGUL"), 0x0015,
_T("VK_JUNJA"), 0x0017,
_T("VK_FINAL"), 0x0018,
_T("VK_HANJA"), 0x0019,
_T("VK_KANJI"), 0x0019,
_T("VK_ESCAPE"), 0x001B,
_T("VK_CONVERT"), 0x001C,
_T("VK_NONCONVERT"), 0x001D,
_T("VK_ACCEPT"), 0x001E,
_T("VK_MODECHANGE"), 0x001F,
_T("VK_SPACE"), 0x0020,
_T("VK_PRIOR"), 0x0021,
_T("VK_NEXT"), 0x0022,
_T("VK_END"), 0x0023,
_T("VK_HOME"), 0x0024,
_T("VK_LEFT"), 0x0025,
_T("VK_UP"), 0x0026,
_T("VK_RIGHT"), 0x0027,
_T("VK_DOWN"), 0x0028,
_T("VK_SELECT"), 0x0029,
_T("VK_PRINT"), 0x002A,
_T("VK_EXECUTE"), 0x002B,
_T("VK_SNAPSHOT"), 0x002C,
_T("VK_INSERT"), 0x002D,
_T("VK_DELETE"), 0x002E,
_T("VK_HELP"), 0x002F,
_T("VK_LWIN"), 0x005B,
_T("VK_RWIN"), 0x005C,
_T("VK_APPS"), 0x005D,
_T("VK_SLEEP"), 0x005F,
_T("VK_NUMPAD0"), 0x0060,
_T("VK_NUMPAD1"), 0x0061,
_T("VK_NUMPAD2"), 0x0062,
_T("VK_NUMPAD3"), 0x0063,
_T("VK_NUMPAD4"), 0x0064,
_T("VK_NUMPAD5"), 0x0065,
_T("VK_NUMPAD6"), 0x0066,
_T("VK_NUMPAD7"), 0x0067,
_T("VK_NUMPAD8"), 0x0068,
_T("VK_NUMPAD9"), 0x0069,
_T("VK_MULTIPLY"), 0x006A,
_T("VK_ADD"), 0x006B,
_T("VK_SEPARATOR"), 0x006C,
_T("VK_SUBTRACT"), 0x006D,
_T("VK_DECIMAL"), 0x006E,
_T("VK_DIVIDE"), 0x006F,
_T("VK_F1"), 0x0070,
_T("VK_F2"), 0x0071,
_T("VK_F3"), 0x0072,
_T("VK_F4"), 0x0073,
_T("VK_F5"), 0x0074,
_T("VK_F6"), 0x0075,
_T("VK_F7"), 0x0076,
_T("VK_F8"), 0x0077,
_T("VK_F9"), 0x0078,
_T("VK_F10"), 0x0079,
_T("VK_F11"), 0x007A,
_T("VK_F12"), 0x007B,
_T("VK_F13"), 0x007C,
_T("VK_F14"), 0x007D,
_T("VK_F15"), 0x007E,
_T("VK_F16"), 0x007F,
_T("VK_F17"), 0x0080,
_T("VK_F18"), 0x0081,
_T("VK_F19"), 0x0082,
_T("VK_F20"), 0x0083,
_T("VK_F21"), 0x0084,
_T("VK_F22"), 0x0085,
_T("VK_F23"), 0x0086,
_T("VK_F24"), 0x0087,
_T("VK_NUMLOCK"), 0x0090,
_T("VK_SCROLL"), 0x0091,
_T("VK_OEM_NEC_EQUAL"), 0x0092,
_T("VK_OEM_FJ_JISHO"), 0x0092,
_T("VK_OEM_FJ_MASSHOU"), 0x0093,
_T("VK_OEM_FJ_TOUROKU"), 0x0094,
_T("VK_OEM_FJ_LOYA"), 0x0095,
_T("VK_OEM_FJ_ROYA"), 0x0096,
_T("VK_LSHIFT"), 0x00A0,
_T("VK_RSHIFT"), 0x00A1,
_T("VK_LCONTROL"), 0x00A2,
_T("VK_RCONTROL"), 0x00A3,
_T("VK_LMENU"), 0x00A4,
_T("VK_RMENU"), 0x00A5,
_T("VK_BROWSER_BACK"), 0x00A6,
_T("VK_BROWSER_FORWARD"), 0x00A7,
_T("VK_BROWSER_REFRESH"), 0x00A8,
_T("VK_BROWSER_STOP"), 0x00A9,
_T("VK_BROWSER_SEARCH"), 0x00AA,
_T("VK_BROWSER_FAVORITES"), 0x00AB,
_T("VK_BROWSER_HOME"), 0x00AC,
_T("VK_VOLUME_MUTE"), 0x00AD,
_T("VK_VOLUME_DOWN"), 0x00AE,
_T("VK_VOLUME_UP"), 0x00AF,
_T("VK_MEDIA_NEXT_TRACK"), 0x00B0,
_T("VK_MEDIA_PREV_TRACK"), 0x00B1,
_T("VK_MEDIA_STOP"), 0x00B2,
_T("VK_MEDIA_PLAY_PAUSE"), 0x00B3,
_T("VK_LAUNCH_MAIL"), 0x00B4,
_T("VK_LAUNCH_MEDIA_SELECT"), 0x00B5,
_T("VK_LAUNCH_APP1"), 0x00B6,
_T("VK_LAUNCH_APP2"), 0x00B7,
_T("VK_OEM_1"), 0x00BA,
_T("VK_OEM_PLUS"), 0x00BB,
_T("VK_OEM_COMMA"), 0x00BC,
_T("VK_OEM_MINUS"), 0x00BD,
_T("VK_OEM_PERIOD"), 0x00BE,
_T("VK_OEM_2"), 0x00BF,
_T("VK_OEM_3"), 0x00C0,
_T("VK_OEM_4"), 0x00DB,
_T("VK_OEM_5"), 0x00DC,
_T("VK_OEM_6"), 0x00DD,
_T("VK_OEM_7"), 0x00DE,
_T("VK_OEM_8"), 0x00DF,
_T("VK_OEM_AX"), 0x00E1,
_T("VK_OEM_102"), 0x00E2,
_T("VK_ICO_HELP"), 0x00E3,
_T("VK_ICO_00"), 0x00E4,
_T("VK_PROCESSKEY"), 0x00E5,
_T("VK_ICO_CLEAR"), 0x00E6,
_T("VK_PACKET"), 0x00E7,
_T("VK_OEM_RESET"), 0x00E9,
_T("VK_OEM_JUMP"), 0x00EA,
_T("VK_OEM_PA1"), 0x00EB,
_T("VK_OEM_PA2"), 0x00EC,
_T("VK_OEM_PA3"), 0x00ED,
_T("VK_OEM_WSCTRL"), 0x00EE,
_T("VK_OEM_CUSEL"), 0x00EF,
_T("VK_OEM_ATTN"), 0x00F0,
_T("VK_OEM_FINISH"), 0x00F1,
_T("VK_OEM_COPY"), 0x00F2,
_T("VK_OEM_AUTO"), 0x00F3,
_T("VK_OEM_ENLW"), 0x00F4,
_T("VK_OEM_BACKTAB"), 0x00F5,
_T("VK_ATTN"), 0x00F6,
_T("VK_CRSEL"), 0x00F7,
_T("VK_EXSEL"), 0x00F8,
_T("VK_EREOF"), 0x00F9,
_T("VK_PLAY"), 0x00FA,
_T("VK_ZOOM"), 0x00FB,
_T("VK_NONAME"), 0x00FC,
_T("VK_PA1"), 0x00FD,
_T("VK_OEM_CLEAR"), 0x00FE,
};

static int NameValuePair_cmp(const int* elem1, const NameValuePair* elem2)
{
	if (*elem1 <  elem2->value) return -1;
	if (*elem1 >  elem2->value) return  1;
	return  0;
};

extern "C" TCHAR* NameFromValue(int index, NameValuePair* names, int count)
{
	NameValuePair* match = (NameValuePair*)
		bsearch(&index, names, count, sizeof(NameValuePair),
			(int (__cdecl *)(const void *,const void *))&NameValuePair_cmp);
	if (match == NULL) {
		const static TCHAR text[] = _T("<unknown>");
		return text;
	}
	return match->name;
}

// sample call: NameFromValue(35, names, elmsof(names));
