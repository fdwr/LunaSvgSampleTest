Dynamically Linked Collection

  A proposed arrangment for storage of any data entity of any type. It can
hold many different files and types in one dynamic file archive. The archives
are designed for continual rewrites of data with minimal disk writing and time
wasted; however, a little space may be wasted to speed up random rewriting.
This space can be compressed though every now and then to shrink the file
size again. They can be specially made for just one type of program or for any
generic kind, with adaptible flexibility for future improvements. As of now,
the generic archive contains uncompressed entries, an ASCII name associated
with each entry, and defined types up to as many as are necessary. Later
version may include various forms of compression, icons instead of simple
text, descriptive comments for each entry, and a more advanced hierarchy
system of entity arrangment; instead of them all being parallel to each other.


---Anyways, enough of that junk...here it is:

file id                 ASCII string
  short string describing type of collection.
collection header       Binary
  defines some necessary variables for this collection.
pointers                Binary
  points to the data entities contained in the collection and the number of
  siblings each one has.
data entity types       ASCIIZ
  short strings defining the types of entities pointed to by the pointers.
data chunks
  all of the entities and the siblings of each. they may actually be arranged
  in any order...physical order is not the same order of entities you see in
  the list. for that reason, they can be rearranged in any order flexibly
  without messing up the names.


---The generic collection format:


---The specific PixDraw collection format:

---The specific SpriteView collection format:

file id & collection header
  same as usual
pointers                Binary
  points to the data entities contained in the collection and the number of
  siblings each one has.

  first palette                         #??
  palette name list                     #1
  marker definition                     #1
  first marker                          #??
  beginning of marker name list         #1
  ...?

data entity types       ASCIIZ
  short strings defining the types of entities pointed to by the pointers.
  if uses its own four types of entities to keep them separated from anything
  else that might be in the collection. they may actually be in any order,
  but the one below is the usual.
  
  sv_palette        a simple RGB palette for colormapping
  sv_palette_name   just a descriptive ASCIIZ name of each palette
  sv_marker_def     defines a few variables for the markers
  sv_marker         little marker containing file position, screen mode...
  sv_marker_name    just a descriptive ASCIIZ name of each marker
  ...?              any other type of entity is silently ignored and left
                    alone so to not mess things up

data chunks
  all of the entities and the siblings of each. they may actually be arranged
  in any order...physical order is not the same order of entities you see in
  the list. for that reason, they can be rearranged in any order flexibly
  without messing up the names.

  generic data chunk
    pointer to next chunk        may be another sibling or a different entity
    pointer to previous chunk    all depending on the physical order
    pointer to next sibling      if the last sibling, it points to the first
    pointer to previous sibling  if the first sibling, it points to the last
    number of bytes following used by chunk

  data chunk 0 (palette 1: Zelda)
    pointer to 1
    pointer to 8
    pointer to 3
    pointer to 2

  data chunk 1 (palette name list)
    pointer to 2
    pointer to 0
    pointer to 1 (points to itself for next)
    pointer to 1 (points to itself for previous)
  
  data chunk 2 (palette 0: Link)
    pointer to 3
    pointer to 1
    pointer to 0
    pointer to 7
  
  data chunk 3 (palette 2: Ganon)
    pointer to 4
    pointer to 2
    pointer to 6
    pointer to 0
  
  data chunk 4 (marker definition)
    pointer to 3
    pointer to 5
    pointer to 4 (points to itself for next)
    pointer to 4 (points to itself for previous)
  
  data chunk 5 (marker name list)
    pointer to 4
    pointer to 6
    pointer to 5 (points to itself for next)
    pointer to 5 (points to itself for previous)
  
  data chunk 6 (palette 3: Agahnim)
    pointer to 5
    pointer to 7
    pointer to 8
    pointer to 3
  
  data chunk 7 (palette 5: Zora)
    pointer to 6
    pointer to 8
    pointer to 7
    pointer to 2
  
  data chunk 8 (palette 4: Fairy)
    pointer to 7
    pointer to 0
    pointer to 7
    pointer to 6
