'FROM:    GABRIEL NAJERA   (LEYP14A)
'If anyone still remembers me, Masm Manny, I decided to join
'again because AOL is a joke.  I made this little game about
'a month ago and thought that this was a perfect time to show
'it to everyone.  Its a pretty cool game, REAL action if you
'know what I mean.  Easy at first, then towards the end it
'gets insanely hard.  Try to beat it!  The file is a monster,
'but don't let that discourage you from geting all 30 notes.
'I used that Spliter thing that thomas or someone put on
'here.  So... use that or something.
'Please reply with your opinions!
' Requires: Qbasic or Qb 4.5
'                               Manny Najera
'---------------------------------------------------------------------------
'Balloon X v2.1 - Written By Manny Najera
'
'
'How To Play:
'
'In a nutshell, you fly your little balloon around, looking for gems.
'You need to get gems in order to go on to the next level.
'But beware!  There are missle-thingys and torpedos and shrapnel
'bombs and other menaces that you have to look out for.
'Just press F1 during the game to see the instructions.
'
'Other Info:
'
'If you are running this in Qbasic, you may see some unexpected images
'during screen transitions.  I made this on a 486sx 25mhz, so some of
'you other guys might have to turn turbo off.  Basic isn't too well with
'keeping a consistent speed.
'
'Special Stuff:
'
'Much thanks to Simon, the guy who sat next to me in word processing class!
'He's the one that said that this game was too hard and came up with the
'idea of making the coin enemys into extra life thingys.
'
'The source code is pretty cheap and choppy, who knows if you can use
'it?  If you plan to use my code or ideas, Email me first and we'll
'talk.  Don't rip code without permission!
'
'---------------------------------------------------------------------------
DEFINT A-Z
OPTION BASE 1
'$DYNAMIC
'Declares and such
DECLARE SUB MakeQuits ()
DECLARE SUB MakeHelpScreen ()
DECLARE SUB Center (Row, Text$, C)
DECLARE SUB CreateTable ()
DECLARE SUB MakeStars (NumStars%)
DECLARE SUB GetKey ()
DECLARE SUB ProcessMotion ()
DECLARE SUB DrawBalloon ()
DECLARE SUB MakeTitleScreen ()
DECLARE SUB DoMenu ()
DECLARE SUB MakeIntroScreen ()
DECLARE SUB DoIntro ()
DECLARE SUB DoExit ()
DECLARE SUB StartGame ()
DECLARE SUB DrawArena ()
DECLARE SUB MainGame ()
DECLARE SUB LevDis ()
DECLARE SUB DoTorpedo (lev)
DECLARE SUB MakeInfo ()
DECLARE SUB SeeInfo ()
DECLARE SUB DoMissle (lev)
DECLARE SUB DoItem ()
DECLARE SUB DoBItem ()
DECLARE SUB DeadDuck ()
DECLARE SUB Initit ()
DECLARE SUB DrawBlankArena ()
DECLARE SUB StartBonus ()
DECLARE SUB DoBomb (lev)
DECLARE SUB DoDemoMode ()
DECLARE SUB LevelClear ()
DECLARE SUB DoCheapEnding ()
DECLARE FUNCTION PointHit% (Hx, Hy)
DECLARE FUNCTION BoxHit% (Hx1, Hy1, hx2, hy2)
RANDOMIZE TIMER
'OPENING TEXT
COLOR 15, 0: PRINT "Balloon X v2.01"
PRINT "Free memory bytes:"; FRE(-1) 'Just wanna see how much
PRINT "Loading..."                   'I can stuff in...
'DEFS
DEF Fnr (X) = INT(RND * X) + 1
'TYPES
TYPE BItemType
X AS INTEGER
Y AS INTEGER
Ym AS INTEGER
num AS INTEGER
Active AS INTEGER
Clock AS INTEGER
END TYPE
TYPE BombType
Active AS INTEGER
Clock AS INTEGER
Rclock AS INTEGER
Anclock AS INTEGER
AnFlag AS INTEGER
Fx AS INTEGER
Fy AS INTEGER
Sx AS INTEGER
Sy AS INTEGER
END TYPE
TYPE HighType                 'I was gonna make a high
PlayerName AS STRING * 3    'score table, but I wanted
PlayerScore AS DOUBLE         'to contain everything in
PlayerDate AS STRING * 10   'a single BAS file
PlayerLevel AS INTEGER        'You can make one with this type...
END TYPE
TYPE NormalType
Score AS DOUBLE
Level AS INTEGER
Gems AS INTEGER
GemReq AS INTEGER
Lives AS INTEGER
END TYPE
TYPE BalloonType
W AS INTEGER
H AS INTEGER
X AS INTEGER
Y AS INTEGER
Xm AS INTEGER
Ym AS INTEGER
Anclock AS INTEGER
AnFlag AS INTEGER
Dead AS INTEGER
DeadClock AS INTEGER
Dx AS INTEGER
Dy AS INTEGER
END TYPE
TYPE MenuType
num AS INTEGER
Clock AS INTEGER
END TYPE
TYPE TorpedoType
X AS INTEGER
Y AS INTEGER
Xm AS INTEGER
Ym AS INTEGER
Active AS INTEGER
ActCount AS INTEGER
Exploding AS INTEGER
Ecount AS INTEGER
Ex AS INTEGER
Exx AS INTEGER
Eyy AS INTEGER
LoCount AS INTEGER
Count AS INTEGER
Fx AS INTEGER
Fy AS INTEGER
END TYPE
TYPE CoinType                'I was gonna have this enemy called
X AS INTEGER                 'THE COINS, just coins that spin at you
Y AS INTEGER                 'in sine waves, but they made the game
Xm AS INTEGER                'way too hard.
Active AS INTEGER
ActCount AS INTEGER
Anclock AS INTEGER
AnFlag AS INTEGER
END TYPE
TYPE MissleType
X AS INTEGER
Y AS INTEGER
Xm AS INTEGER
Active AS INTEGER
ActCount AS INTEGER
END TYPE
TYPE ItemType
X AS INTEGER
Y AS INTEGER
Active AS INTEGER
ActCount AS INTEGER
num AS INTEGER
EndCount AS INTEGER
END TYPE
TYPE StarType
X AS INTEGER
Y AS INTEGER
Ym AS INTEGER
T AS INTEGER
C AS INTEGER
END TYPE
'DIMS
DIM SHARED BItem(5) AS BItemType
DIM SHARED Bomb(3) AS BombType
DIM SHARED Star(60) AS StarType
DIM SHARED Item AS ItemType
DIM SHARED XSin(360) AS SINGLE, Xcos(360) AS SINGLE
DIM SHARED C(10) AS CoinType
DIM SHARED Missle(10) AS MissleType
DIM SHARED High AS HighType
DIM SHARED Current AS NormalType
DIM SHARED Bal AS BalloonType
DIM SHARED Menu AS MenuType
DIM SHARED ManX, ManY, LDF, l$, Active, Mp
DIM SHARED Tor(10) AS TorpedoType
DIM SHARED Bl AS DOUBLE
'READS
DIM SHARED Torpm(16)
FOR I = 1 TO 16
READ Torpm(I)
NEXT
DIM SHARED Torp(16)
FOR I = 1 TO 16
READ Torp(I)
NEXT
DIM SHARED Pl(30)
FOR I = 1 TO 30
READ Pl(I)
NEXT
DIM SHARED P5(30)
FOR I = 1 TO 30
READ P5(I)
NEXT
DIM SHARED P1(30)
FOR I = 1 TO 30
READ P1(I)
NEXT
DIM SHARED Mrm(22)
FOR I = 1 TO 22
READ Mrm(I)
NEXT
DIM SHARED Mr(22)
FOR I = 1 TO 22
READ Mr(I)
NEXT
DIM SHARED Mlm(22)
FOR I = 1 TO 22
READ Mlm(I)
NEXT
DIM SHARED Ml(22)
FOR I = 1 TO 22
READ Ml(I)
NEXT
DIM SHARED Coin3m(16)
FOR I = 1 TO 16
READ Coin3m(I)
NEXT
DIM SHARED Coin3(16)
FOR I = 1 TO 16
READ Coin3(I)
NEXT
DIM SHARED Coin2m(16)
FOR I = 1 TO 16
READ Coin2m(I)
NEXT
DIM SHARED Coin2(16)
FOR I = 1 TO 16
READ Coin2(I)
NEXT
DIM SHARED Coin1m(16)
FOR I = 1 TO 16
READ Coin1m(I)
NEXT
DIM SHARED Coin1(16)
FOR I = 1 TO 16
READ Coin1(I)
NEXT
DIM SHARED Bal5m(28)
FOR I = 1 TO 28
READ Bal5m(I)
NEXT
DIM SHARED Bal5(28)
FOR I = 1 TO 28
READ Bal5(I)
NEXT
DIM SHARED Bal4m(28)
FOR I = 1 TO 28
READ Bal4m(I)
NEXT
DIM SHARED Bal4(28)
FOR I = 1 TO 28
READ Bal4(I)
NEXT
DIM SHARED Bal3m(28)
FOR I = 1 TO 28
READ Bal3m(I)
NEXT
DIM SHARED Bal3(28)
FOR I = 1 TO 28
READ Bal3(I)
NEXT
DIM SHARED Bal2m(28)
FOR I = 1 TO 28
READ Bal2m(I)
NEXT
DIM SHARED Bal2(28)
FOR I = 1 TO 28
READ Bal2(I)
NEXT
DIM SHARED Bal1m(28)
FOR I = 1 TO 28
READ Bal1m(I)
NEXT
DIM SHARED Bal1(28)
FOR I = 1 TO 28
READ Bal1(I)
NEXT
DIM SHARED Up(38)
FOR I = 1 TO 38
READ Up(I)
NEXT
DIM SHARED Right(38)
FOR I = 1 TO 38
READ Right(I)
NEXT
DIM SHARED Q(38)
FOR I = 1 TO 38
READ Q(I)
NEXT
DIM SHARED Left(38)
FOR I = 1 TO 38
READ Left(I)
NEXT
DIM SHARED F1(38)
FOR I = 1 TO 38
READ F1(I)
NEXT
DIM SHARED Down(38)
FOR I = 1 TO 38
READ Down(I)
NEXT
DIM SHARED Alt(38)
FOR I = 1 TO 38
READ Alt(I)
NEXT
DIM SHARED Title(548)
FOR I = 1 TO 548
READ Title(I)
NEXT
DIM SHARED Icon(38)
FOR I = 1 TO 38
READ Icon(I)
NEXT
DIM SHARED Iconm(38)
FOR I = 1 TO 38
READ Iconm(I)
NEXT
DIM SHARED Manny(380)
FOR I = 1 TO 380
READ Manny(I)
NEXT
DIM SHARED Score(82)
FOR I = 1 TO 82
READ Score(I)
NEXT
DIM SHARED me(2002)
FOR I = 1 TO 2002
READ me(I)
NEXT
DIM SHARED Gop(146)
FOR I = 1 TO 146
READ Gop(I)
NEXT
DIM SHARED Message(44) AS STRING * 39
FOR I = 1 TO 44
READ Message(I)
NEXT
DIM SHARED G(5) AS STRING
FOR I = 1 TO 5
READ G(I)
NEXT
DIM SHARED Bomb1(18)
FOR I = 1 TO 18
READ Bomb1(I)
NEXT
DIM SHARED Bomb1m(18)
FOR I = 1 TO 18
READ Bomb1m(I)
NEXT
DIM SHARED Bomb2(18)
FOR I = 1 TO 18
READ Bomb2(I)
NEXT
DIM SHARED Bomb2m(18)
FOR I = 1 TO 18
READ Bomb2m(I)
NEXT
DIM SHARED Bomb3(18)
FOR I = 1 TO 18
READ Bomb3(I)
NEXT
DIM SHARED Bomb3m(18)
FOR I = 1 TO 18
READ Bomb3m(I)
NEXT
DIM SHARED Bomb4(18)
FOR I = 1 TO 18
READ Bomb4(I)
NEXT
DIM SHARED Bomb4m(18)
FOR I = 1 TO 18
READ Bomb4m(I)
NEXT
DIM SHARED Lc(164)
FOR I = 1 TO 164
READ Lc(I)
NEXT
'PREDS
Initit
FOR I = 1 TO 60
Star(I).X = Fnr(305) + 10
Star(I).Y = Fnr(180) + 10
Star(I).T = Fnr(3)
SELECT CASE Star(I).T
CASE 1
Star(I).C = 8
CASE 2
Star(I).C = 7
CASE 3
Star(I).C = 15
END SELECT
NEXT
'MAIN CODE
Mp = 1
CreateTable     'Sin/Cos table... for all the explosions
CLS
DrawArena
SCREEN 7, 0, 1, 0  'This makes no sense at all...
MakeIntroScreen
PCOPY 1, 0
MakeInfo
MakeHelpScreen
MakeQuits
SCREEN 7, 0, 1, 0
DoIntro
MakeTitleScreen
DoMenu
'Here are all the graphics for the game
'Get statement???
DATA &H0005,&H0007,&H8888,&H8888,&H0000,&H0000,&H0000,&H0000
DATA &H0000,&H0000,&H8888,&H8888,&HD8D8,&HD8D8,&HD8D8,&HD8D8
DATA &H0005,&H0007,&H7171,&H2171,&H88F8,&H8800,&H00F8,&H8800
DATA &H00F8,&H0000,&H7151,&H0151,&H2101,&H2101,&H2121,&H2121
DATA &H000D,&H0007,&HF8FF,&HF8FF,&H0000,&HF8FF,&H889A,&HF8FF
DATA &H7065,&HF8FF,&HA8DA,&HF8FF,&H5025,&HF8FF,&H88DA,&HF8FF
DATA &H7025,&HF8FF,&HB8DA,&HF8FF,&H4025,&HF8FF,&HB888,&HF8FF
DATA &H4077,&HF8FF,&HF8FF,&HF8FF,&H0000,&HF8FF
DATA &H000D,&H0007,&H0300,&HFBFF,&H0000,&HFBFF,&H0200,&HFBFF
DATA &H7177,&HFBFF,&H0300,&HFBFF,&H5045,&HFBFF,&H0300,&HFBFF
DATA &H5075,&HFBFF,&H0300,&HFBFF,&H5015,&HFBFF,&H0200,&HFBFF
DATA &H7177,&HFBFF,&H0300,&HFBFF,&H0000,&HFBFF
DATA &H000D,&H0007,&HF8FF,&H0000,&H0000,&HF8FF,&H8898,&H7067
DATA &H7067,&HF8FF,&HA8DA,&H5025,&H5025,&HF8FF,&HA8DA,&H5025
DATA &H5025,&HF8FF,&HA8DA,&H5025,&H5025,&HF8FF,&H8888,&H7077
DATA &H7077,&HF8FF,&HF8FF,&H0000,&H0000,&HF8FF
DATA &H0009,&H0005,&H801F,&H801F,&H801F,&H801F,&H8086,&H8086
DATA &H8086,&H8086,&H0000,&H0000,&H0000,&H0000,&H8386,&H8386
DATA &H8386,&H8386,&H821F,&H821F,&H821F,&H821F
DATA &H0009,&H0005,&H00E0,&H0080,&H0000,&H00C0,&H0001,&H0000
DATA &H0058,&H0029,&H8061,&H81E1,&H81EF,&H00D2,&H0001,&H0100
DATA &H0158,&H0229,&H00E0,&H0180,&H0100,&H02C0
DATA &H0009,&H0005,&H03FC,&H03FC,&H03FC,&H03FC,&H90B0,&H90B0
DATA &H90B0,&H90B0,&H0000,&H0000,&H0000,&H0000,&H90B0,&H90B0
DATA &H90B0,&H90B0,&H03FC,&H03FC,&H03FC,&H03FC
DATA &H0009,&H0005,&H9C03,&H9000,&H0000,&H9801,&H0040,&H0000
DATA &H0B0D,&H054A,&H0CC3,&H9CC3,&H9DFB,&H9A25,&H0040,&H0000
DATA &H0B0D,&H054A,&H9C03,&H9000,&H0000,&H9801
DATA &H0007,&H0007,&HFEFE,&HFEFE,&HFEFE,&HFEFE,&H8282,&H8282
DATA &H0000,&H0000,&H8282,&H8282,&HFEFE,&HFEFE,&HFEFE,&HFEFE
DATA &H0007,&H0007,&H0000,&H0000,&H0000,&H0000,&H7C7C,&H007C
DATA &H7E02,&H807E,&H0000,&H7C00,&H0000,&H0000,&H0000,&H0000
DATA &H0007,&H0007,&HFEFE,&HFEFE,&HC6C6,&HC6C6,&H8282,&H8282
DATA &H0000,&H0000,&H8282,&H8282,&HC6C6,&HC6C6,&HFEFE,&HFEFE
DATA &H0007,&H0007,&H0000,&H0000,&H3838,&H0038,&H7C04,&H007C
DATA &H7E02,&H807E,&H3C00,&H403C,&H0000,&H3800,&H0000,&H0000
DATA &H0007,&H0007,&HC6C6,&HC6C6,&H8282,&H8282,&H0000,&H0000
DATA &H0000,&H0000,&H0000,&H0000,&H8282,&H8282,&HC6C6,&HC6C6
DATA &H0007,&H0007,&H3838,&H0038,&H7C04,&H007C,&H7E02,&H807E
DATA &H7E02,&H807E,&H7E02,&H807E,&H3C00,&H403C,&H0000,&H3800
DATA &H0007,&H000D,&HC6C6,&HC6C6,&H8282,&H8282,&H0000,&H0000
DATA &H0000,&H0000,&H0000,&H0000,&H8282,&H8282,&HC6C6,&HC6C6
DATA &HEEEE,&HEEEE,&HEEEE,&HEEEE,&HEEEE,&HEEEE,&HF6F6,&HF6F6
DATA &HF6F6,&HF6F6,&HFAFA,&HFAFA
DATA &H0007,&H000D,&H0000,&H0038,&H0000,&H187C,&H0000,&H04FE
DATA &H0000,&H00FE,&H0000,&H00FE,&H0000,&H007C,&H0000,&H0038
DATA &H1010,&H0010,&H1010,&H0010,&H1010,&H0010,&H0808,&H0008
DATA &H0808,&H0008,&H0404,&H0004
DATA &H0007,&H000D,&HC6C6,&HC6C6,&H8282,&H8282,&H0000,&H0000
DATA &H0000,&H0000,&H0000,&H0000,&H8282,&H8282,&HC6C6,&HC6C6
DATA &HEEEE,&HEEEE,&HEEEE,&HEEEE,&HEEEE,&HEEEE,&HF6F6,&HF6F6
DATA &HF6F6,&HF6F6,&HF6F6,&HF6F6
DATA &H0007,&H000D,&H0000,&H0038,&H0000,&H087C,&H0000,&H04FE
DATA &H0000,&H00FE,&H0000,&H00FE,&H0000,&H007C,&H0000,&H0038
DATA &H1010,&H0010,&H1010,&H0010,&H1010,&H0010,&H0808,&H0008
DATA &H0808,&H0008,&H0808,&H0008
DATA &H0007,&H000D,&HC6C6,&HC6C6,&H8282,&H8282,&H0000,&H0000
DATA &H0000,&H0000,&H0000,&H0000,&H8282,&H8282,&HC6C6,&HC6C6
DATA &HEEEE,&HEEEE,&HEEEE,&HEEEE,&HEEEE,&HEEEE,&HEEEE,&HEEEE
DATA &HEEEE,&HEEEE,&HEEEE,&HEEEE
DATA &H0007,&H000D,&H0000,&H0038,&H0000,&H087C,&H0000,&H04FE
DATA &H0000,&H04FE,&H0000,&H00FE,&H0000,&H007C,&H0000,&H0038
DATA &H1010,&H0010,&H1010,&H0010,&H1010,&H0010,&H1010,&H0010
DATA &H1010,&H0010,&H1010,&H0010
DATA &H0007,&H000D,&HC6C6,&HC6C6,&H8282,&H8282,&H0000,&H0000
DATA &H0000,&H0000,&H0000,&H0000,&H8282,&H8282,&HC6C6,&HC6C6
DATA &HEEEE,&HEEEE,&HEEEE,&HEEEE,&HEEEE,&HEEEE,&HDEDE,&HDEDE
DATA &HDEDE,&HDEDE,&HDEDE,&HDEDE
DATA &H0007,&H000D,&H0000,&H0038,&H0000,&H087C,&H0000,&H04FE
DATA &H0000,&H00FE,&H0000,&H00FE,&H0000,&H007C,&H0000,&H0038
DATA &H1010,&H0010,&H1010,&H0010,&H1010,&H0010,&H2020,&H0020
DATA &H2020,&H0020,&H2020,&H0020
DATA &H0007,&H000D,&HC6C6,&HC6C6,&H8282,&H8282,&H0000,&H0000
DATA &H0000,&H0000,&H0000,&H0000,&H8282,&H8282,&HC6C6,&HC6C6
DATA &HEEEE,&HEEEE,&HEEEE,&HEEEE,&HEEEE,&HEEEE,&HDEDE,&HDEDE
DATA &HDEDE,&HDEDE,&HBEBE,&HBEBE
DATA &H0007,&H000D,&H0000,&H0038,&H0000,&H187C,&H0000,&H04FE
DATA &H0000,&H00FE,&H0000,&H00FE,&H0000,&H007C,&H0000,&H0038
DATA &H1010,&H0010,&H1010,&H0010,&H1010,&H0010,&H2020,&H0020
DATA &H2020,&H0020,&H4040,&H0040
DATA &H0009,&H0009,&H80FF,&H80FF,&H80FF,&H00FF,&H00FF,&H00FF
DATA &H00FF,&H8080,&H00F7,&H00F7,&H00F7,&H8080,&H00E3,&H00E3
DATA &H00E3,&H8080,&H00C1,&H00C1,&H00C1,&H8080,&H00F7,&H00F7
DATA &H00F7,&H8080,&H00F7,&H00F7,&H00F7,&H8080,&H00FF,&H00FF
DATA &H00FF,&H8080,&H0080,&H0080,&H0080,&H807F
DATA &H0009,&H0009,&H80FF,&H80FF,&H80FF,&H00FF,&H00FF,&H00FF
DATA &H00FF,&H8080,&H00F7,&H00F7,&H00F7,&H8080,&H00F3,&H00F3
DATA &H00F3,&H8080,&H00C1,&H00C1,&H00C1,&H8080,&H00F3,&H00F3
DATA &H00F3,&H8080,&H00F7,&H00F7,&H00F7,&H8080,&H00FF,&H00FF
DATA &H00FF,&H8080,&H0080,&H0080,&H0080,&H807F
DATA &H0009,&H0009,&H80FF,&H80FF,&H80FF,&H00FF,&H00FF,&H00FF
DATA &H00FF,&H8080,&H00E3,&H00E3,&H00E3,&H8080,&H00DD,&H00DD
DATA &H00DD,&H8080,&H00DD,&H00DD,&H00DD,&H8080,&H00D9,&H00D9
DATA &H00D9,&H8080,&H00E1,&H00E1,&H00E1,&H8080,&H00FF,&H00FF
DATA &H00FF,&H8080,&H0080,&H0080,&H0080,&H807F
DATA &H0009,&H0009,&H80FF,&H80FF,&H80FF,&H00FF,&H00FF,&H00FF
DATA &H00FF,&H8080,&H00F7,&H00F7,&H00F7,&H8080,&H00E7,&H00E7
DATA &H00E7,&H8080,&H00C1,&H00C1,&H00C1,&H8080,&H00E7,&H00E7
DATA &H00E7,&H8080,&H00F7,&H00F7,&H00F7,&H8080,&H00FF,&H00FF
DATA &H00FF,&H8080,&H0080,&H0080,&H0080,&H807F
DATA &H0009,&H0009,&H80FF,&H80FF,&H80FF,&H00FF,&H00FF,&H00FF
DATA &H00FF,&H8080,&H00C5,&H00C5,&H00C5,&H8080,&H00DD,&H00DD
DATA &H00DD,&H8080,&H00CD,&H00CD,&H00CD,&H8080,&H00DD,&H00DD
DATA &H00DD,&H8080,&H00DD,&H00DD,&H00DD,&H8080,&H00FF,&H00FF
DATA &H00FF,&H8080,&H0080,&H0080,&H0080,&H807F
DATA &H0009,&H0009,&H80FF,&H80FF,&H80FF,&H00FF,&H00FF,&H00FF
DATA &H00FF,&H8080,&H00F7,&H00F7,&H00F7,&H8080,&H00F7,&H00F7
DATA &H00F7,&H8080,&H00C1,&H00C1,&H00C1,&H8080,&H00E3,&H00E3
DATA &H00E3,&H8080,&H00F7,&H00F7,&H00F7,&H8080,&H00FF,&H00FF
DATA &H00FF,&H8080,&H0080,&H0080,&H0080,&H807F
DATA &H000D,&H0009,&HF8FF,&HF8FF,&HF8FF,&HF0FF,&HF0FF,&HF0FF
DATA &HF0FF,&H0880,&HB0ED,&HB0ED,&HB0ED,&H0880,&H10D5,&H10D5
DATA &H10D5,&H0880,&HB0C5,&HB0C5,&HB0C5,&H0880,&HB0D5,&HB0D5
DATA &HB0D5,&H0880,&H90D5,&H90D5,&H90D5,&H0880,&HF0FF,&HF0FF
DATA &HF0FF,&H0880,&H0080,&H0080,&H0080,&HF87F
DATA  &H0063,&H0015,&H0000,&H0000,&H0000,&H0000,&H0000,&H0000,&H0000,&H0000
DATA  &H0000,&H0000,&H0000,&H0000,&H0000,&H0000,&H0000,&H0000,&H0000,&H0000
DATA  &H0000,&H0000,&H0000,&H0000,&H0000,&H0000,&H0000,&H0000,&HFF7F,&H0000
DATA  &H0077,&H0000,&H0000,&H0107,&H00C0,&H0000,&H0000,&H0000,&H0000,&H0000
DATA  &H0000,&H0000,&H0000,&H0000,&H0000,&H0000,&H0000,&H7F00,&H00FF,&H7700
DATA  &H0000,&H0000,&H0700,&HC001,&HFF7F,&H0080,&H0077,&H0000,&H0000,&H0107
DATA  &H00C0,&H0000,&H0000,&H0000,&H0000,&H0000,&H0000,&H0000,&H0000,&H0000
DATA  &H0000,&H0000,&H0000,&H7F00,&H80FF,&H7700,&H0000,&H0000,&H0700,&HC001
DATA  &HFF7F,&H00C0,&H0077,&H0000,&H0000,&H0107,&H00C0,&H0000,&H0000,&H0000
DATA  &H0000,&H0000,&H0000,&H0000,&H0000,&H0000,&H0000,&H0000,&H0000,&H7F00
DATA  &HC0FF,&H7700,&H0000,&H0000,&H0700,&HC001,&H0070,&H00E0,&H0077,&H0000
DATA  &H0000,&H0107,&H00C0,&H0000,&H0000,&H0000,&H0000,&H0000,&H0000,&H0000
DATA  &H0000,&H0000,&H0000,&H0000,&H0000,&H7000,&HE000,&H7700,&H0000,&H0000
DATA  &H0700,&HC001,&H0070,&H00E0,&H0077,&H0000,&H0000,&H0107,&H00C0,&H0000
DATA  &H0000,&H0000,&H0000,&H0000,&H0000,&H0000,&H0000,&H0000,&H0000,&H0000
DATA  &H0000,&H7000,&HE000,&H7700,&H0000,&H0000,&H0700,&HC001,&H0070,&HFFE1
DATA  &H1F77,&HFCC1,&HE07F,&H8307,&H00C0,&H0000,&H0000,&H0000,&H0000,&H0000
DATA  &H0000,&H0000,&H0000,&H0000,&H0000,&H0000,&H0000,&H7000,&HE100,&H77FF
DATA  &HC11F,&H7FFC,&H07E0,&HC083,&H0070,&HFFE3,&H3F77,&HFEE3,&HF07F,&HC703
DATA  &H0080,&H0000,&H0000,&H0000,&H0000,&H0000,&H0000,&H0000,&H0000,&H0000
DATA  &H0000,&H0000,&H0000,&H7000,&HE300,&H77FF,&HE33F,&H7FFE,&H03F0,&H80C7
DATA  &HFF71,&HFF87,&H7F77,&HFFF7,&HF87F,&HEF01,&H0000,&H0000,&H0000,&H0000
DATA  &H0000,&H0000,&H0000,&H0000,&H0000,&H0000,&H0000,&H0000,&H0000,&H7100
DATA  &H87FF,&H77FF,&HF77F,&H7FFF,&H01F8,&H00EF,&HFF71,&H078E,&H7077,&H0777
DATA  &H3870,&HFE00,&H0000,&H0000,&H0000,&H0000,&H0000,&H0000,&H0000,&H0000
DATA  &H0000,&H0000,&H0000,&H0000,&H0000,&H7100,&H8EFF,&H7707,&H7770,&H7007
DATA  &H0038,&H00FE,&H0070,&H07EE,&H7077,&H0777,&H3870,&H7C00,&H0000,&H0000
DATA  &H0000,&H0000,&H0000,&H0000,&H0000,&H0000,&H0000,&H0000,&H0000,&H0000
DATA  &H0000,&H7000,&HEE00,&H7707,&H7770,&H7007,&H0038,&H007C,&H0070,&H07EE
DATA  &H7077,&H0777,&H3870,&HFE00,&H0000,&H0000,&H0000,&H0000,&H0000,&H0000
DATA  &H0000,&H0000,&H0000,&H0000,&H0000,&H0000,&H0000,&H7000,&HEE00,&H7707
DATA  &H7770,&H7007,&H0038,&H00FE,&H0070,&H07EE,&H7077,&H0777,&H3870,&HEF01
DATA  &H0000,&H0000,&H0000,&H0000,&H0000,&H0000,&H0000,&H0000,&H0000,&H0000
DATA  &H0000,&H0000,&H0000,&H7000,&HEE00,&H7707,&H7770,&H7007,&H0138,&H00EF
DATA  &H0070,&H07EE,&H7077,&H0777,&H3870,&HC703,&H0080,&H0000,&H0000,&H0000
DATA  &H0000,&H0000,&H0000,&H0000,&H0000,&H0000,&H0000,&H0000,&H0000,&H7000
DATA  &HEE00,&H7707,&H7770,&H7007,&H0338,&H80C7,&H0070,&H07EE,&H7077,&H0777
DATA  &H3870,&H8307,&H00C0,&H0000,&H0000,&H0000,&H0000,&H0000,&H0000,&H0000
DATA  &H0000,&H0000,&H0000,&H0000,&H0000,&H7000,&HEE00,&H7707,&H7770,&H7007
DATA  &H0738,&HC083,&H0070,&H07EE,&H7077,&H0777,&H3870,&H0107,&H00C0,&H0000
DATA  &H0000,&H0000,&H0000,&H0000,&H0000,&H0000,&H0000,&H0000,&H0000,&H0000
DATA  &H0000,&H7000,&HEE00,&H7707,&H7770,&H7007,&H0738,&HC001,&H0070,&H07EE
DATA  &H7077,&H0777,&H3870,&H0107,&H00C0,&H0000,&H0000,&H0000,&H0000,&H0000
DATA  &H0000,&H0000,&H0000,&H0000,&H0000,&H0000,&H0000,&H7000,&HEE00,&H7707
DATA  &H7770,&H7007,&H0738,&HC001,&HFF71,&HE7CF,&H7077,&H0777,&H3870,&H0107
DATA  &H00C0,&H0000,&H0000,&H0000,&H0000,&H0000,&H0000,&H0000,&H0000,&H0000
DATA  &H0000,&H0000,&H0000,&H7100,&HCFFF,&H77E7,&H7770,&H7007,&H0738,&HC001
DATA  &HFF71,&HE787,&H7F77,&HFFF7,&H3870,&H0107,&H00C0,&H0000,&H0000,&H0000
DATA  &H0000,&H0000,&H0000,&H0000,&H0000,&H0000,&H0000,&H0000,&H0000,&H7100
DATA  &H87FF,&H77E7,&HF77F,&H70FF,&H0738,&HC001,&HFF71,&HE703,&H3F77,&HFEE3
DATA  &H3870,&H0107,&H00C0,&H0000,&H0000,&H0000,&H0000,&H0000,&H0000,&H0000
DATA  &H0000,&H0000,&H0000,&H0000,&H0000,&H7100,&H03FF,&H77E7,&HE33F,&H70FE
DATA  &H0738,&HC001,&H0000,&H0000,&H1F00,&HFCC1,&H0000,&H0000,&H0000,&H0000
DATA  &H0000,&H0000,&H0000,&H0000,&H0000,&H0000,&H0000,&H0000,&H0000,&H0000
DATA  &H0000,&H0000,&H0000,&H0000,&HC11F,&H00FC,&H0000,&H0000
DATA &H0009,&H0009,&H001C,&H0000,&H0000,&H0000,&H007F,&H0000
DATA &H0000,&H0000,&H007F,&H0000,&H0000,&H001C,&H80FF,&H0008
DATA &H0000,&H003E,&H80FF,&H001C,&H0008,&H003E,&H80FF,&H0008
DATA &H0000,&H003E,&H007F,&H0000,&H0000,&H001C,&H007F,&H0000
DATA &H0000,&H0000,&H001C,&H0000,&H0000,&H0000
DATA &H0009,&H0009,&H80E3,&H80E3,&H80E3,&H80E3,&H8080,&H8080
DATA &H8080,&H8080,&H8080,&H8080,&H8080,&H8080,&H0000,&H0000
DATA &H0000,&H0000,&H0000,&H0000,&H0000,&H0000,&H0000,&H0000
DATA &H0000,&H0000,&H8080,&H8080,&H8080,&H8080,&H8080,&H8080
DATA &H8080,&H8080,&H80E3,&H80E3,&H80E3,&H80E3
DATA &H0036,&H001B,&HFFFF,&HFFFF,&HFFFF,&HFFFC,&HFFFF,&HFFFF
DATA &HF8FF,&H0000,&H0000,&H0000,&HFF00,&HFFFF,&HFFFF,&HFCFF
DATA &HFFFF,&HFFFF,&HFFFF,&H80FC,&H0000,&H0000,&H0000,&H0000
DATA &H0000,&H0000,&HFF00,&HFFFF,&HFFFF,&HF8FF,&HFFFF,&HFFFF
DATA &HFFFF,&H80FC,&H0000,&H0000,&H0000,&H0000,&H0000,&H0000
DATA &HFF00,&HFFFF,&HFFFF,&HF8FF,&HFFFF,&HFFFF,&HFFFF,&H80FC
DATA &H0000,&H0000,&H0000,&H0000,&H0000,&H0000,&HFF00,&HFFFF
DATA &HFFFF,&HF8FF,&HFFFF,&HCCE1,&HCCCC,&H87FC,&H000E,&H0000
DATA &H0000,&H0E07,&H331E,&H3333,&HF800,&HFFF1,&HFFFF,&HF8FF
DATA &H70FC,&HCCC0,&HCCCC,&H84FC,&H0000,&H0000,&H0000,&H8F07
DATA &H333F,&H3333,&HFB00,&HFF7E,&HFFFF,&HF8FF,&H30FC,&HC4CC
DATA &HCCC4,&H84FC,&H0010,&H0000,&H0000,&HDF07,&H3B33,&H333B
DATA &HFB00,&HFFAE,&HFFFF,&HF8FF,&H30FC,&HC4CC,&HE1C4,&H84FC
DATA &H0010,&H0000,&H0000,&HDF07,&H3B33,&H1E3B,&HFB00,&HFFAE
DATA &HFFFF,&HF8FF,&H30FC,&HC8C0,&HE1C8,&H84FC,&H0010,&H0000
DATA &H0000,&HDF07,&H373F,&H1E37,&HFB00,&HFFAE,&HFFFF,&HF8FF
DATA &H00FC,&HC8CC,&HF3C8,&H84FC,&H0000,&H0000,&H0000,&HFF07
DATA &H3733,&H0C37,&HFB00,&HFFFE,&HFFFF,&HF8FF,&H00FC,&HC8CC
DATA &HF3C8,&H84FC,&H0000,&H0000,&H0000,&HFF07,&H3733,&H0C37
DATA &HFB00,&HFFFE,&HFFFF,&HF8FF,&H00FC,&HCCCC,&HF3CC,&H84FC
DATA &H0000,&H0000,&H0000,&HFF07,&H3333,&H0C33,&HFB00,&HFFFE
DATA &HFFFF,&HF8FF,&HCCFC,&HCCCC,&HF3CC,&H84FC,&H0044,&H0000
DATA &H0000,&H7707,&H3333,&H0C33,&HFA00,&HFFAA,&HFFFF,&HF8FF
DATA &HCCFC,&HFFFF,&HFFFF,&H84FC,&H0044,&H0000,&H0000,&H7707
DATA &H0000,&H0000,&HFA00,&HFFAA,&HFFFF,&HF8FF,&HCCFC,&HC3E1
DATA &HFFC0,&H84FC,&H0044,&H0000,&H0000,&H7707,&H3C1E,&H003F
DATA &HFA00,&HFFAA,&HFFFF,&HF8FF,&HDCFC,&HC1C0,&HFFC0,&H84FC
DATA &H0004,&H0000,&H0000,&H2707,&H3E3F,&H003F,&HFA00,&HFFDA
DATA &HFFFF,&HF8FF,&HFCFC,&HCCCC,&HFFCF,&H84FC,&H0004,&H0000
DATA &H0000,&H0707,&H3333,&H0030,&HFA00,&HFFFA,&HFFFF,&HF8FF
DATA &HFCFC,&HCCCC,&HFFCF,&H84FC,&H0004,&H0000,&H0000,&H0707
DATA &H3333,&H0030,&HFA00,&HFFFA,&HFFFF,&HF8FF,&HFCFC,&HCCC0
DATA &HFFC3,&H84FC,&H0004,&H0000,&H0000,&H0707,&H333F,&H003C
DATA &HFA00,&HFFFA,&HFFFF,&HF8FF,&HFCFC,&HCCCC,&HFFCF,&H84FC
DATA &H0004,&H0000,&H0000,&H0707,&H3333,&H0030,&HFA00,&HFFFA
DATA &HFFFF,&HF8FF,&HFCFC,&HCCCC,&HFFCF,&H84FC,&H0004,&H0000
DATA &H0000,&H0707,&H3333,&H0030,&HFA00,&HFFFA,&HFFFF,&HF8FF
DATA &HFCFC,&HC1CC,&HFFC0,&H84FC,&H0004,&H0000,&H0000,&H0707
DATA &H3E33,&H003F,&HFA00,&HFFFA,&HFFFF,&HF8FF,&HF8F8,&HC3CC
DATA &HFFC0,&H80FC,&H0000,&H0000,&H0000,&H0707,&H3C33,&H003F
DATA &HF800,&HFFF8,&HFFFF,&HF8FF,&HFFFF,&HFFFF,&HFFFF,&H80FC
DATA &H0000,&H0000,&H0000,&H0000,&H0000,&H0000,&HFF00,&HFFFF
DATA &HFFFF,&HF8FF,&HFFFF,&HFFFF,&HFFFF,&H80FC,&H0000,&H0000
DATA &H0000,&H0000,&H0000,&H0000,&HFF00,&HFFFF,&HFFFF,&HF8FF
DATA &HFFFF,&HFFFF,&HFFFF,&H80FC,&H0000,&H0000,&H0000,&H0000
DATA &H0000,&H0000,&HFF00,&HFFFF,&HFFFF,&HF8FF,&HFFFF,&HFFFF
DATA &HFFFF,&H00FC,&H0000,&H0000,&H0000,&H0000,&H0000,&H0000
DATA &H8000,&H0000,&H0000,&H0000
DATA &H0022,&H0008,&HE779,&H783C,&H0000,&H0000,&H0000,&H0000
DATA &H0000,&H7900,&H3CE7,&H0078,&HEFFB,&HF8BE,&H0000,&H0000
DATA &H0000,&H0000,&H0000,&HFB00,&HBEEF,&H00F8,&H0DC3,&HC0B6
DATA &H0000,&H0000,&H0000,&H0000,&H0000,&HC300,&HB60D,&H00C0
DATA &H0DE3,&HE1BC,&H00C0,&H0000,&H0000,&H0000,&H0000,&HE300
DATA &HBC0D,&HC0E1,&H0D7B,&HE1B6,&H00C0,&H0000,&H0000,&H0000
DATA &H0000,&H7B00,&HB60D,&HC0E1,&H0D1B,&HC0B6,&H0000,&H0000
DATA &H0000,&H0000,&H0000,&H1B00,&HB60D,&H00C0,&HEFFB,&HF8B6
DATA &H0000,&H0000,&H0000,&H0000,&H0000,&HFB00,&HB6EF,&H00F8
DATA &HE7F1,&H7836,&H0000,&H0000,&H0000,&H0000,&H0000,&HF100
DATA &H36E7,&H0078
DATA &H0050,&H0064,&HDD5D,&H05C0,&H00C0,&H0000,&H0000,&HDD5D
DATA &H05C0,&H00C0,&H0000,&H0000,&HDD5D,&H05C0,&H00C0,&H0000
DATA &H0000,&H22A2,&H5A3D,&H5530,&H45D5,&H15C0,&HFFAF,&H0E80
DATA &H0080,&H0000,&H0000,&HFFAF,&H0E80,&H0080,&H0000,&H0000
DATA &HFFAF,&H0E80,&H0080,&H0000,&H0000,&H0050,&HF17E,&HAA68
DATA &HABBB,&H2AA0,&HFF57,&H0000,&H0000,&H0000,&H0000,&HFF57
DATA &H0000,&H0000,&H0000,&H0000,&HFF57,&H0000,&H0000,&H0000
DATA &H0000,&H00A8,&H5FFD,&H00C0,&H5515,&H1140,&HFEBF,&H08A8
DATA &H0000,&H0000,&H0000,&HFEBF,&H08A8,&H0000,&H0000,&H0000
DATA &HFEBF,&H08A8,&H0000,&H0000,&H0000,&HA940,&HF757,&H0088
DATA &HAF0A,&H2AE0,&HFF5D,&H0040,&H0000,&H0000,&H0000,&HFF5D
DATA &H0040,&H0000,&H0000,&H0000,&HFF5D,&H0040,&H0000,&H0000
DATA &H0000,&H50A2,&H7DBD,&H0000,&H5D00,&H5440,&HFFAF,&H00A0
DATA &H0000,&H0000,&H0000,&HFFAF,&H00A0,&H0000,&H0000,&H0000
DATA &HFFAF,&H00A0,&H0000,&H0000,&H0000,&H2A52,&H285E,&H0000
DATA &H2F00,&H2AA0,&HFF57,&H0040,&H0000,&H0000,&H0000,&HFF57
DATA &H0040,&H0000,&H0000,&H0000,&HFF57,&H0040,&H0000,&H0000
DATA &H0000,&H00A8,&H00B4,&H0000,&H0500,&H1140,&HFFEF,&H00E0
DATA &H0000,&H0000,&H0000,&HFFEF,&H00E0,&H0000,&H0000,&H0000
DATA &HFFEF,&H00E0,&H0000,&H0000,&H0000,&HA812,&H0018,&H0000
DATA &H0000,&HAAE2,&HFF5F,&H0040,&H0000,&H0000,&H0000,&HFF5F
DATA &H0040,&H0000,&H0000,&H0000,&HFF5F,&H0040,&H0000,&H0000
DATA &H0000,&H00A0,&H00B0,&H0000,&H0000,&H4440,&HFFBF,&H0080
DATA &H0000,&H0000,&H0000,&HFFBF,&H0080,&H0000,&H0000,&H0000
DATA &HFFBF,&H0080,&H0000,&H0000,&H0000,&H2040,&H0060,&H0000
DATA &H0000,&HAA22,&HFDF7,&H0000,&H0000,&H0000,&H0000,&HFDF7
DATA &H0000,&H0000,&H0000,&H0000,&HFDF7,&H0000,&H0000,&H0000
DATA &H0000,&H0208,&H00C0,&H0000,&H0000,&H5001,&HFEFF,&H0080
DATA &H0000,&H0000,&H0000,&HFEFF,&H0080,&H0000,&H0000,&H0000
DATA &HFEFF,&H0080,&H0000,&H0000,&H0000,&H0900,&H0000,&H0000
DATA &H0000,&HAA02,&HFCFD,&H0000,&H0000,&H0000,&H0000,&HFCFD
DATA &H0000,&H0000,&H0000,&H0000,&HFCFD,&H0000,&H0000,&H0000
DATA &H0000,&H0302,&H0000,&H0000,&H0000,&H5401,&HF8FF,&H0000
DATA &H0000,&H0000,&H0000,&HF8FF,&H0000,&H0000,&H0000,&H0000
DATA &HF8FF,&H0000,&H0000,&H0000,&H0000,&H0600,&H0000,&H0000
DATA &H0000,&HAA02,&H40F5,&H0000,&H0000,&H0000,&H0000,&H40F5
DATA &H0000,&H0000,&H0000,&H0000,&H40F5,&H0000,&H0000,&H0000
DATA &H0000,&HBC0A,&H0000,&H0000,&H0000,&H1501,&H00E8,&H0000
DATA &H0000,&H0000,&H0000,&H00E8,&H0000,&H0000,&H0000,&H0000
DATA &H00E8,&H0000,&H0000,&H0000,&H0000,&HF817,&H0000,&H0000
DATA &H0000,&HAA00,&H4040,&H0000,&H0000,&H0000,&H0000,&H4040
DATA &H0000,&H0000,&H0000,&H0000,&H4040,&H0000,&H0000,&H0000
DATA &H0000,&HB0B5,&H0000,&H0000,&H0000,&H5400,&HA0A2,&H0000
DATA &H0000,&H0000,&H0000,&HA0A2,&H0000,&H0000,&H0000,&H0000
DATA &HA0A2,&H0000,&H0000,&H0000,&H0000,&H405D,&H0000,&H0000
DATA &H0000,&HAA00,&H0000,&H0000,&H0000,&H0000,&H0000,&H0000
DATA &H0000,&H0000,&H0000,&H0000,&H0000,&H0000,&H0000,&H0000
DATA &H0000,&HC0FF,&H0000,&H0000,&H0000,&H1000,&H00BE,&H0000
DATA &H0000,&H0000,&H0000,&H00BE,&H0000,&H0000,&H0000,&H0000
DATA &H00BE,&H0000,&H0000,&H0000,&H0000,&HC041,&H0000,&H0000
DATA &H0000,&HAA00,&H00F4,&H0000,&H0000,&H0000,&H0000,&H00F4
DATA &H0000,&H0000,&H0000,&H0000,&H00F4,&H0000,&H0000,&H0000
DATA &H0000,&H800B,&H0000,&H0000,&H0000,&H1400,&H00F8,&H0000
DATA &H0000,&H0000,&H0000,&H00F8,&H0000,&H0000,&H0000,&H0000
DATA &H00F8,&H0000,&H0000,&H0000,&H0000,&H8007,&H0000,&H0000
DATA &H0000,&H2A00,&H0074,&H0000,&H0000,&H0000,&H0000,&H0074
DATA &H0000,&H0000,&H0000,&H0000,&H0074,&H0000,&H0000,&H0000
DATA &H0000,&H008B,&H0000,&H0000,&H0000,&H0000,&H00FC,&H0000
DATA &H0000,&H0000,&H0000,&H00FC,&H0000,&H0000,&H0000,&H0000
DATA &H00FC,&H0000,&H0000,&H0000,&H0000,&H8003,&H0000,&H0000
DATA &H0000,&H2A00,&H00FC,&H0000,&H0000,&H0000,&H0000,&H00FC
DATA &H0000,&H0000,&H0000,&H0000,&H00FC,&H0000,&H0000,&H0000
DATA &H0000,&H0002,&H0400,&H0000,&H0000,&H0400,&H00FE,&H0000
DATA &H0000,&H0000,&H0000,&H00FE,&H0000,&H0000,&H0000,&H0000
DATA &H00FE,&H0000,&H0000,&H0000,&H0000,&H0020,&HAA02,&H0080
DATA &H0000,&H0A00,&H00F4,&H0000,&H0000,&H0000,&H0000,&H00F4
DATA &H0000,&H0000,&H0000,&H0000,&H00F4,&H0000,&H0000,&H0000
DATA &H0000,&H000A,&H5501,&H0040,&H0000,&H0100,&H00FC,&H0000
DATA &H0000,&H0000,&H0000,&H00FC,&H0000,&H0000,&H0000,&H0000
DATA &H00FC,&H0000,&H0000,&H0000,&H0000,&H0082,&HFF0F,&H00E8
DATA &H0000,&H0A00,&H00FC,&H0000,&H0000,&H0000,&H0000,&H00FC
DATA &H0000,&H0000,&H0000,&H0000,&H00FC,&H0000,&H0000,&H0000
DATA &H0000,&H0000,&HFF05,&H00FC,&H0000,&H0400,&H00F8,&H0200
DATA &H00A0,&H0000,&H0000,&H00F8,&H0200,&H00A0,&H0000,&H0000
DATA &H00F8,&H0200,&H00A0,&H0000,&H0000,&H0026,&HFD2F,&H005E
DATA &H0000,&H0A00,&H00F0,&H0100,&H0000,&H0000,&H0000,&H00F0
DATA &H0100,&H0000,&H0000,&H0000,&H00F0,&H0100,&H0000,&H0000
DATA &H0000,&H000C,&HFE17,&H00FE,&H0000,&H0100,&H00F8,&HAA00
DATA &H00E8,&H0000,&H0000,&H00F8,&HAA00,&H00E8,&H0000,&H0000
DATA &H00F8,&HAA00,&H00E8,&H0000,&H0000,&H0004,&H55BF,&H8016
DATA &H0000,&H0200,&H0040,&H5500,&H0050,&H0000,&H0000,&H0040
DATA &H5500,&H0050,&H0000,&H0000,&H0040,&H5500,&H0050,&H0000
DATA &H0000,&H00BC,&HAA5F,&H00AF,&H0000,&H0400,&H00A0,&HAA02
DATA &H00FA,&H0000,&H0000,&H00A0,&HAA02,&H00FA,&H0000,&H0000
DATA &H00A0,&HAA02,&H00FA,&H0000,&H0000,&H0058,&H55BD,&H8005
DATA &H0000,&H0200,&H0000,&H1500,&H0054,&H0000,&H0000,&H0000
DATA &H1500,&H0054,&H0000,&H0000,&H0000,&H1500,&H0054,&H0000
DATA &H0000,&H0054,&HEA5F,&H00AB,&H0000,&H0100,&H00E8,&HAF0A
DATA &H00EE,&H0000,&H0000,&H00E8,&HAF0A,&H00EE,&H0000,&H0000
DATA &H00E8,&HAF0A,&H00EE,&H0000,&H0000,&H0014,&H50B5,&H8011
DATA &H0000,&H0200,&H00D0,&H5500,&H0054,&H0000,&H0000,&H00D0
DATA &H5500,&H0054,&H0000,&H0000,&H00D0,&H5500,&H0054,&H0000
DATA &H0000,&H002C,&HAA5F,&H80AB,&H0000,&H0400,&H00F8,&HAB02
DATA &H00FA,&H0000,&H0000,&H00F8,&HAB02,&H00FA,&H0000,&H0000
DATA &H00F8,&HAB02,&H00FA,&H0000,&H0000,&H0000,&H54BD,&H8005
DATA &H0000,&H0200,&H00F0,&H1501,&H0055,&H0000,&H0000,&H00F0
DATA &H1501,&H0055,&H0000,&H0000,&H00F0,&H1501,&H0055,&H0000
DATA &H0000,&H000C,&HEA7E,&HC0AA,&H0000,&H0100,&H00F8,&HAF02
DATA &H80FE,&H0000,&H0000,&H00F8,&HAF02,&H80FE,&H0000,&H0000
DATA &H00F8,&HAF02,&H80FE,&H0000,&H0000,&H0080,&H50FD,&H6001
DATA &H0000,&H0200,&H00F0,&H5500,&H40FC,&H0000,&H0000,&H00F0
DATA &H5500,&H40FC,&H0000,&H0000,&H00F0,&H5500,&H40FC,&H0000
DATA &H0000,&H0008,&HAA5F,&H8003,&H0000,&H0000,&H00F8,&HAB02
DATA &H00FA,&H0000,&H0000,&H00F8,&HAB02,&H00FA,&H0000,&H0000
DATA &H00F8,&HAB02,&H00FA,&H0000,&H0000,&H0200,&H54BD,&HE005
DATA &H0000,&H0A00,&H00F0,&H1500,&H0055,&H0000,&H0000,&H00F0
DATA &H1500,&H0055,&H0000,&H0000,&H00F0,&H1500,&H0055,&H0000
DATA &H0000,&H000C,&HEA5F,&HF0AA,&H0000,&H0100,&H00F8,&HAE02
DATA &H00AA,&H0000,&H0000,&H00F8,&HAE02,&H00AA,&H0000,&H0000
DATA &H00F8,&HAE02,&H00AA,&H0000,&H0000,&H00A4,&H51BD,&HF855
DATA &H0000,&H0A00,&H00F0,&H5500,&H0000,&H0000,&H0000,&H00F0
DATA &H5500,&H0000,&H0000,&H0000,&H00F0,&H5500,&H0000,&H0000
DATA &H0000,&H004C,&HAA1F,&H04FD,&H0000,&H0500,&H00F8,&HAA00
DATA &H0000,&H0000,&H0000,&H00F8,&HAA00,&H0000,&H0000,&H0000
DATA &H00F8,&HAA00,&H0000,&H0000,&H0000,&H00AE,&H550F,&H2280
DATA &H0000,&H0A00,&H00FC,&H1000,&H0000,&H0000,&H0000,&H00FC
DATA &H1000,&H0000,&H0000,&H0000,&H00FC,&H1000,&H0000,&H0000
DATA &H0000,&H0110,&HEF01,&H0001,&H0000,&H0100,&H00FE,&HA800
DATA &H8000,&H0000,&H0000,&H00FE,&HA800,&H8000,&H0000,&H0000
DATA &H00FE,&HA800,&H8000,&H0000,&H0000,&H0BE8,&H57EB,&H7EFF
DATA &H8080,&H0A00,&H00FC,&H1400,&H4000,&H0000,&H0000,&H00FC
DATA &H1400,&H4000,&H0000,&H0000,&H00FC,&H1400,&H4000,&H0000
DATA &H0000,&H0543,&HEBD5,&HBDFF,&H0000,&H0000,&H00FE,&H2A00
DATA &HA002,&H0000,&H0000,&H00FE,&H2A00,&HA002,&H0000,&H0000
DATA &H00FE,&H2A00,&HA002,&H0000,&H0000,&H0AAB,&HD5AB,&H5FFD
DATA &H80AF,&H020A,&H00FF,&H1500,&H1000,&H0000,&H0000,&H00FF
DATA &H1500,&H1000,&H0000,&H0000,&H00FF,&H1500,&H1000,&H0000
DATA &H0000,&H0054,&H6A01,&H6FF1,&H00FF,&H010F,&H80FF,&H3E08
DATA &H0A80,&H00A8,&H0008,&H80FF,&H3E08,&H0A80,&H00A8,&H0008
DATA &H80FF,&H3E08,&H0A80,&H00A8,&H0008,&H08FE,&HC126,&H3569
DATA &H8057,&H0A07,&H80FF,&H1400,&H0000,&H0040,&H0004,&H80FF
DATA &H1400,&H0000,&H0040,&H0004,&H80FF,&H1400,&H0000,&H0040
DATA &H0004,&H0055,&H6B1C,&H47D8,&H00BF,&H005B,&H80FF,&H3A00
DATA &H0280,&H00A0,&H003A,&H80FF,&H3A00,&H0280,&H00A0,&H003A
DATA &H80FF,&H3A00,&H0280,&H00A0,&H003A,&H0ABF,&HC5BA,&H6D7A
DATA &H835F,&H02C5,&H00FF,&H1400,&H0000,&H0000,&H007C,&H00FF
DATA &H1400,&H0000,&H0000,&H007C,&H00FF,&H1400,&H0000,&H0000
DATA &H007C,&H8555,&H6B74,&HFFF5,&H01FF,&H0003,&H00FF,&H2A00
DATA &HEAA0,&H00A8,&H00BE,&H00FF,&H2A00,&HEAA0,&H00A8,&H00BE
DATA &H00FF,&H2A00,&HEAA0,&H00A8,&H00BE,&H8BFE,&HD5FA,&H155F
DATA &H8357,&H0041,&H00FF,&H1400,&H5440,&H0040,&H0054,&H00FF
DATA &H1400,&H5440,&H0040,&H0054,&H00FF,&H1400,&H5440,&H0040
DATA &H0054,&H05D4,&HEBD4,&HABBF,&H45BF,&H00AB,&H00FE,&H2A00
DATA &HBAAA,&H00A0,&H00EA,&H00FE,&H2A00,&HBAAA,&H00A0,&H00EA
DATA &H00FE,&H2A00,&HBAAA,&H00A0,&H00EA,&H2BFE,&HD5FA,&H4555
DATA &HA35F,&H0014,&H00FE,&H1100,&H5555,&H0000,&H0074,&H00FE
DATA &H1100,&H5555,&H0000,&H0074,&H00FE,&H1100,&H5555,&H0000
DATA &H0074,&H0754,&HEEF1,&HAAAA,&H07FF,&H008A,&H00FE,&HAF80
DATA &HFEFE,&H02A8,&H00E8,&H00FE,&HAF80,&HFEFE,&H02A8,&H00E8
DATA &H00FE,&HAF80,&HFEFE,&H02A8,&H00E8,&H2FFF,&H507B,&H0101
DATA &HAD57,&H0016,&H00FF,&H5500,&HDD5D,&H0140,&H00D4,&H00FF
DATA &H5500,&HDD5D,&H0140,&H00D4,&H00FF,&H5500,&HDD5D,&H0140
DATA &H00D4,&H1F54,&HAAF5,&H22A2,&H46BF,&H0028,&H82FF,&HABA0
DATA &HFFFF,&H00A0,&H00A8,&H82FF,&HABA0,&HFFFF,&H00A0,&H00A8
DATA &H82FF,&HABA0,&HFFFF,&H00A0,&H00A8,&H2DB8,&H545B,&H0000
DATA &HAF5F,&H0056,&H81FD,&H5101,&HF57F,&H0000,&H0000,&H81FD
DATA &H5101,&HF57F,&H0000,&H0000,&H81FD,&H5101,&HF57F,&H0000
DATA &H0000,&H5E53,&HAEF6,&H0A80,&H55FF,&H00FC,&HCAFF,&HEAE2
DATA &HFEFB,&H00A0,&H00E0,&HCAFF,&HEAE2,&HFEFB,&H00A0,&H00E0
DATA &HCAFF,&HEAE2,&HFEFB,&H00A0,&H00E0,&HB5E8,&H151D,&H0104
DATA &HEF5F,&H0018,&HC5FD,&HD441,&HFD5F,&H0540,&H0040,&HC5FD
DATA &HD441,&HFD5F,&H0540,&H0040,&HC5FD,&HD441,&HFD5F,&H0540
DATA &H0040,&H1A52,&H2BB6,&H02A0,&H52BD,&H00B0,&H83FF,&HFE83
DATA &HFA3F,&H03A0,&H00A0,&H83FF,&HFE83,&HFA3F,&H03A0,&H00A0
DATA &H83FF,&HFE83,&HFA3F,&H03A0,&H00A0,&HBCA8,&H017C,&H05C0
DATA &HAC5F,&H0250,&H01FD,&H5F01,&HF556,&H0500,&H0040,&H01FD
DATA &H5F01,&HF556,&H0500,&H0040,&H01FD,&H5F01,&HF556,&H0500
DATA &H0040,&H9E52,&HA0D6,&H0AA9,&H52FF,&H00A0,&H02FF,&HEF80
DATA &HFEFF,&H03A0,&H0080,&H02FF,&HEF80,&HFEFF,&H03A0,&H0080
DATA &H02FF,&HEF80,&HFEFF,&H03A0,&H0080,&HADA8,&H107F,&H0100
DATA &HAC5F,&H0A60,&H04FD,&H1C00,&HFD75,&H0040,&H0000,&H04FD
DATA &H1C00,&HFD75,&H0040,&H0000,&H04FD,&H1C00,&HFD75,&H0040
DATA &H0000,&H1B52,&HE3D5,&H028A,&H47BD,&H0080,&H02FE,&H3F00
DATA &HFFFB,&H00A0,&H0000,&H02FE,&H3F00,&HFFFB,&H00A0,&H0000
DATA &H02FE,&H3F00,&HFFFB,&H00A0,&H0000,&H0DA9,&HC0BF,&H0004
DATA &HAE5F,&H0000,&H00FC,&H1700,&H7555,&H0000,&H0000,&H00FC
DATA &H1700,&H7555,&H0000,&H0000,&H00FC,&H1700,&H7555,&H0000
DATA &H0000,&H0753,&HE817,&H8AAA,&H04FF,&H0000,&H00FE,&HAF00
DATA &HFEEF,&H00E8,&H0000,&H00FE,&HAF00,&HFEEF,&H00E8,&H0000
DATA &H00FE,&HAF00,&HFEEF,&H00E8,&H0000,&H0FE8,&H50AF,&H0110
DATA &H8C16,&H0000,&H00FC,&H5500,&H5554,&H0040,&H0000,&H00FC
DATA &H5500,&H5554,&H0040,&H0000,&H00FC,&H5500,&H5554,&H0040
DATA &H0000,&H0752,&HAA05,&HAAAB,&H04BD,&H0000,&H00FA,&HAA00
DATA &HFBAA,&H00A0,&H0000,&H00FA,&HAA00,&HFBAA,&H00A0,&H0000
DATA &H00FA,&HAA00,&HFBAA,&H00A0,&H0000,&H0FAC,&H558B,&H0455
DATA &HA85E,&H2200,&H00FC,&H1500,&H7140,&H0050,&H0000,&H00FC
DATA &H1500,&H7140,&H0050,&H0000,&H00FC,&H1500,&H7140,&H0050
DATA &H0000,&H0752,&HEA41,&H8EB5,&H10AD,&H0000,&H00FE,&H2A00
DATA &HFF00,&H00E8,&H0000,&H00FE,&H2A00,&HFF00,&H00E8,&H0000
DATA &H00FE,&H2A00,&HFF00,&H00E8,&H0000,&H0FE8,&HD5EB,&H00FF
DATA &HA816,&HBF00,&H00FC,&H0400,&H5500,&H0040,&H0700,&H00FC
DATA &H0400,&H5500,&H0040,&H0700,&H00FC,&H0400,&H5500,&H0040
DATA &H0700,&H0752,&HFBD7,&HAAFD,&H10BC,&H7800,&H00FA,&HBF02
DATA &HFFA8,&H00A0,&H2F00,&H00FA,&HBF02,&HFFA8,&H00A0,&H2F00
DATA &H00FA,&HBF02,&HFFA8,&H00A0,&H2F00,&H03A4,&H40AD,&H0057
DATA &H385A,&HD200,&H00F8,&H7F01,&H5555,&H0000,&H1700,&H00F8
DATA &H7F01,&H5555,&H0000,&H1700,&H00F8,&H7F01,&H5555,&H0000
DATA &H1700,&H0156,&H8016,&HAAAA,&H50F4,&H6800,&H00FA,&HFF00
DATA &HFEEE,&H00A0,&H0F00,&H00FA,&HFF00,&HFEEE,&H00A0,&H0F00
DATA &H00FA,&HFF00,&HFEEE,&H00A0,&H0F00,&H00E4,&H00AF,&H0111
DATA &HE05A,&HF000,&H00FE,&H5500,&HDD55,&H0000,&H1700,&H00FE
DATA &H5500,&HDD55,&H0000,&H1700,&H00FE,&H5500,&HDD55,&H0000
DATA &H1700,&H0041,&HAA57,&H22AA,&HD0F5,&H6800,&H00FA,&H2B00
DATA &HFAFF,&H0080,&H0F00,&H00FA,&H2B00,&HFAFF,&H0080,&H0F00
DATA &H00FA,&H2B00,&HFAFF,&H0080,&H0F00,&H00A5,&HD4AF,&H0500
DATA &HE07B,&HF200,&H00F6,&H1500,&H5457,&H0000,&H1700,&H00F6
DATA &H1500,&H5457,&H0000,&H1700,&H00F6,&H1500,&H5457,&H0000
DATA &H1700,&H0049,&HEA17,&HABA8,&HD0D7,&H6800,&H00FE,&HAF00
DATA &HEAFF,&H800A,&H0F00,&H00FE,&HAF00,&HEAFF,&H800A,&H0F00
DATA &H00FE,&HAF00,&HEAFF,&H800A,&H0F00,&H80E1,&H50AF,&H1500
DATA &H68E5,&HF200,&H00FE,&H5D00,&H545D,&H0004,&H0700,&H00FE
DATA &H5D00,&H545D,&H0004,&H0700,&H00FE,&H5D00,&H545D,&H0004
DATA &H0700,&H0041,&HA217,&HABA2,&HC4DB,&H7800,&H00FF,&HBF00
DATA &HA8FA,&H002A,&H0F00,&H00FF,&HBF00,&HA8FA,&H002A,&H0F00
DATA &H00FF,&HBF00,&HA8FA,&H002A,&H0F00,&H00A2,&H402F,&H5705
DATA &HEED5,&HB200,&H00F7,&H5700,&H0055,&H0415,&H1700,&H00F7
DATA &H5700,&H0055,&H0415,&H1700,&H00F7,&H5700,&H0055,&H0415
DATA &H1700,&H0048,&HA815,&HFDAA,&HDAEA,&H6800,&H00FF,&HBF00
DATA &H80FE,&H9EFE,&H0F00,&H00FF,&HBF00,&H80FE,&H9EFE,&H0F00
DATA &H00FF,&HBF00,&H80FE,&H9EFE,&H0F00,&H80E0,&H400F,&H7F01
DATA &H6801,&HF000,&H00F7,&H5500,&H01D4,&H7CFC,&H0700,&H00F7
DATA &H5500,&H01D4,&H7CFC,&H0700,&H00F7,&H5500,&H01D4,&H7CFC
DATA &H0700,&H0048,&HAA05,&HDE2B,&H9303,&H7800,&H00FF,&H2B00
DATA &H03F8,&HFEFA,&H0F00,&H00FF,&H2B00,&H03F8,&HFEFA,&H0F00
DATA &H00FF,&H2B00,&H03F8,&HFEFA,&H0F00,&H80A2,&HD403,&HFC07
DATA &H2905,&H3000,&H00F7,&H0100,&H1740,&HFDF7,&H0700,&H00F7
DATA &H0100,&H1740,&HFDF7,&H0700,&H00F7,&H0100,&H1740,&HFDF7
DATA &H0700,&H0048,&H7E01,&H68BD,&H5209,&H1800,&H80FF,&H0200
DATA &HBF80,&HFFFF,&H0F00,&H80FF,&H0200,&HBF80,&HFFFF,&H0F00
DATA &H80FF,&H0200,&HBF80,&HFFFF,&H0F00,&H00EA,&HFD00,&H406F
DATA &HE80F,&H3080,&H00FF,&H0000,&H5F01,&HFFFF,&H0700,&H00FF
DATA &H0000,&H5F01,&HFFFF,&H0700,&H00FF,&H0000,&H5F01,&HFFFF
DATA &H0700,&H8040,&H0000,&HA05E,&HD40F,&H5880,&H80FF,&H0000
DATA &HFF2B,&HFFFF,&H0F80,&H80FF,&H0000,&HFF2B,&HFFFF,&H0F80
DATA &H80FF,&H0000,&HFF2B,&HFFFF,&H0F80,&H00A2,&HA203,&H00D4
DATA &HFA3F,&H3240,&H80FF,&H0001,&H7F15,&HFFFF,&H0700,&H80FF
DATA &H0001,&H7F15,&HFFFF,&H0700,&H80FF,&H0001,&H7F15,&HFFFF
DATA &H0700,&H0040,&H5102,&H806A,&H547F,&H18C0,&H80FF,&H0002
DATA &HFFAF,&HFFFF,&H0FC0,&H80FF,&H0002,&HFFAF,&HFFFF,&H0FC0
DATA &H80FF,&H0002,&HFFAF,&HFFFF,&H0FC0,&H80CA,&HFB01,&H0350
DATA &HFEFF,&H32A0,&H80FF,&H0001,&HFF55,&HFFFF,&H07C0,&H80FF
DATA &H0001,&HFF55,&HFFFF,&H07C0,&H80FF,&H0001,&HFF55,&HFFFF
DATA &H07C0,&H4040,&H7D02,&H05AA,&HD4FD,&H1800,&H80FF,&H8001
DATA &HFFBF,&HFFFF,&H02C0,&H80FF,&H8001,&HFFBF,&HFFFF,&H02C0
DATA &H80FF,&H8001,&HFFBF,&HFFFF,&H02C0,&H4082,&H3F02,&H3F40
DATA &HFAFF,&H3DA0,&H80DF,&H0001,&HFF57,&HFFFF,&H00C0,&H80DF
DATA &H0001,&HFF57,&HFFFF,&H00C0,&H80DF,&H0001,&HFF57,&HFFFF
DATA &H00C0,&H4020,&HFF02,&H3FA8,&HF5F7,&H1000,&HC0FF,&HC800
DATA &HFFAF,&HFFFF,&H00E0,&HC0FF,&HC800,&HFFAF,&HFFFF,&H00E0
DATA &HC0FF,&HC800,&HFFAF,&HFFFF,&H00E0,&H808A,&H3703,&HFF50
DATA &HFEFF,&H0A98
DATA &H0040,&H0009,&HFFC0,&HFFFF,&H3FFC,&HFFFF,&H0000,&H0000
DATA &H0000,&H0000,&H003F,&H0000,&HC003,&H0000,&H0000,&H0000
DATA &H0000,&H0000,&HFF80,&HFFFF,&H1FF8,&HFFFF,&H0000,&H0000
DATA &H0000,&H0000,&H007F,&H0000,&HE007,&H0000,&H0000,&H0000
DATA &H0000,&H0000,&HC13F,&H7000,&HC9F3,&H7098,&H0000,&H0000
DATA &H0000,&H0000,&H3EC0,&H8FFF,&H360C,&H8F67,&H0000,&H0000
DATA &H0000,&H0000,&H813F,&H2000,&HC973,&H2090,&H0000,&H0000
DATA &H0000,&H0000,&H7EC0,&HDFFF,&H368C,&HDF6F,&H0000,&H0000
DATA &H0000,&H0000,&H9930,&H2633,&HC973,&H2793,&H0000,&H0000
DATA &H0000,&H0000,&H66CF,&HD9CC,&H368C,&HD86C,&H0000,&H0000
DATA &H0000,&H0000,&H9930,&H2433,&HC973,&H2792,&H0000,&H0000
DATA &H0000,&H0000,&H66CF,&HDBCC,&H368C,&HD86D,&H0000,&H0000
DATA &H0000,&H0000,&H993C,&H2733,&HC9F3,&HE713,&H0000,&H0000
DATA &H0000,&H0000,&H66C3,&HD8CC,&H360C,&H18EC,&H0000,&H0000
DATA &H0000,&H0000,&H8980,&H2033,&H18F8,&H6730,&H0000,&H0000
DATA &H0000,&H0000,&H767F,&HDFCC,&HE707,&H98CF,&H0000,&H0000
DATA &H0000,&H0000,&HC9C1,&H3033,&H3CFC,&H6778,&H0000,&H0000
DATA &H0000,&H0000,&H363E,&HCFCC,&HC303,&H9887,&H0000,&H0000
DATA &H0000,&H0000
DATA "Hello everyone!"
DATA ""
DATA "Everyone thought I was stingy for not"
DATA "letting anyone see my source code, so"
DATA "I finnaly did it.  Even though I made"
DATA "this little game in Qb 4.5, I left it"
DATA "uncompiled for your enjoyment."
DATA ""
DATA "The only reason I'm letting you guys"
DATA "see this one is becuase I learned much"
DATA "by looking at everyone else's code so"
DATA "I thought it only fair."
DATA ""
DATA "The program structure is really crappy"
DATA "on this I know.  There are tons of"
DATA "optimizations you could probably do,"
DATA "but why even try?"
DATA ""
DATA "This game is pretty cool, considering"
DATA "the time it took to make it."
DATA "I did this in a week starting May 19."
DATA "I decided I was too cool for the"
DATA "freshman class trip so I got stuck here"
DATA "sitting in front of the computer."
DATA "So, I erased C++, re-installed Qb 4.5"
DATA "and I went to work on a game where"
DATA "shrapnel flies left and right."
DATA ""
DATA "Balloon X is the sequel to"
DATA "Balloon X.O.G, which had Adlib sound."
DATA "Why did I change it?  Well, the"
DATA "original (O.G.) was made with all the"
DATA "things you could only do with Qb 4.5."
DATA "I decided to make one for the Qbasic"
DATA "kids.  HE HE!"
DATA ""
DATA "Sorry it's so big."
DATA ""
DATA "If any of you guys want to make a"
DATA "game with me in Basic, C, or Pas,"
DATA "let me know."
DATA "I'm getting really bored."
DATA ""
DATA "Manny Najera"
DATA "Collect 2 Gems"
DATA "Collect 4 Gems"
DATA "Collect 6 Gems"
DATA "Collect 8 Gems"
DATA "Collect 10 Gems"
DATA &H0005,&H0008,&H1010,&H1010,&H2828,&H2828,&H2020,&H2020
DATA &H0000,&H7100,&H1010,&HEB10,&H0000,&HFB00,&H0000,&HFB00
DATA &H0000,&H7100
DATA &H0005,&H0008,&HEBEB,&HEBEB,&HD3D3,&HD3D3,&HDBDB,&HDBDB
DATA &H8A8A,&H8A8A,&H0000,&H0000,&H0000,&H0000,&H0000,&H0000
DATA &H8A8A,&H8A8A
DATA &H0005,&H0008,&H1010,&H1010,&H2020,&H2020,&H2020,&H2020
DATA &H0000,&H7100,&H1010,&HEB10,&H0000,&HFB00,&H0000,&HFB00
DATA &H0000,&H7100
DATA &H0005,&H0008,&HEBEB,&HEBEB,&HDBDB,&HDBDB,&HDBDB,&HDBDB
DATA &H8A8A,&H8A8A,&H0000,&H0000,&H0000,&H0000,&H0000,&H0000
DATA &H8A8A,&H8A8A
DATA &H0005,&H0008,&H0000,&H0000,&H2020,&H2020,&H2020,&H2020
DATA &H0000,&H7100,&H1010,&HEB10,&H0000,&HFB00,&H0000,&HFB00
DATA &H0000,&H7100
DATA &H0005,&H0008,&HFBFB,&HFBFB,&HDBDB,&HDBDB,&HDBDB,&HDBDB
DATA &H8A8A,&H8A8A,&H0000,&H0000,&H0000,&H0000,&H0000,&H0000
DATA &H8A8A,&H8A8A
DATA &H0005,&H0008,&H0000,&H0000,&H0000,&H0000,&H2020,&H2020
DATA &H0000,&H7000,&H1010,&HE810,&H0000,&HF800,&H0000,&HF800
DATA &H0000,&H7000
DATA &H0005,&H0008,&HF8F8,&HF8F8,&HF8F8,&HF8F8,&HD8D8,&HD8D8
DATA &H8888,&H8888,&H0000,&H0000,&H0000,&H0000,&H0000,&H0000
DATA &H8888,&H8888
DATA &H0042,&H0009,&HFF3F,&HFCFF,&H13F8,&HFFFF,&H00FF,&H0000
DATA &H0000,&H0000,&H0000,&H00C0,&H0300,&HEC07,&H0000,&H0000
DATA &H0000,&H0000,&H0000,&H0000,&HFF3F,&HFCFF,&H13F0,&HFFFF
DATA &H00FF,&H0000,&H0000,&H0000,&H0000,&H00C0,&H0300,&HEC0F
DATA &H0000,&H0000,&H0000,&H0000,&H0000,&H0000,&HC33F,&H0C33
DATA &HF3E7,&H0C0E,&H003F,&H0000,&H0000,&H0000,&H0000,&H3CC0
DATA &HF3CC,&H0C18,&HF3F1,&H00C0,&H0000,&H0000,&H0000,&H0000
DATA &H813F,&H0432,&HF2E7,&H0804,&H003F,&H0000,&H0000,&H0000
DATA &H0000,&H7EC0,&HFBCD,&H0D18,&HF7FB,&H00C0,&H0000,&H0000
DATA &H0000,&H0000,&H993F,&H6432,&HF2E7,&HC964,&H00FF,&H0000
DATA &H0000,&H0000,&H0000,&H66C0,&H9BCD,&H0D18,&H369B,&H0000
DATA &H0000,&H0000,&H0000,&H0000,&H913F,&H4432,&HF2E7,&HC944
DATA &H00FF,&H0000,&H0000,&H0000,&H0000,&H6EC0,&HBBCD,&H0D18
DATA &H36BB,&H0000,&H0000,&H0000,&H0000,&H0000,&H9F3F,&H7C22
DATA &HF2E7,&HC97C,&H00FF,&H0000,&H0000,&H0000,&H0000,&H60C0
DATA &H83DD,&H0D18,&H3683,&H0000,&H0000,&H0000,&H0000,&H0000
DATA &H8380,&H0C06,&H12F0,&H490C,&H00FF,&H0000,&H0000,&H0000
DATA &H0000,&H7C7F,&HF3F9,&HED0F,&HB6F3,&H0000,&H0000,&H0000
DATA &H0000,&H0000,&HC3C0,&H0C8F,&H13F8,&H490E,&H00FF,&H0000
DATA &H0000,&H0000,&H0000,&H3C3F,&HF370,&HEC07,&HB6F1,&H0000
DATA &H0000,&H0000,&H0000,&H0000
'SP-Precision by Thomas Lipschultz: End of program.

REM $STATIC
FUNCTION BoxHit% (Hx1, Hy1, hx2, hy2)
Bhx = Bal.X + 7
Bhy = Bal.Y + 7
IF Bal.X > Hx1 AND Bhx < hx2 AND Bhy > Hy1 AND Bal.Y < hy2 THEN
BoxHit% = 1
GOTO EBox
END IF
BoxHit% = 0
EBox:
END FUNCTION

SUB Center (Row, Text$, C)
COLOR C
LOCATE Row, 21 - (LEN(Text$) / 2)
PRINT Text$
COLOR 15
END SUB

SUB CreateTable
FOR I = 1 TO 360
XSin(I) = SIN(I)
Xcos(I) = COS(I)
NEXT
END SUB

SUB DeadDuck
FOR T = 1 TO 84 STEP 4
SCREEN 7, 0, 2, 0: PCOPY 1, 2
LINE (0, 0)-(T, 200), 1, BF
LINE (80, 0)-(80 + T, 200), 1, BF
LINE (160, 0)-(160 + T, 200), 1, BF
LINE (240, 0)-(240 + T, 200), 1, BF
SCREEN 7, 0, 0, 0: PCOPY 2, 0: PCOPY 1, 2
NEXT
COLOR 15, 1
SCREEN 7, 0, 2, 0
CLS
LINE (0, 0)-(319, 199), 1, BF
PUT (160 - 32, 100), Gop, PSET
PCOPY 2, 0
A$ = INPUT$(1)
SCREEN 7, 0, 0, 2
COLOR 15, 0
MakeTitleScreen
DoMenu
END SUB

SUB DoBItem
FOR I = 1 TO 5
IF BItem(I).Active = 0 THEN
BItem(I).Clock = BItem(I).Clock + 1
END IF
IF BItem(I).Clock = 50 THEN
BItem(I).X = Fnr(290) + 10
BItem(I).Y = 11
BItem(I).Ym = Fnr(3) + 3
BItem(I).Active = 1
BItem(I).num = Fnr(2)
BItem(I).Clock = Fnr(30)
END IF
IF BItem(I).Active = 1 THEN
BItem(I).Y = BItem(I).Y + BItem(I).Ym
END IF
IF BItem(I).Y > 180 THEN
BItem(I).Active = 0
BItem(I).Y = 300
END IF
IF BItem(I).Active = 1 THEN
SELECT CASE BItem(I).num
CASE 1
PUT (BItem(I).X, BItem(I).Y), P1, PSET
CASE 2
PUT (BItem(I).X, BItem(I).Y), P5, PSET
END SELECT
IF BoxHit%(BItem(I).X - 5, BItem(I).Y - 5, BItem(I).X + 15, BItem(I).Y + 10) = 1 THEN
BItem(I).Active = 0
SELECT CASE BItem(I).num
CASE 1
Current.Score = Current.Score + 100
CASE 2
Current.Score = Current.Score + 500
END SELECT
END IF
END IF
NEXT
END SUB

SUB DoBomb (lev)
FOR I = 1 TO lev
Bomb(I).Clock = Bomb(I).Clock + 1
IF Bomb(I).Anclock < 21 THEN Bomb(I).AnFlag = 1
IF Bomb(I).Anclock > 20 AND Bomb(I).Anclock < 41 THEN Bomb(I).AnFlag = 2
IF Bomb(I).Anclock > 40 AND Bomb(I).Anclock < 61 THEN Bomb(I).AnFlag = 3
IF Bomb(I).Anclock > 60 AND Bomb(I).Anclock < 81 THEN Bomb(I).AnFlag = 4
IF Bomb(I).Active = 0 THEN
Bomb(I).Anclock = Bomb(I).Anclock + 1
SELECT CASE Bomb(I).AnFlag
CASE 1
PUT (Bomb(I).Sx, Bomb(I).Sy), Bomb1m, AND
PUT (Bomb(I).Sx, Bomb(I).Sy), Bomb1, XOR
CASE 2
PUT (Bomb(I).Sx, Bomb(I).Sy), Bomb2m, AND
PUT (Bomb(I).Sx, Bomb(I).Sy), Bomb2, XOR
CASE 3
PUT (Bomb(I).Sx, Bomb(I).Sy), Bomb3m, AND
PUT (Bomb(I).Sx, Bomb(I).Sy), Bomb3, XOR
CASE 4
PUT (Bomb(I).Sx, Bomb(I).Sy), Bomb4m, AND
PUT (Bomb(I).Sx, Bomb(I).Sy), Bomb4, XOR
END SELECT
END IF
IF Bomb(I).Rclock = 200 THEN
Bomb(I).Anclock = 0
Bomb(I).AnFlag = 1
Bomb(I).Active = 0
Bomb(I).Rclock = 0
Bomb(I).Clock = 0
Bomb(I).Sx = Fnr(300) + 10
Bomb(I).Sy = Fnr(180) + 11
END IF
IF Bomb(I).Clock = 80 THEN
Bomb(I).Active = 1
END IF
IF Bomb(I).Active = 1 THEN
Bomb(I).Rclock = Bomb(I).Rclock + 4
FOR T = 1 TO 40 STEP 2
Bomb(I).Fx = Bomb(I).Sx + Xcos(T) * Bomb(I).Rclock
Bomb(I).Fy = Bomb(I).Sy + XSin(T) * Bomb(I).Rclock
IF Bomb(I).Fx < 0 OR Bomb(I).Fx > 320 OR Bomb(I).Fy < 11 OR Bomb(I).Fy > 198 THEN GOTO Clip
PSET (Bomb(I).Fx, Bomb(I).Fy), 14
IF PointHit%(Bomb(I).Fx, Bomb(I).Fy) = 1 THEN
Bal.Dead = 1
Bal.Dx = Bal.X
Bal.Dy = Bal.Y
END IF
Clip:
NEXT
END IF
NEXT
END SUB

SUB DoCheapEnding
SCREEN 7, 0, 7, 0
MakeStars 300
Scsc$ = "Final Score:" + STR$(Current.Score)
Center 2, "YOU WON?", 15
Center 4, "To tell you the truth...", 3
Center 6, "I can't even get past level 2.", 5
Center 10, "Look man...", 8
Center 12, "This game has no plot,", 2
Center 14, "Therefore it can have no ending.", 2
Center 17, "Just remember,", 9
Center 20, "The spirit of Balloon X is in YOU!", 15
Center 23, Scsc$, 14
FOR T = 1 TO 120 STEP 4
SCREEN 7, 0, 2, 0: PCOPY 1, 2
LINE (0, 0)-(320, T), 1, BF
LINE (0, 200)-(320, 200 - T), 1, BF
SCREEN 7, 0, 0, 0: PCOPY 2, 0: PCOPY 1, 2
NEXT
PCOPY 7, 1
FOR T = 120 TO -4 STEP -4
SCREEN 7, 0, 2, 0: PCOPY 1, 2
LINE (0, 0)-(320, T), 1, BF
LINE (0, 200)-(320, 200 - T), 1, BF
SCREEN 7, 0, 0, 0: PCOPY 2, 0: PCOPY 1, 2
NEXT
DO
SCREEN 7, 0, 2, 0: PCOPY 1, 2
SCREEN 7, 0, 0, 0: PCOPY 2, 0: PCOPY 1, 2
LOOP UNTIL INKEY$ <> ""
FOR T = 1 TO 120 STEP 4
SCREEN 7, 0, 2, 0: PCOPY 1, 2
LINE (0, 0)-(320, T), 1, BF
LINE (0, 200)-(320, 200 - T), 1, BF
SCREEN 7, 0, 0, 0: PCOPY 2, 0: PCOPY 1, 2
NEXT
MakeTitleScreen
DoMenu
END SUB

SUB DoDemoMode
FOR T = 1 TO 120 STEP 4
SCREEN 7, 0, 2, 0: PCOPY 1, 2
LINE (0, 0)-(320, T), 1, BF
LINE (0, 200)-(320, 200 - T), 1, BF
SCREEN 7, 0, 0, 0: PCOPY 2, 0: PCOPY 1, 2
NEXT
PCOPY 3, 1
SCREEN 7, 0, 1, 1
FOR T = 120 TO 0 STEP -4
SCREEN 7, 0, 2, 0: PCOPY 1, 2
LINE (0, 0)-(320, T), 1, BF
LINE (0, 200)-(320, 200 - T), 1, BF
SCREEN 7, 0, 0, 0: PCOPY 2, 0: PCOPY 1, 2
NEXT
Dl = 0
DO
SCREEN 7, 0, 2, 0: PCOPY 1, 2
Dl = Dl + 1
IF Dl = 600 THEN
Dl = 0
EXIT DO
END IF
Center 13, "Demo Mode", 15
DoTorpedo 3
DoMissle 3
DoBomb 2
DoItem
SCREEN 7, 0, 0, 0: PCOPY 2, 0: PCOPY 1, 2
LOOP UNTIL INKEY$ <> ""
FOR T = 1 TO 84 STEP 4
SCREEN 7, 0, 2, 0: PCOPY 1, 2
LINE (0, 0)-(T, 200), 1, BF
LINE (80, 0)-(80 + T, 200), 1, BF
LINE (160, 0)-(160 + T, 200), 1, BF
LINE (240, 0)-(240 + T, 200), 1, BF
SCREEN 7, 0, 0, 0: PCOPY 2, 0: PCOPY 1, 2
NEXT
MakeTitleScreen
DoMenu
END SUB

SUB DoExit
FOR T = 1 TO 120 STEP 4
SCREEN 7, 0, 2, 0: PCOPY 1, 2
LINE (0, 0)-(320, T), 1, BF
LINE (0, 200)-(320, 200 - T), 1, BF
SCREEN 7, 0, 0, 0: PCOPY 2, 0: PCOPY 1, 2
NEXT
SCREEN 7, 0, 1, 0
CLS
MakeStars 300
Center 5, "- Programming -", 15
Center 8, "Manny Najera", 4
Center 11, "- Graphics -", 15
Center 14, "Manny Najera", 9
Center 17, "- Game Design -", 15
Center 20, "Manny Najera", 12
FOR T = 120 TO 0 STEP -4
SCREEN 7, 0, 2, 0: PCOPY 1, 2
LINE (0, 0)-(320, T), 1, BF
LINE (0, 200)-(320, 200 - T), 1, BF
SCREEN 7, 0, 0, 0: PCOPY 2, 0: PCOPY 1, 2
NEXT
DO
SCREEN 7, 0, 2, 0: PCOPY 1, 2
SCREEN 7, 0, 0, 0: PCOPY 2, 0: PCOPY 1, 2
LOOP UNTIL INKEY$ <> ""
END
END SUB

SUB DoIntro
A$ = INPUT$(1)
LINE (ManX, ManY)-(ManX + 54, ManY + 27), 0, BF
FOR T = 1 TO 200 STEP 5
SCREEN 7, 0, 2, 0: PCOPY 1, 2
FOR N = 1 TO 40 STEP 2
PSET (ManX + 20 + XSin(N) * T, ManY + 13 + Xcos(N) * T), 9
PSET (ManX + 20 + XSin(N) * 2 * T, ManY + 13 + Xcos(N) * N), 12
PSET (ManX + 20 + XSin(N) * N, ManY + 13 + Xcos(N) * 2 * T), 1
NEXT
SCREEN 7, 0, 0, 0: PCOPY 2, 0: PCOPY 1, 2
NEXT
FOR T = 1 TO 84 STEP 4
SCREEN 7, 0, 2, 0: PCOPY 1, 2
LINE (0, 0)-(T, 200), 1, BF
LINE (80, 0)-(80 + T, 200), 1, BF
LINE (160, 0)-(160 + T, 200), 1, BF
LINE (240, 0)-(240 + T, 200), 1, BF
SCREEN 7, 0, 0, 0: PCOPY 2, 0: PCOPY 1, 2
NEXT
END SUB

SUB DoItem
IF Item.Active = 0 THEN
Item.ActCount = Item.ActCount + 1
Item.X = 500
END IF
IF Item.ActCount = 200 THEN
Item.Active = 1
Item.X = Fnr(290) + 10
Item.Y = Fnr(170) + 11
Item.num = Fnr(4)
Item.EndCount = 0
Item.ActCount = 0
END IF
'w13 h7
IF BoxHit%(Item.X, Item.Y, Item.X + 15, Item.Y + 10) = 1 THEN
Item.X = 400
SELECT CASE Item.num
CASE 1
Current.Score = Current.Score + 100
CASE 2
Current.Score = Current.Score + 500
CASE 3
Current.Gems = Current.Gems + 1
CASE 4
Current.Lives = Current.Lives + 1
END SELECT
Item.EndCount = 100
Item.Active = 0
END IF
IF Item.Active = 1 THEN
Item.EndCount = Item.EndCount + 1
SELECT CASE Item.num
CASE 1
PUT (Item.X, Item.Y), P1, PSET
CASE 2
PUT (Item.X, Item.Y), P5, PSET
CASE 3
PUT (Item.X, Item.Y), Icon, PSET
CASE 4
PUT (Item.X, Item.Y), Coin1, PSET
END SELECT
IF BoxHit%(Item.X, Item.Y, Item.X + 13, Item.Y + 7) = 1 THEN
Item.X = 400
SELECT CASE Item.num
CASE 1
Current.Score = Current.Score + 100
CASE 2
Current.Score = Current.Score + 500
CASE 3
Current.Gems = Current.Gems + 1
CASE 4
Curremt.Lives = Current.Lives + 1
END SELECT
Item.EndCount = 100
Item.X = 500
Item.Active = 0
END IF
END IF
IF Item.EndCount = 100 THEN Item.Active = 0
END SUB

SUB DoMenu
Menu.Clock = 0
DO
SCREEN 7, 0, 2, 0: PCOPY 1, 2
Menu.Clock = Menu.Clock + 1
IF Menu.Clock = 400 THEN
Menu.Clock = 0
DrawArena
DoDemoMode
END IF
Choice$ = UCASE$(INKEY$)
SELECT CASE Choice$
CASE CHR$(0) + CHR$(72)
Menu.num = Menu.num - 1
IF Menu.num < 1 THEN Menu.num = 1
CASE CHR$(0) + CHR$(80)
Menu.num = Menu.num + 1
IF Menu.num > 3 THEN Menu.num = 3
CASE CHR$(13)
GOTO ProChoice
END SELECT
SELECT CASE Menu.num
CASE 1
PUT (100, 111), Iconm, AND
PUT (100, 111), Icon, XOR
CASE 2
PUT (100, 143), Iconm, AND
PUT (100, 143), Icon, XOR
CASE 3
PUT (100, 175), Iconm, AND
PUT (100, 175), Icon, XOR
END SELECT
SCREEN 7, 0, 0, 0: PCOPY 2, 0: PCOPY 1, 2
LOOP
ProChoice:
SELECT CASE Menu.num
CASE 1
Current.Gems = 0
Current.Level = 1
Current.Score = 0
StartGame
CASE 2
SeeInfo
CASE 3
DoExit
END SELECT
END SUB

SUB DoMissle (lev)
FOR I = 1 TO 3 + lev
IF Missle(I).Active = 0 THEN
Missle(I).ActCount = Missle(I).ActCount + 1
END IF
IF Missle(I).ActCount = 100 AND Missle(I).Active = 0 THEN
Missle(I).Active = 1
Missle(I).Y = Fnr(180) + 10
Missle(I).Xm = Fnr(6)
Missle(I).X = 3
END IF
IF Missle(I).Active = 1 THEN
Missle(I).X = Missle(I).X + Missle(I).Xm
PUT (Missle(I).X, Missle(I).Y), Mrm, AND
PUT (Missle(I).X, Missle(I).Y), Mr, XOR
IF BoxHit%(Missle(I).X, Missle(I).Y, Missle(I).X + 10, Missle(I).Y + 10) = 1 THEN
Bal.Dead = 1
Bal.Dx = Bal.X
Bal.Dy = Bal.Y
END IF
IF Missle(I).X > 300 THEN
Missle(I).Active = 0
Missle(I).ActCount = 0
END IF
END IF
NEXT
END SUB

SUB DoTorpedo (lev)
FOR I = 1 TO 2 + lev
IF Tor(I).Active = 0 THEN
Tor(I).ActCount = Tor(I).ActCount + 1
END IF
IF Tor(I).ActCount = 100 AND Tor(I).Active = 0 THEN
Tor(I).LoCount = Fnr(140) + 10
Tor(I).Count = 0
Tor(I).ActCount = 0
Tor(I).Active = 1
Tor(I).Ecount = 0
Tor(I).X = Fnr(180) + 10
Tor(I).Y = 185
Tor(I).Ym = -1
Tor(I).Ex = Fnr(130) + 50
END IF
IF Tor(I).Active = 1 THEN
Tor(I).Count = Tor(I).Count + 1
Tor(I).Y = Tor(I).Y + Tor(I).Ym
IF Tor(I).Y < 11 THEN Tor(I).Active = 0
IF Tor(I).Exploding = 0 THEN
PUT (Tor(I).X, Tor(I).Y), Torpm, AND
PUT (Tor(I).X, Tor(I).Y), Torp, XOR
END IF
IF Tor(I).Count = Tor(I).LoCount AND Tor(I).Exploding = 0 AND Tor(I).Ecount = 0 AND Tor(I).Active = 1 THEN
Tor(I).Exx = Tor(I).X
Tor(I).Eyy = Tor(I).Y
Tor(I).Exploding = 1
END IF
IF Tor(I).Exploding = 1 AND Tor(I).Active = 1 THEN
Tor(I).Ecount = Tor(I).Ecount + 5
FOR T = 1 TO 6
Tor(I).Fx = Tor(I).Exx + XSin(T) * Tor(I).Ecount
Tor(I).Fy = Tor(I).Eyy + Xcos(T) * Tor(I).Ecount
IF Tor(I).Fx < 0 OR Tor(I).Fx > 320 OR Tor(I).Fy < 11 OR Tor(I).Fy > 198 THEN GOTO TClip
PSET (Tor(I).Fx, Tor(I).Fy), 14
IF PointHit%(Tor(I).Fx, Tor(I).Fy) THEN
Bal.Dead = 1
Bal.Dx = Bal.X
Bal.Dy = Bal.Y
END IF
TClip:
NEXT
IF Tor(I).Ecount > 200 THEN
Tor(I).ActCount = 0
Tor(I).Active = 0
Tor(I).Exploding = 0
Tor(I).Exx = -200
Tor(I).Eyy = -200
END IF
END IF
END IF
NEXT
END SUB

SUB DrawArena
SCREEN 7, 0, 3, 0
CLS
MakeStars 300
LINE (0, 0)-(319, 10), 0, BF
PUT (0, 0), Score, PSET
LINE (0, 11)-(319, 199), 15, B
LINE (1, 12)-(318, 198), 7, B
LINE (2, 13)-(317, 197), 8, B
LOCATE 1, 1: PRINT "Score:"
LOCATE 1, 14: PRINT "Lives:"
LOCATE 1, 27: PRINT "Gems:"
END SUB

SUB DrawBalloon
IF Bal.Dead = 1 THEN
Bal.DeadClock = Bal.DeadClock + 5
IF Bal.DeadClock = 100 THEN
Bal.DeadClock = 0
Current.Lives = Current.Lives - 1
Bal.Dead = 0
END IF
IF Current.Lives = -1 THEN DeadDuck
FOR T = 1 TO 40 STEP 2
PSET (Bal.Dx + XSin(T) * Bal.DeadClock, Bal.Dy + Xcos(T) * Bal.DeadClock), 4
NEXT
IF Current.Lives = 0 THEN GOTO Finishdraw
END IF
IF Bal.Anclock = 80 THEN Bal.Anclock = 0
IF Bal.Anclock < 80 THEN Bal.Anclock = Bal.Anclock + 1
IF Bal.Anclock > 0 AND Bal.Anclock < 11 THEN
Bal.AnFlag = 1
PUT (Bal.X, Bal.Y), Bal1m, AND
PUT (Bal.X, Bal.Y), Bal1, XOR
GOTO Finishdraw
END IF
IF Bal.Anclock > 10 AND Bal.Anclock < 21 THEN
Bal.AnFlag = 2
PUT (Bal.X, Bal.Y), Bal2m, AND
PUT (Bal.X, Bal.Y), Bal2, XOR
GOTO Finishdraw
END IF
IF Bal.Anclock > 20 AND Bal.Anclock < 31 THEN
Bal.AnFlag = 3
PUT (Bal.X, Bal.Y), Bal3m, AND
PUT (Bal.X, Bal.Y), Bal3, XOR
GOTO Finishdraw
END IF
IF Bal.Anclock > 30 AND Bal.Anclock < 41 THEN
Bal.AnFlag = 4
PUT (Bal.X, Bal.Y), Bal4m, AND
PUT (Bal.X, Bal.Y), Bal4, XOR
GOTO Finishdraw
END IF
IF Bal.Anclock > 40 AND Bal.Anclock < 51 THEN
Bal.AnFlag = 5
PUT (Bal.X, Bal.Y), Bal5m, AND
PUT (Bal.X, Bal.Y), Bal5, XOR
GOTO Finishdraw
END IF
IF Bal.Anclock > 50 AND Bal.Anclock < 61 THEN
Bal.AnFlag = 4
PUT (Bal.X, Bal.Y), Bal4m, AND
PUT (Bal.X, Bal.Y), Bal4, XOR
GOTO Finishdraw
END IF
IF Bal.Anclock > 60 AND Bal.Anclock < 71 THEN
Bal.AnFlag = 3
PUT (Bal.X, Bal.Y), Bal3m, AND
PUT (Bal.X, Bal.Y), Bal3, XOR
GOTO Finishdraw
END IF
IF Bal.Anclock > 70 AND Bal.Anclock < 81 THEN
Bal.AnFlag = 2
PUT (Bal.X, Bal.Y), Bal2m, AND
PUT (Bal.X, Bal.Y), Bal2, XOR
GOTO Finishdraw
END IF
Finishdraw:
END SUB

SUB DrawBlankArena
SCREEN 7, 0, 1, 0
CLS
LINE (0, 0)-(319, 10), 0, BF
PUT (0, 0), Score, PSET
LINE (0, 11)-(319, 199), 15, B
LINE (1, 12)-(318, 198), 7, B
LINE (2, 13)-(317, 197), 8, B
END SUB

SUB GetKey
Move$ = INKEY$
SELECT CASE Move$
CASE CHR$(0) + CHR$(77)
Bal.Xm = Bal.Xm + 1
CASE CHR$(0) + CHR$(75)
Bal.Xm = Bal.Xm - 1
CASE CHR$(0) + CHR$(72)
Bal.Ym = Bal.Ym - 1
CASE CHR$(0) + CHR$(80)
Bal.Ym = Bal.Ym + 1
CASE CHR$(0) + CHR$(59)
IF Active = 1 THEN
SCREEN 7, 0, 2, 4
A$ = INPUT$(1)
SCREEN 7, 0, 2, 0
END IF
CASE CHR$(0) + CHR$(16)
IF Active = 1 THEN
SCREEN 7, 0, 2, 5
DO
Ans$ = UCASE$(INKEY$)
LOOP UNTIL Ans$ = "Y" OR Ans$ = "N"
IF Ans$ = "Y" THEN
Active = 0
FOR T = 1 TO 84 STEP 4
SCREEN 7, 0, 2, 0: PCOPY 1, 2
LINE (0, 0)-(T, 200), 1, BF
LINE (80, 0)-(80 + T, 200), 1, BF
LINE (160, 0)-(160 + T, 200), 1, BF
LINE (240, 0)-(240 + T, 200), 1, BF
SCREEN 7, 0, 0, 0: PCOPY 2, 0: PCOPY 1, 2
NEXT
MakeTitleScreen
DoMenu
END IF
ELSE SCREEN 7, 0, 2, 0
END IF
END SELECT
END SUB

SUB Initit
FOR I = 1 TO 3
Bomb(I).Sx = Fnr(300) + 10
Bomb(I).Sy = Fnr(180) + 11
Bomb(I).Active = 0
Bomb(I).Rclock = 0
Bomb(I).Clock = 0
NEXT
Bal.DeadClock = 0
Bal.Dead = 0
Bal.X = 155
Bal.Y = 95
Bal.AnFlag = 1
Bal.Anclock = 0
Bal.W = 7
Bal.H = 13
Menu.num = 1
ManX = (320 / 2) - (54 / 2)
ManY = (200 / 2) - 13
Active = 0
FOR I = 1 TO 10
C(I).Anclock = Fnr(90)
Tor(I).ActCount = 0
Tor(I).Active = 0
Tor(I).Exploding = 0
Tor(I).Ecount = 0
Missle(I).Active = 0
Missle(I).ActCount = 0
Tor(I).LoCount = 0
NEXT I
END SUB

SUB LevDis
LDF = LDF + 1
Center 12, l$, 15
Center 14, G(Current.Level), 14
END SUB

SUB LevelClear
FOR T = 1 TO 120 STEP 4
SCREEN 7, 0, 2, 0: PCOPY 1, 2
LINE (0, 0)-(320, T), 1, BF
LINE (0, 200)-(320, 200 - T), 1, BF
SCREEN 7, 0, 0, 0: PCOPY 2, 0: PCOPY 1, 2
NEXT
A$ = INKEY$
PCOPY 3, 1
SCREEN 7, 0, 1, 1
SCREEN 7, 0, 2, 0
LINE (0, 0)-(319, 199), 1, BF
PUT (160 - 33, 100), Lc, PSET
PCOPY 2, 0
A$ = INPUT$(1)
Current.Level = Current.Level + 1
Current.Gems = 0
StartBonus
DrawArena
PCOPY 3, 1
SCREEN 7, 0, 1, 1
FOR T = 120 TO -4 STEP -4
SCREEN 7, 0, 2, 0: PCOPY 1, 2
LINE (0, 0)-(320, T), 1, BF
LINE (0, 200)-(320, 200 - T), 1, BF
SCREEN 7, 0, 0, 0: PCOPY 2, 0: PCOPY 1, 2
NEXT
MainGame
END SUB

SUB MainGame
Active = 1
LDF = 0
l$ = "Level " + STR$(Current.Level)
SELECT CASE Current.Level
CASE 1
Current.GemReq = 2
CASE 2
Current.GemReq = 4
CASE 3
Current.GemReq = 6
CASE 4
Current.GemReq = 8
CASE 5
Current.GemReq = 10
END SELECT
FOR T = 200 TO 0 STEP -5
SCREEN 7, 0, 2, 0: PCOPY 1, 2
FOR N = 1 TO 40 STEP 2
PSET (Bal.X + XSin(N) * T, Bal.Y + Xcos(N) * T), 4
NEXT
SCREEN 7, 0, 0, 0: PCOPY 2, 0: PCOPY 1, 2
NEXT
Cl = Current.Level - 2
Active = 1
DO
SCREEN 7, 0, 2, 0: PCOPY 1, 2
IF LDF < 100 THEN LevDis
GetKey
ProcessMotion
DoTorpedo Current.Level + 2
'DoMissle Current.Level   Un-comment this for missles, they suck though!
DoBomb Current.Level - 1'the hit detection is freakin nasty because
DoItem                    'I needed SPEED!  Missles suck #@&$!
DrawBalloon
IF Current.Gems = Current.GemReq THEN
SELECT CASE Current.Level
CASE 5
DoCheapEnding   'Screw the ending!
CASE ELSE
LevelClear
END SELECT
END IF
LOCATE 1, 8: PRINT Current.Score
LOCATE 1, 21: PRINT Current.Lives
LOCATE 1, 33: PRINT Current.Gems
SCREEN 7, 0, 0, 0: PCOPY 2, 0: PCOPY 1, 2
LOOP
Active = 0
END SUB

SUB MakeHelpScreen
SCREEN 7, 0, 4, 0
MakeStars 300
LINE (0, 31)-(320, 31), 15
Center 3, "CONTROLS", 9
COLOR 15
LOCATE 7, 11: PRINT "Move Up"
LOCATE 10, 11: PRINT "Move Down"
LOCATE 13, 11: PRINT "Move Left"
LOCATE 16, 11: PRINT "Move Right"
LOCATE 19, 11: PRINT "This Screen"
LOCATE 22, 11: PRINT "Quit Game"
PUT (220, 48), Up, PSET
PUT (220, 72), Down, PSET
PUT (220, 96), Left, PSET
PUT (220, 120), Right, PSET
PUT (220, 144), F1, PSET
PUT (220, 168), Alt, PSET
PUT (240, 168), Q, PSET
END SUB

SUB MakeInfo
SCREEN 7, 0, 6, 6
MakeStars 300
LINE (0, 0)-(85, 105), 15, B
LINE (1, 1)-(84, 104), 7, B
LINE (2, 2)-(83, 103), 8, B
PUT (3, 3), me, PSET
COLOR 7
LOCATE 3, 13: PRINT "NAME:"
LOCATE 8, 13: PRINT "AGE:"
LOCATE 12, 13: PRINT "OCCUPATION:"
COLOR 9
LOCATE 3, 19: PRINT "Manny Najera"
LOCATE 8, 18: PRINT "15"
LOCATE 12, 26: PRINT "Student"
COLOR 11
LOCATE 15, 4: PRINT "- to scroll, ESC to exit"
PUT (0, 110), Up, PSET
PUT (10, 110), Down, PSET
LINE (0, 120)-(319, 120), 15
LINE (0, 121)-(319, 197), 0, BF
LINE (0, 198)-(319, 198), 15
END SUB

SUB MakeIntroScreen
MakeStars 300
PUT ((320 / 2) - (54 / 2), (200 / 2) - 13), Manny, PSET
END SUB

SUB MakeQuits
SCREEN 7, 0, 5, 0
MakeStars 300
Center 12, "Quit Game? (Y/N)", 15
END SUB

SUB MakeStars (NumStars%)
FOR I = 1 TO NumStars%
MCr = Fnr(3)
SELECT CASE MCr
CASE 1
MCol = 8
CASE 2
MCol = 7
CASE 3
MCol = 15
END SELECT
Mx = Fnr(320)
my = Fnr(200)
PSET (Mx, my), MCol
NEXT
END SUB

SUB MakeTitleScreen
SCREEN 7, 0, 1, 0
CLS
MakeStars 300
LINE (108 - 20, 47 - 20)-(108 + 120, 47 + 40), 0, BF
PUT (108, 47), Title, PSET
LINE (108 - 20, 47 - 20)-(108 + 120, 47 + 40), 4, B
LINE (108 - 21, 47 - 21)-(108 + 121, 47 + 41), 12, B
LINE (108 - 22, 47 - 22)-(108 + 122, 47 + 42), 15, B
Center 16, "Start Game", 4
Center 20, "Author Info", 9
Center 24, "Exit", 12
FOR T = 84 TO 0 STEP -4
SCREEN 7, 0, 2, 0: PCOPY 1, 2
LINE (0, 0)-(T, 200), 1, BF
LINE (80, 0)-(80 + T, 200), 1, BF
LINE (160, 0)-(160 + T, 200), 1, BF
LINE (240, 0)-(240 + T, 200), 1, BF
SCREEN 7, 0, 0, 0: PCOPY 2, 0: PCOPY 1, 2
NEXT
END SUB

FUNCTION PointHit% (Hx, Hy)
IF Hx > Bal.X AND Hx < Bal.X + 7 AND Hy > Bal.Y AND Hy < Bal.Y + 7 THEN PointHit% = 1 ELSE PointHit% = 0
END FUNCTION

SUB ProcessMotion
IF Bal.Xm > 3 THEN Bal.Xm = 3
IF Bal.Xm < -3 THEN Bal.Xm = -3
IF Bal.Ym > 3 THEN Bal.Ym = 3
IF Bal.Ym < -3 THEN Bal.Ym = -3
Bal.X = Bal.X + Bal.Xm
Bal.Y = Bal.Y + Bal.Ym
IF Bal.X < 4 THEN
Bal.X = 4
Bal.Xm = 0
GOTO FinishBof
END IF
IF (Bal.X + Bal.W) > 315 THEN
Bal.X = (315 - Bal.W)
Bal.Xm = 0
GOTO FinishBof
END IF
IF Bal.Y < 14 THEN
Bal.Y = 14
Bal.Ym = 0
GOTO FinishBof
END IF
IF (Bal.Y + Bal.H) > 195 THEN
Bal.Y = (195 - Bal.H)
Bal.Ym = 0
GOTO FinishBof
END IF
FinishBof:
END SUB

SUB SeeInfo
FOR T = 1 TO 84 STEP 4
SCREEN 7, 0, 2, 0: PCOPY 1, 2
LINE (0, 0)-(T, 200), 1, BF
LINE (80, 0)-(80 + T, 200), 1, BF
LINE (160, 0)-(160 + T, 200), 1, BF
LINE (240, 0)-(240 + T, 200), 1, BF
SCREEN 7, 0, 0, 0: PCOPY 2, 0: PCOPY 1, 2
NEXT
PCOPY 6, 1
COLOR 9
FOR T = 84 TO 0 STEP -4
SCREEN 7, 0, 2, 0: PCOPY 1, 2
LINE (0, 0)-(T, 200), 1, BF
LINE (80, 0)-(80 + T, 200), 1, BF
LINE (160, 0)-(160 + T, 200), 1, BF
LINE (240, 0)-(240 + T, 200), 1, BF
SCREEN 7, 0, 0, 0: PCOPY 2, 0: PCOPY 1, 2
NEXT
DO
SCREEN 7, 0, 2, 0: PCOPY 1, 2
Mt$ = UCASE$(INKEY$)
SELECT CASE Mt$
CASE CHR$(0) + CHR$(72)
Mp = Mp - 1
IF Mp = 0 THEN Mp = 1
CASE CHR$(0) + CHR$(80)
Mp = Mp + 1
IF Mp = 39 THEN Mp = 38
CASE CHR$(27)
EXIT DO
END SELECT
LOCATE 17, 1
FOR I = Mp TO Mp + 6
PRINT Message(I)
NEXT
SCREEN 7, 0, 0, 0: PCOPY 2, 0: PCOPY 1, 2
LOOP
FOR T = 1 TO 84 STEP 4
SCREEN 7, 0, 2, 0: PCOPY 1, 2
LINE (0, 0)-(T, 200), 1, BF
LINE (80, 0)-(80 + T, 200), 1, BF
LINE (160, 0)-(160 + T, 200), 1, BF
LINE (240, 0)-(240 + T, 200), 1, BF
SCREEN 7, 0, 0, 0: PCOPY 2, 0: PCOPY 1, 2
NEXT
Mp = 1
MakeTitleScreen
DoMenu
END SUB

SUB StartBonus
DrawBlankArena
FOR T = 84 TO 0 STEP -4
SCREEN 7, 0, 2, 0: PCOPY 1, 2
LINE (0, 0)-(T, 200), 1, BF
LINE (80, 0)-(80 + T, 200), 1, BF
LINE (160, 0)-(160 + T, 200), 1, BF
LINE (240, 0)-(240 + T, 200), 1, BF
SCREEN 7, 0, 0, 0: PCOPY 2, 0: PCOPY 1, 2
NEXT
Bl = 10
DO
SCREEN 7, 0, 2, 0: PCOPY 1, 2
Bl = Bl - .03
IF Bl < 0 THEN EXIT DO
D$ = STR$(INT(Bl)) + " seconds left"
Center 12, D$, 15
Center 14, "Grab as many goodies as you can!", 12
LOCATE 1, 6: PRINT Current.Score
FOR I = 1 TO 60
Star(I).Y = Star(I).Y + Star(I).T
IF Star(I).Y > 197 THEN Star(I).Y = 11
PSET (Star(I).X, Star(I).Y), Star(I).C
NEXT I
GetKey
ProcessMotion
DoBItem
DrawBalloon
SCREEN 7, 0, 0, 0: PCOPY 2, 0: PCOPY 1, 2
LOOP
FOR T = 0 TO 84 STEP 4
SCREEN 7, 0, 2, 0: PCOPY 1, 2
LINE (0, 0)-(T, 200), 1, BF
LINE (80, 0)-(80 + T, 200), 1, BF
LINE (160, 0)-(160 + T, 200), 1, BF
LINE (240, 0)-(240 + T, 200), 1, BF
SCREEN 7, 0, 0, 0: PCOPY 2, 0: PCOPY 1, 2
NEXT
END SUB

SUB StartGame
Initit
Current.Lives = 5
Current.Score = 0
Current.Level = 1
FOR T = 1 TO 120 STEP 4
SCREEN 7, 0, 2, 0: PCOPY 1, 2
LINE (0, 0)-(320, T), 1, BF
LINE (0, 200)-(320, 200 - T), 1, BF
SCREEN 7, 0, 0, 0: PCOPY 2, 0: PCOPY 1, 2
NEXT
PCOPY 3, 1
SCREEN 7, 0, 1, 1
FOR T = 120 TO 0 STEP -4
SCREEN 7, 0, 2, 0: PCOPY 1, 2
LINE (0, 0)-(320, T), 1, BF
LINE (0, 200)-(320, 200 - T), 1, BF
SCREEN 7, 0, 0, 0: PCOPY 2, 0: PCOPY 1, 2
NEXT
Active = 1
Initit
MainGame
END SUB

