ZMapper 0.02, by FDwR:
ZMapper is a simple program able to recreate game scenes from SNES savestates, tell miscellaneous 
technical For now, it does not have any high requirements and will work fine on a 386-586, under DOS 
or Windows DOS box.

It was written to eventually assist with making maps, for all those nostalgic games that we still got lost 
in (figuratively and literally). The idea is that all those levels you see while playing a game have to be 
stored somewhere, and that if you could just find them, you could get the map data. Of course, before I 
heard of emulation there was no way I could get to it on the cartridge, but now it is as simple as opening 
a file. Unfortunately the levels are still compressed, with each game having its own techniques, so you 
can not simply read them directly from the ROM. The best way to get at the map data is grab it while the 
game is running and everything is in its expanded format - in other words the emulation state. Then you 
could simply save the complete state (tilemaps, sprites, level data..) so you could look at the scene 
using ZMapper. Currently ZMapper is still being worked on so that it can regenerate the scene 
correctly and can not export any maps, but it will eventually. After all, that is why it is called 
Z"Mapper".

ZMapper only understands zSNES savestates for now, but may also eventually support Snes9x and 
other formats. I really don't see any pressing reason to support any other savestate formats though 
since zSNES seems to be a good standard. It also has the debugger necessary to capture the state at 
any given scanline, which is a must for games that change some aspect of the video output midframe.

Requirements:
IBM PC 386+ - sorry if you have a mac, I know nothing about them
320k - it's a simple little prog, does not even need any extended memory
VGA - SVGA not supported yet, just mode 13h (320x200:256)
Keyboard - always nice to have one of these
Mouse - less fun to use without one

Features:
Scene viewer
Palette window
VRAM tile viewer
Tilemap viewer
Sprite list
Scene information

The scene viewer is the main part of ZMapper (or at least will be someday). It currently supports the 8x8 
tilesize, 32x32 32x64 64x32 64x64 tilemaps, and all video modes 0-7 except the extra wide screens of 5&6.

The palette window simply shows you the color palette used by games and each color's RGB and hex 
values. You can also export the palette from here if you want to use it in Naga or SMC-Ripper. Exporting 
a raw palette might be useful for any of you out there that want to code a little ROM and use the palette 
of an existing game rather than making your own.

The VRAM tile viewer is sort of interesting if you like to see how and where games pack their graphics. 
It can view 2,4 & 8 bitplanes plus mode 7 tiles. Press the arrow keys to scroll, 1-4 to jump to the tilebase 
and mode of that BG, 5 for sprites, left and right to change the color palette, and + or - to change the 
tilemode.

The tilemap viewer (not the scene viewer) shows where the tilemaps are stored. Unless using mode 7 
(where the tilemap is an array 128x128) each tilemap made of 32x32 arrays that are pieced together with 
others to make the complete scene. This utility just shows those blocks without regard to how they 
relate to the whole picture.

Sprite info gives the full 128 sprite list, shows each sprite, displays its color palette, and tells where it 
goes on the screen - even for disabled sprites. Double clicking will bring up a menu that lets you jump 
to where that is in the scene viewer, or where its tiles are the VRAM viewer.

Scene info is nice for anybody curious about those technical details of how the game is using the SNES 
hardware, like the how many colors, planes, subscreens, the video mode, sprite sizes, and more boringly 
meaningless jargon (I'm sure somebody else out there likes to know about that stuff as much as me too 
though).

Future plans:
Map exporting (sort of the idea for making this)
Tile set and sprite exporting to image files
Sprites in scene viewing
A few more more details added to scene info
16x16 & 8x16 tiles

I think that I'll come up with my own little format for map files, and eventually a separate map editor. 
This little prog is supposed to only be for simply getting the map out of the savestate, nothing more. 
The map files will have to be able to hold multiple maps, tile sets, palettes, and have some sort of 
compression method for keeping the filesize down. It will also need to include multiple layering for 
those maps that use two overlayed planes such as 'Zelda' and 'SoM' ('Secret of Mana'). It could even 
have a way too link separate maps together and mark special areas of the map with text comments, but 
don't get your hopes up. Something like that that won't come for quite a while, unless one of you out 
there wants to write it ;-)

Have any of you ever wanted to have the little animation frames of your favorite video game 
characters? Currently, clicking on the scene doesn't do anything.By the next version, you should be 
able easily export any sprite(s) you like to a bitmap, to do whatever you want with.

ZMapper does not yet show any sprites in the scene viewer. I just need to add them, and make sure 
that all the layering priorities are correct.

Some more scene info like what the windows are set to, what DMA channels are active, and the values 
in the mode 7 registers would be nice.

16x16 tiles will be added as soon as I find some. So far no game I have tried uses them? 16x8 tiles such 
as the ones in the main menu of 'SoM', although very rare, will be added. They are double wide tiles 
used the for the 512 column screen modes.

Things intentionally left out:
Mode 7 scaling/rotation
Pixelation (that scrambling, diffusing effect)
Windowing
HDMA effects
Translucency (colored transparency)

Certain effects, even though they might look awesome, aren't necessary for a little map exporter. If 
anything, these effects hinder being able to effectively grab maps. The mode 7 'Zelda' and 'SOM' world 
maps for example look really neat, but the perspective view totally distorts any possiblity of piecing the 
parts together. Without any perspective, everything is flat, just the way we want it.

Pixelation - like when you enter a level in 'Mario World' - is just good for looks while you are playing. 
Otherwise, there is really nothing exciting about a lot of square blocks.

Windowing is great when games want to focus on just a portion of the screen or do a nice closing 
scene, but we want to see everything and not be limited to just what the game wants us to see at that 
time.

ZMapper does its best to generate a complete scene from a static savestate, but many games modify 
the scene during during gameplay, not just from frame to frame, but line to line, making it impossible to 
get the complete picture from just one instant in time. Without becoming a sort of mini-emulator, these 
changes are impossible to anticipate. That means ROMs such as the wavy text demo that comes with 
Qwertie's emulator will show plain, flat scenes. Of course, for map making that is exactly what we want!

Transparency effects, although they would be nice, are simply not necessary and would be a bit of 
work for me (especially using simple Qb). However, someday if I have nothing better to do, they will be 
implemented.
 
Using the GUI:
It should be pretty straightforward and like any other graphical interface, but here are a few things you 
might want to know. Bty, this is my first GUI, so don't compare it to Snemul’s or anything.

Lists: Since scroll bars were too much work for me to bother making, you can just click on either the top 
or bottom of the list with the right mouse button to scroll the page (or simply use keyboard).

File Selecting: If the filename you are typing in is in the current list, you can type in just the first few 
letters and the list should jump to it (or the closest one to what you typed in). Normally it only shows 
zSNES savestates (*.zs?) in the list, but if you want to view all files, you can type in your own 
filemask (like *.* for all files). This might be useful if you renamed you savestate to something else so 
you could have a backup of it..? If it is on another drive, you can change to it by typing in its letter 
and the colon. Even though ZMapper does have long filenames support, I don't know a good way to 
detect Win95 yet, so just press F4 to toggle them on and off. If you are not under Win95, pressing 
the key won't cause the prog to crash, but all the files will dissappear from the list.

Sprite list: If you know what sprite you want, you can jump directly to it by typing in its number using 
the number keys and backspace.

Buttons: Almost none of them work yet, but it's not a bug. I simply have not written any code for them. 
As soon as the most important parts are completed, then I can work on the rest. I'm not even going to 
think about map exporting until all the viewing is correct.

Capturing a savestate:
If you have had any experience with zSNES, then you know that saving the state is as simple as 
pressing F2. If not, download it and get used it (because otherwise this prog is useless ;-). You don't 
really need to read this if you aren't having any problems (or if you are the technically squeamish type).

Finding sprite frames is simple in 'Mario World' because it loads a whole chunk of graphics in video 
memory for that entire level or area, so they are all in there at the same time. Other games like 'DK 
Country' are a bit more advanced and only load what they need when they need it sometimes down to 
the individual frame. If a sprite is not currently in memory, it quickly transfers it in; and when the sprite 
dies or is no longer on the screen, it can free that block of VRAM. That means for you that to get the 
desired sprite, you will have to save it while you can visibly see the sprite on screen - otherwise it is not 
gauranteed to be present in memory. Since zSNES .4 has no pause key, so the best trick I've found to 
step frame by frame is to press F1 or F3 (sort of a pause), then Esc, and F1/F3 again quickly. Do this 
until the sprite you want is visible behind the window, then press F2 and close the window to continue. 
Another trick that many games use to allow more sprites in a level than will fit in 64k is to use normal 
memory (WRAM) to also hold graphics. ZMapper isn't yet able to also load that other 128k to view it, 
because of its low mem requirements, so use a viewer like SMC-Ripper or Naga and use them on 
savestates.

Whenever you save a state while in emulation, zSNES always saves it between frames (at scanline 0, 
just before that next frame starts). If the game has one complete scene without any drastic mid-frame 
changes, you should have no problems viewing it with ZMapper, but if it does do something like 
change the video mode in the middle of the screen, you could have a problem. Since the screen is 
rendered in lines from top to bottom as time goes, and you are only loading a single instant in time, 
there is no way to know that half of the screen was using mode 7 and only this half is using mode 0 (as 
in the opening 'SoM' map). HMDA can cause changes to many other too, like plane offsets, windowing, 
and palette colors, but they are all time dependant. So what you catch depends on when you catch it. 
To grab the scene you want at the right scanline (rather than always at line 0) you will have to use the 
debugger, by starting the zSNES with the '-d' switch. You should read in the zSNES readme for more on 
using it. Once there, you will see the current scanline at the top left after 'Y:'. Simply trace through 
enough instructions for it to reach where you think the change takes place. For those that don't already 
know, the normal screen height is 224 pixels, so to capture the scene below midscreen, save anywhere 
from scaline 112 or greater.

Scene viewing:
Panning: While viewing the scene from a savestate, you can pan around and see the rest it, including 
the parts the game didn't mean for you to see. Use the arrow keys and PgUp, PgDn, Home, End, *, /, +, - 
to scroll. BkSpc returns you to the window's origin. Loading a file also restores the scene to the center.

Filtering: To turn individual planes on or off, you can use the same standard keys as for zSNES (1-4 for 
each BG, 5 for sprites, and 6 to restore everything). Unlike in emulators, you are allowed to turn on 
planes that are disabled by the game, although you will likely only see junk.

Possible questions:
These are some questions that some of you might wonder. If you have other relavent questions, you 
can email me, and if enough people ask the same annoying question, I'll just include it in here.

q: What are all those garbage sprites doing at the bottom of the screen when I scroll down?
a: Since there is no way to actually turn an SNES sprite on or off, most games put their unused sprites 
down there at the bottom (usually line 240) or simply make them clear.
q: How come when I pan around the scene, everything outside the normal game window looks funky?
a: It's simply because you are seeing parts of the scene that the game didn't bother to draw (basically 
binary static) and didn't think anyone would possibly ever look at. After all, why should it waste time 
drawing parts that aren't meant to be seen? Although, games sometimes draw more than just what you 
see. For example, did you know the giant Lizard Kraid in 'Metroid 3' is actually an entire plane (BG), so 
you can see his complete body (except the moving parts) before he has come up from the ground by 
just panning down? Some games set two or more planes to share the exact same map base but use 
different pages of it (each one has a different scroll offset), so you may start panning around and the 
planes seem to merge into others. Anyways, just don't worry about it.
q: Why do I see all these sprites in VRAM that I don't see on screen or possibly even on this level?
a: Something like 'Zelda' loads all the graphics it is going to need for a particular area or level at once 
just for simplicity, even if that includes characters that aren't in that immediate area.
q: Why don't some of the buttons work?
a: Refer to 'Using the GUI'.

About ZMapper:
I really just made this for myself, but it seemed nicer to share. It is out for public use as is, without any 
gaurantee that it will get any better than this, but if you do think of something good (within my ability) 
that could be added to it, please tell me anyway. It was compiled with Qbasic 4.5 with just a little 
assembly for important parts. Although it seems fine for speed, it should be ported to C or even pure 
assembly someday (just to see if I can). If you find any real bugs while using it, please tell me.

Bty, the 'Z' in the title actually has nothing to do with zSNES. I know neither ZsKnight or _demo_, 
although I love their work and would like too. It's really for my first favorite, 'Zelda' - the inspiration for it 
all. Of course, by now I have all of that game in my head, but there are still plenty of other games that 
need mapping. It got first chance though to be the one that was used to test this program. Who knows 
where exactly the 'z' in 'zSNES' came from? I would have said my "first true love" about Zelda, but then 
you might confuse the game with the princess (of course she is not too bad either).
FDwR@Juno.com


ZMapper log:
(this contains nothing interesting for most of you)

--Ver 0.0--
--Aug--
5	Start writing viewer. Figure out where certain registers of the SNES were stored in zSNES savestates.
8	Write code for simple GUI parts (menus and lists).
11	Create main menu and fileload window.
13	Add mouse support (it was a must).
14	Able to load VRAM, OAM, and scroll registers but not able to display even a single tile yet.
18	Get the scene info page right after some trial and error. Tells the tile size, map size, and scroll registers.
19	Add palette viewing window.
--Ver 0.01--
22	Write a tile translator (SNES tile => linear bitmap).
23	Try to figure out how tilemaps are arranged with simple colored blocks. They are messed up! Instead of 
64x64 tilemaps being normal, simple arrays they are four separate 32x32 tilemaps.
24	Replace the blocks with real tiles (at least for non-mode 7 8x8 tiles).
	Add palette colormapping.
25	Replace the tilemap debugger with the real one to draw scene layers.
	Add sprites list with details (they might not be right though).
26	Get the tilemaps to wrap correctly!
27	Add View scene scroll with arrow keys.
28	Beat Mario RPG and decide I want to make a map of it.
--Ver 0.02--
29	Lost copy I've been working on for a week and start from backup.
31	Added mode 7 tiles (for all those RPGs that like to use it, Zelda, SOM, Mario RPG...).
--Sept--
1	Map tiles are now flipped vertically and horizontally.
2	File loader is actually functional now (before it simply showed a static list that I actually typed in)
3	Added mosaic, vertical scan line, and cycle count info. Verified that other games can be viewed with 
ZMapper in addition to Zelda.
7	Added different colorbases for each plane while using mode 0.
8	Start to add sprites (to the Sprites page at least, not the scene). Add checking that files to be loaded are 
indeed zSNES savestates. That means it will not load a non-savestate file even if the name ends with the 
'zst' extension, and that it will load savestate files that have simply been renamed - in case for some 
reason you want to have more than ten saves of a single game.
9	Get my previous copy back!
11	Pretty much done reintegrating old copy into current one. Added simple buttons.
12	Added SetWindowTitle and long filename support (for Win95). Download the source code for Snes9x 
and find out the compression library that its savestates use (I already knew they were compressed 
somehow), so someday little ZMapper may also support that format too.
13	Find some very noticeable bugs while viewing a Metroid 3 savestate. So it's still in the alpha stage, 
although some people might get some use out of as it is.
14	Made file selecting window a little more 'intelligent' and added reload option in main menu. The file 
selector now shows the difference between files and directories. Files can be jumped to more quickly by 
typing in the first few letters of the name. The reload option saves me from constantly reselecting 
names from the list.
15	Write the readme document for ZMapper, and go to bed at 5:09am.
17	A few minor bug fixes, backgroud is redrawn for when you close a window, file selector can now 
change drives.
18	Added background color, now the skies in 'Mario World' and 'AllStars' look as they should!
19	
20	Fixed bug where tilemaps that point to tiles past VRAM wrap around to the front (for 'Yoshi's Island'). 
Found the first game yet to use 16x16 tiles - now I can finally test them out.
