Random thoughts for the future:

TODO:
    - Do not resize canvas upon merely changing background color
    - Make LunaSvg Bitmap.clear faster by writing 32-bits each pixel and create GH PR.
    - Move these thoughts below to another file
    - Upload to GitHub

Fix void Canvas::rgba() to use macros. canvas.cpp line 195
    plutovg-private.h
    #define plutovg_alpha_shift 24
    #define plutovg_red_shift 0
    #define plutovg_green_shift 8
    #define plutovg_blue_shift 16

Gridfitting prototype - add extended SVG attributes for gridfitting
    Anchor points
    Grid fitting
        Align group of objects to adjusted/aligned point
        Translate anchor and entire grouped object and then stretch by other anchor
        transform-grid(translate(...) scale(...)
    Rounding
        Grid alignment rounding: fraction/halves + up, down, left, right, floor, ceil, toZero, toInfinity, in, out (so halves-up, fraction-toZero...)
        rounding-origin for in (toward zero) and out (toward infinity) rounding
        inward and outward rounding based on path direction clockwise vs counterclockwise
        Round relative another point
        Round even/odd (e.g. 1/3/5 odd pixel lines to half pixel vs 2/4/6 even pixel lines to pixel intersection) grid-rounding="evenodd(2)"
        Round at a fraction of the grid, such as half pixels grid-rounding="x floor half"? grid-scale="0.5 0.5"? grid-transform="scale(0.5 0.5)"
    Conditional details
        Conditional visibility based on device pixels per canvas unit (PPU)
    Minimum constraints
        Set minimum path width minimum-strokewidth="1px" (e.g. no thinner than 1 pixel)
        Ensure minimum 1-pixel gap between lines (e.g. Outlook office calendar icon)

Read:
    A vector format for Flutter by Google - https://docs.google.com/document/d/1YWffrlc6ZqRwfIiR1qwp1AOkS9JyA_lEURI8p5PsZlg/edit#heading=h.8crpi5305nr
    Rendering good looking text with resolution-independent layout - http://people.redhat.com/otaylor/grid-fitting/
    https://yqnn.github.io/svg-path-editor/
    https://svg-path-visualizer.netlify.app/
    Understanding grid sizes of (SVG) icons - https://makandracards.com/makandra/467222-understanding-grid-sizes-of-svg-icons

Investigate callstack for pixel coordinate rounding / grid-fitting:
    lunasvgtest.exe!sw_ft_outline_convert(const plutovg_path * path, const plutovg_matrix_t * matrix) Line 128	C
    lunasvgtest.exe!plutovg_rle_rasterize(plutovg_rle_t * rle, const plutovg_path * path, const plutovg_matrix_t * matrix, const plutovg_rect_t * clip, const plutovg_stroke_data_t * stroke, plutovg_fill_rule_t winding) Line 268	C
    lunasvgtest.exe!plutovg_fill_preserve(plutovg * pluto) Line 464	C
    lunasvgtest.exe!plutovg_fill(plutovg * pluto) Line 426	C
    lunasvgtest.exe!lunasvg::Canvas::fill(const lunasvg::Path & path, const lunasvg::Transform & transform, lunasvg::WindRule winding, lunasvg::BlendMode mode, double opacity) Line 111	C++
    lunasvgtest.exe!lunasvg::FillData::fill(lunasvg::RenderState & state, const lunasvg::Path & path) Line 332	C++
    lunasvgtest.exe!lunasvg::LayoutShape::render(lunasvg::RenderState & state) Line 409	C++
    lunasvgtest.exe!lunasvg::LayoutContainer::renderChildren(lunasvg::RenderState & state) Line 88	C++
    lunasvgtest.exe!lunasvg::LayoutGroup::render(lunasvg::RenderState & state) Line 180	C++
    lunasvgtest.exe!lunasvg::LayoutContainer::renderChildren(lunasvg::RenderState & state) Line 88	C++
    lunasvgtest.exe!lunasvg::LayoutSymbol::render(lunasvg::RenderState & state) Line 160	C++
    lunasvgtest.exe!lunasvg::Document::render(lunasvg::Bitmap bitmap, const lunasvg::Matrix & matrix, unsigned int backgroundColor) Line 212	C++

    lunasvgtest.exe!lunasvg::to_plutovg_path(plutovg * pluto, const lunasvg::Path & path) Line 293	C++
    lunasvgtest.exe!lunasvg::Canvas::fill(const lunasvg::Path & path, const lunasvg::Transform & transform, lunasvg::WindRule winding, lunasvg::BlendMode mode, double opacity) Line 106	C++
    lunasvgtest.exe!lunasvg::FillData::fill(lunasvg::RenderState & state, const lunasvg::Path & path) Line 332	C++
    lunasvgtest.exe!lunasvg::LayoutShape::render(lunasvg::RenderState & state) Line 409	C++
    lunasvgtest.exe!lunasvg::LayoutContainer::renderChildren(lunasvg::RenderState & state) Line 88	C++
    lunasvgtest.exe!lunasvg::LayoutGroup::render(lunasvg::RenderState & state) Line 180	C++
    lunasvgtest.exe!lunasvg::LayoutContainer::renderChildren(lunasvg::RenderState & state) Line 88	C++
    lunasvgtest.exe!lunasvg::LayoutSymbol::render(lunasvg::RenderState & state) Line 160	C++
    lunasvgtest.exe!lunasvg::Document::render(lunasvg::Bitmap bitmap, const lunasvg::Matrix & matrix, unsigned int backgroundColor) Line 212	C++

    lunasvgtest.exe!plutovg_matrix_map_point(const plutovg_matrix_t * matrix, const plutovg_point_t * src, plutovg_point_t * dst) Line 128	C
    lunasvgtest.exe!sw_ft_outline_convert(const plutovg_path * path, const plutovg_matrix_t * matrix) Line 108	C
    lunasvgtest.exe!plutovg_rle_rasterize(plutovg_rle_t * rle, const plutovg_path * path, const plutovg_matrix_t * matrix, const plutovg_rect_t * clip, const plutovg_stroke_data_t * stroke, plutovg_fill_rule_t winding) Line 268	C
    lunasvgtest.exe!plutovg_fill_preserve(plutovg * pluto) Line 464	C
    lunasvgtest.exe!plutovg_fill(plutovg * pluto) Line 426	C

Elements:
    anchor - invisible point used for other shapes to align/fit to.

Attribute:
    grid-fit - fit potentially multiple points via scaling (stretch/scale) to display pixel grid
    grid-align - align via translation to display pixel grid, passing an anchor name or coordinates.
    grid-origin - relative origin in user coordinates. When anchor names are given, it's relative to the snapped position, not the original.
    grid-offset - adjustment in device pixels, such as shifting to a half pixel.
    grid-scale - multiplier for the device grid, such as rounding to every half pixel instead.
    grid-rounding - left/right/up/down/in/out/floor/ceil/to-infinity/to-zero
    path anchors - list of anchors used within the path (referred to by number 0 to N-1 within the path)
    path d - augmented to include new per-point anchors. Existing path letters include "MmLlHhVvCcSsQqTtAaZz". So use "Gg" or "ga" and "gf" (grid align and grid fit).

Example:
    Grid alignment cannot be part of the existing transform() as browsers (Chrome and Edge anyway) ignore the entire transform attribute entirely upon seenig any unrecognized calls, ruining forwards compatibility with older clients (e.g. transform="grid-align(plusSignCenter) translate(13 24)" also ignores the translate).

        <!-- icons8-fluency-add-ot-clipboard-4-sizes.svg -->
        <anchor id="plusSignTopLeftCorner" x="37.5" y="37.5" grid-rounding="up left">
        <g grid-align="plusSignTopLeftCorner">
            <anchor id="plusSignCenter" x="38" y="38" grid-rounding="nearest" grid-multiple="0.5"/><!-- round to nearest half pixel -->
            <g grid-align="plusSignCenter">
                <circle cx="38" cy="38" r="10"/>
                <path d="m 38.5,43 h -1 C 37.224,43 37,42.776 37,42.5 v -9 C 37,33.224 37.224,33 37.5,33 h 1 c 0.276,0 0.5,0.224 0.5,0.5 v 9 c 0,0.276 -0.224,0.5 -0.5,0.5 z" fill="#FFFFFF">
                <path d="m 33,38.5 v -1 C 33,37.224 33.224,37 33.5,37 h 9 c 0.276,0 0.5,0.224 0.5,0.5 v 1 c 0,0.276 -0.224,0.5 -0.5,0.5 h -9 C 33.224,39 33,38.776 33,38.5 z" fill="#FFFFFF">

                ...
                <!-- 3 anchors are used in the path for displacement.
                     Multiple anchors can apply to multiple points,
                     such as leftPart (#0) and anotherPart (#2) applying to the last point. -->
                <path anchors="leftPart rightPart anotherPart" d="m 10 10 h20 v20 z" ext:d="an0 m 10 10 an1 h20 an0 2 v20 z"/>
            </g>
        </g>

    One anchor can be defined relative to another one.
    Below, the bottom component is kept at least 1 pixel away from the top component so there is separation between them.
    todo: second anchor is relative to the rounded location rather than user coordinates, right?
    todo: should I use an explicit attribute like grid-minimum="1px" instead of rounding, that way nearest can be used?
    todo: what if you want *exactly* 1 device pixel regardless of size, not just a minimum? round up combined with minimum?
    todo: what about 45 degree angles, so that two octagons keep the same distance from each other? It's okay if the corners
    todo: should origin be the final device pixels or the user coordinates? rounding to nearest half pixel would be useful, e.g. grid-origin="0.5px 0.5px"
          are antialiased if the straight lines are snapped, and probably more important they have the same relative thickness.
          A grid-rounding attribute like "tangential" or "linear" or "fromOrigin" or "alongOriginAxis"...?

        <anchor id="topComponentBottomAnchor" y="40" grid-rounding="nearest">
        <anchor id="bottomComponentTopAnchor" y="41" grid-rounding="down" grid-origin="topComponentBottomAnchor"><!-- ensure at least one pixel away -->
        <path id="topComponent" anchors="topComponentBottomAnchor" d="an m0 0 h80 an0 v40 h-80 z"/><!-- first "an" sets to no anchors, second "an" sets anchor -->
        <path id="bottomComponent" anchors="bottomComponentTopAnchor" d="an0 m0 41 h80 an v40 h-80 z"/><!-- first "an" sets anchor, second "an" resets to no anchors -->

    todo: Can you just declare values inline with shorthand, rather than require anchor?

        <g grid-align="37.5 37.5 halves-up fraction-left">

    Referring to the same anchor twice in a nested group will be a nop, since the outer group
    already aligned the anchor.

        <anchor id="plusSignTopLeftCorner" x="37.5" y="37.5" grid-rounding="up left">
        <g grid-align="plusSignTopLeftCorner">
            <g grid-align="plusSignTopLeftCorner"><!-- nop since already pixel aligned -->
                <path d="m 10 10 h20 v20 z"/>
            </g>
        </g>

    You should be able to stretch components too between the bounds, which translates to a tranform scale and translate:

        <anchor id="topLeftCorner" x="40" y="40" grid-rounding="up left">
        <anchor id="bottomRightCorner" x="60" y="60" grid-rounding="down right">
        <g grid-fit="topLeftCorner bottomRightCorner">
            <circle cx="50" cy="50" r="10"/>
        </g>

    Minimum stroke:
        <circle cx="50" cy="50" r="10" stroke="#70F800" stroke-width="3" minimum-stroke-width="1px"/>

    Using the art picture frame:

    <!-- booth.pm assets arts 144-4b309d4dce8b848ec7713199ba3b782ec1915a1550f7efd179de4332d54040bd.svg -->
    <svg ...>
        <!-- top left outer, top left inner -->
        <anchor x="2" y="10" name="clipboardTLO" grid-round="up left">
        <anchor x="8" y="16" name="clipboardTLI" grid-align="clipboardTLO" grid-round="down right">
        <anchor x="38" y="10" name="clipboardBLO" grid-round="down left">
        <anchor x="32" y="16" name="clipboardBLI" grid-align="clipboardBLO" grid-round="up right">
        <anchor x="2" y="38" name="clipboardTRO" grid-round="up right">
        <anchor x="8" y="32" name="clipboardTRI" grid-align="clipboardTRO" grid-round="down left">
        <anchor x="38" y="38" name="clipboardBRO" grid-round="down right">
        <anchor x="32" y="32" name="clipboardBRI" grid-align="clipboardBRO" grid-round="up left">

        <!-- alternately use the edges instead -->
        <anchor y="10" name="clipboardTopOuter"    grid-round="up">
        <anchor y="16" name="clipboardTopInner"    grid-align="clipboardTopOuter" grid-round="down">
        <anchor y="38" name="clipboardBottomOuter" grid-round="down">
        <anchor y="32" name="clipboardBottomInner" grid-align="clipboardBottomOuter" grid-round="up">
        <anchor x="2"  name="clipboardLeftOuter"   grid-round="left">
        <anchor x="8"  name="clipboardLeftInner"   grid-align="clipboardLeftOuter" grid-round="right">
        <anchor x="38" name="clipboardRightOuter"  grid-round="left">
        <anchor x="32" name="clipboardRightInner"  grid-align="clipboardRightOuter" grid-round="right">

        <!-- starting from top right corner of picture frame, use top outer and right outer, then preceeding counter-clockwise use just top outer, then top and right... -->
        <path
            anchors="clipboardTopOuter clipboardTopInner clipboardBottomOuter clipboardBottomInner clipboardLeftOuter clipboardLeftInner clipboardRightOuter clipboardRightInner"
            d="ga 0 6 M 38,11 C 38 10.9 38 10.7 37.9 10.6 .. ga 0 H 33.3 L 22.8 2.8 C 21.1 1.6 18.8 1.6 17.1 2.8 ... g 0 2"
        >
    </svg>

    Interaction with elements:
        circle cx cy rx ry - rounded how exactly?
        ellipse cx cy rx ry - rounded how exactly?
        line x1 y1 x2 y2 - each point is rounded
        polygon points="0,100 50,25" - each point is rounded
        polyline points="0,100 50,25" - each point is rounded
        rect x y width height rx ry - rounded how exactly?
        path - all points in "d" attribute rounded
        pattern x y width height viewBox - rounded after any patternTransform
        text/textPath x y dx dy - the final pixel position x+dx is rounded, not individually. If you want them separately rounded, wrap it in a <g>.
        use x y - rounded
        image x y width height - rounded
        clipPath - not affected, just subelements (e.g. the circle <clipPath id="someClip"><circle cx="40" cy="35" r="35"/></clipPath>)
        linearGradient - not affected
        radialGradient - not affected

    <switch requiredFeatures="http://www.w3.org/TR/SVG11/feature#GridFitting">
    <switch><g requiredPpuc="0 2"><g requiredPpuc="2 10"><g requiredPpuc="10"></switch>

    For computing ppuc along minimum axis, think of computing the minor axis length along a sheared/rotated ellipse.
      Possibly use matrix inverse and rotate a point to axis aligned unit vector? [a b; c d] Possibly det = a*d - b*c. 2D inverse = [d -b; -c a] / det.
      Possibly use eigen vector?
      Possibly just check x and y after rotating the transform back to axis alignment?

Related:
    SVG
        SVG specification - https://github.com/w3c/svgwg/tree/master, https://www.w3.org/TR/SVG2/
        SVG Hinting Proposals - https://www.w3.org/Graphics/SVG/WG/wiki/Proposals/SVG_hinting
        Microsoft W3C rep for SVG - https://github.com/atanassov, https://www.w3.org/groups/wg/svg/participants
    WPF
        WPF SnapsToDevicePixels and UseLayoutRounding - https://blog.benoitblanchon.fr/wpf-blurry-images/
        WPF GuidelineSets - https://www.wpftutorial.net/DrawOnPhysicalDevicePixels.html
        Images and Icons for Visual Studio - https://docs.microsoft.com/en-us/visualstudio/extensibility/ux-guidelines/images-and-icons-for-visual-studio?view=vs-2022
    TrueType
        TrueType hinting is overkill - https://docs.microsoft.com/en-us/typography/opentype/spec/ttch01
        Pushing Pixels About those vector icons - https://www.pushing-pixels.org/2011/11/04/about-those-vector-icons.html
