========
  SpriteView .162 (c)1999 PeekinSoüt
  Tile graphics viewer (speedy and tiny)
  Written by Peekin; compiled using NASM and WDOSX.

========
Changes
========

--===.16===--
- Supports VB tiles.
- Detects ZSNES savestates, automatically setting the position to VRAM
  (20C13h) and loading the color palette. Of course you still have to use
  the command line switch (-p) for viewing a ROM along with a savestate's
  palette.


========
1.  About
2.  Thanks
3.  Requirements
4.  Features
5.  Using the viewing window
6.  Tile graphics formats
7.  Other tile viewers
8.  Future plans
9.  History
10. Comments/Questions
========

========
About
========
  SpriteView is just a little tile viewer for NES, Sega Genesis, Virtual
  Boy, Game Boy, N64 console graphics, and all known SNES formats. It is
  very simple but has fast scrolling, allows variable tile wrap, and
  includes various palettes. However, it has absolutely no tile editing and
  comes nowhere near Smc-Ripper, Tile Layer, or Qwertie's editor for a GUI.
  So for a more capable, better looking viewer/editor, you might want to try
  one of them.

Disclaimer
----------
  This program is provided as freeware, in appreciation of all the free
  utilities others have written which I enjoy. The only cost is suggestions
  for improvement, bug reports, and maybe a letter of appreciation :)

  Although this program does not have any known problems, it is not
  guaranteed to be free of unknown ones. You use this program by your own
  choice. I disclaim any responsibility from damage to your computer this
  program could cause. If you do encounter anything, please tell me so it
  can be fixed! After all, I use this on my computer too :)


========
Thanks
========
- Michael Tippach for WdosX, 32bit DOS extender
- Authors of NASM for a great compiler
- Gaz for his simple to use assembly library
- Yoshi for his informative docs
- Corsair and Kari for making the 4bit format clear in their doc
- Vilewrath for the little Qb example
- Savoury Snax for explaining how tiles are converted to different formats
- Magnus Runesson for letting me see the source to his early SMC-Ripper
- Louis Bontes for writing the first tile viewer/editor I ever saw (Naga)
- Wombatman for the Sega Genesis format
- Any others who have contributed to SNES emulation...


============
Requirements
============
--------------------
Something to look at
--------------------
  Both game ROMs and savestates have graphics in them. Simply include the
  name of the file to view after the program name, and it will try to load
  the whole file into memory. Being very simple, it has no loader from
  inside.

    sv allstars.smc
    sv zelda.nes
    sv metroid3.zs3

  Note that most graphics in ROMs (and even some emulator's savestates) are
  compressed, so unfortunately none of the graphics are viewable.

------
System
------
  I wrote this to be used on my pitiful 25MHz 386, so anything more than
  that is all the better.

- PC 386+    You have that covered (unless you're a Mac user)
- 2MB+       Depends on the filesize
- VGA        SVGA is not supported, just 320x200:256
- Keyboard   Always handy to have one of these things

  The amount of memory needed depends on the size of the file to view. For
  small files like savestates or little ROMs, 4MB is more than enough; but
  since SV loads the entire file into memory, you may need 8MB for larger
  ROMs like 'Donkey Kong Country' or 'Tales of Phantasia'. Nintendo 64 ROMs
  are huge in comparison and may need 32MBs.


========
Features
========
- SNES 1,2,3,4,8bpl tiles
- SNES mode 7 linear/interleaved tiles
- SNES fx chip low/high nybble linear
  (in other words all SNES formats as far as I know!)
- NES 2bpl tiles
- GameBoy 2bpl tiles (same as SNES 2bpl)
- Sega Genesis 4bit tiles
- VB 2bit tiles
- N64 15bit high color linear
- N64 24bit true color linear
- Generic 2,4,8bit linear

- Flexible scrolling
- Variable window width (tiles per row)
- Four built in generic palettes
- Fifth user palette from ZSNES savestate
- Goto position from command line

Flexible scrolling
------------------
  The scrolling in SV is a bit more flexible than most other viewers,
  allowing easy window panning. You can scroll by a single tile, one row, or
  an entire page. SV always pages sixteen rows at a time rather than the
  height of the window, to stay better aligned to the ROM's 32k banks.

  Unlike Naga and Smc-Ripper, SV is timed to the keyboard repeat instead of
  simply running at its maximum rate, since it would be uncontrollable on
  faster machines. So how fast it scrolls depends on how fast you have your
  repeat rate set to. For Windows, just use the Control Panel to set it. To
  get the fastest repeat under DOS, you can type in "mode con: rate=32
  delay=1".

Fine adjustments
----------------
  Most games use some sort of compression or do not always have graphics
  that are perfectly aligned to even bank boundaries, so you'll often need
  to adjust the byte base of the file image.

Variable Wrap width
-------------------
  Games often store their graphics in the same arrangement as they would in
  VRAM for simplicity (16 tiles per row), but for more efficient storage,
  they might store them in smaller/larger sized strips.

Graphics Modes
--------------
  Simply press the number key of mode you want to change to. Since most keys
  function for two modes though, you may have to press it twice. For
  example, there are two variations for mode 7, one for linear tiles in ROMs
  and the other for the interleaved tiles in savestates. Simply pressing "7"
  once will switch to mode 7 graphics, but pressing it again toggles between
  the two variations. The first time you press "5", the mode will switch to
  Sega Genesis tiles. Pressing it again toggles to NES 2bpl tiles. I had to
  do this as I soon ran out of number keys to use with all the new modes
  added :)


Palettes
--------
  Four generic palettes are included that should help viewing. They are the
  VGA default, the color spectrum (rainbow), gray, and inverse gray. Each
  one has its niche - just cycle through them for the one that looks best
  for the part you are viewing. The last one is the user palette. You can
  specify a ZSNES savestate filename (or ZSNES movie) to load colors from
  when you start SV by using the "-p" switch with a filename after it.

    sv dkc.fig -p dkc.zmv
    sv metroid3.smc -p metroid3.zs3
    sv mario2.smc -p mario2.zst -g 110000

Goto position from command line
-------------------------------
  Rather than starting from the beginning and scrolling through the entire
  image, you can start where you want to look at with the "-g" switch.

    sv mario2.smc -g 110000 -p mario2.zst
    sv zelda64.rom -g 7bbe70
    sv smrpg.smc -g 30c4c0


========================
Using the viewing window
========================

Keys
--------
  Scrolling/Wrap:
    Up Down     Tile row
    Left Right  Single tile
    PgUp PgDn   Page of tiles, sixteen rows
    Ctrl+( )  Byte forward or backward
    * /         32banks, for really fast movement
    [ ]         Increase or decrease tile wrap
    { }         Double or half tile wrap

  Graphics mode:
    1           Monochrome bitdepth
    2,4,8       SNES bitplane tiles / linear
    3           SNES 3bpl / VB tiles
    5           Sega Genesis 4bit tiles / NES 2bpl tiles
    6           Fx graphics low/high nybble
    7           Mode 7 linear/interleaved bytes
    9           N64 graphics high/true

  Palette:
    p P         Cycle forward or backward through five palettes
    + -         Change the user palette page

  Other:
    h           Toggle hex or decimal offset
    Esc         Quit


=====================
Tile graphics formats
=====================
-----------------------
Nintendo bitplane tiles
-----------------------
  NES, GB, and SNES tiles (except for mode 7) are all stored in a bitplane
  format, where each 8x8 tile is made of multiple monochrome tiles (called
  bitplanes) that are layered together to make the full bitdepth. Every byte
  makes up a single layer of a single row, which combined with other bytes
  of the same row, make a eight complete pixel columns. Just how many
  bitplanes need to be layered together is determined by total color indexes
  desired for that tile (1bitplane=2colors, 2=4, 4=16, 8=256). SpriteView
  just takes the bitplane format and rearranges it into a more useable
  linear format. Then the indexes are translated to colors when blit to the
  screen. If you know how old monchrome graphics modes use to work, the idea
  is pretty simple. As you can see, each bit is a pixel column and each byte
  is a row of pixel columns. Below is a simple image of a dot in a circle
  (ya I know, silly picture) and the hexadecimal numbers to represent it.

  Columns (bits)	    0 1 2 3 4 5 6 7
			   -----------------
		$3C	0 | . . 1 1 1 1 . .
		$7E	1 | . 1 1 1 1 1 1 .
		$C3	2 | 1 1 . . . . 1 1
  Rows (bytes)	$DB	3 | 1 1 . 1 1 . 1 1
		$DB	4 | 1 1 . 1 1 . 1 1
		$C3	5 | 1 1 . . . . 1 1
		$7E	6 | . 1 1 1 1 1 1 .
		$3C	7 | . . 1 1 1 1 . .

  More depth simply requires layering on another bitplane.

         <First bitplane>        <Second bitplane>            <Result>
          0 1 2 3 4 5 6 7         0 1 2 3 4 5 6 7         0 1 2 3 4 5 6 7
         -----------------       -----------------       -----------------
      0 | . . 1 1 1 1 . .     0 | 1 . . . . . . 1     0 | 2 . 1 1 1 1 . 2
      1 | . 1 1 1 1 1 1 .     1 | . . . . . . . .     1 | . 1 1 1 1 1 1 .
      2 | 1 1 . . . . 1 1     2 | . . . 1 1 . . .     2 | 1 1 . 2 2 . 1 1
      3 | 1 1 . 1 1 . 1 1  +  3 | . . 1 1 1 1 . .  =  3 | 1 1 2 3 3 2 1 1
      4 | 1 1 . 1 1 . 1 1     4 | . . 1 1 1 1 . .     4 | 1 1 2 3 3 2 1 1
      5 | 1 1 . . . . 1 1     5 | . . . 1 1 . . .     5 | 1 1 . 2 2 . 1 1
      6 | . 1 1 1 1 1 1 .     6 | . . . . . . . .     6 | . 1 1 1 1 1 1 .
      7 | . . 1 1 1 1 . .     7 | 1 . . . . . . 1     7 | 2 . 1 1 1 1 . 2

  Unfortunately the bitplanes of each row are spliced in a way that they can
  not simply be read straight through from start to finish. To fix that, I
  just use a table. Each index in the table points to the next byte in the
  tile. Using the table slows it down, but also allows all bitplane formats
  to be converted by the same routine. Being written in assembly makes up
  for the slow down too ;)

-------------
Tile patterns
-------------
  These are the patterns for all bitplane formats known and supported by SV.
  The bytes are arranged by pixel row and bitplane. Remember that each byte
  consists of eight column bits. The highest bits in each byte are the left
  columns and lowest bits are the right columns.

Bitdepth:  <1>    <2>       <3>           <4>                  <8>
Bitplane:   0    0  1     0  1  2     0  1  2  3     0  1  2  3  4  5  6  7 
   
           ---  ------   ---------   ------------   ------------------------
     0|     0    0  1     0  1  16    0  1  16 17    0  1  16 17 32 33 48 49
     1|     1    2  3     2  3  17    2  3  18 19    2  3  18 19 34 35 50 51
     2|     2    4  5     4  5  18    4  5  20 21    4  5  20 21 36 37 52 53
Row: 3|     3    6  7     6  7  19    6  7  22 23    6  7  22 23 38 39 54 55
     4|     4    8  9     8  9  20    8  9  24 25    8  9  24 25 40 41 56 57
     5|     5    10 11    10 11 21    10 11 26 27    10 11 26 27 42 43 58 59
     6|     6    12 13    12 13 22    12 13 28 29    12 13 28 29 44 45 60 61
     7|     7    14 15    14 15 23    14 15 30 31    14 15 30 31 46 47 62 63

Bitdepth:  <2 NES>
Bitplane:   0  1
           ------
     0|     0  8
     1|     1  9
     2|     2  10
     3|     3  11
     4|     4  12
     5|     5  13
     6|     6  14
     7|     7  15

  The bitplane formats 2,4 & 8 are all used by the SNES for tilemaps (BGs)
  while sprites can only use the 4bpl (16 color) format. The other two, 1bpl
  and 3bpl, are only used by games to store their graphics and must be first
  uncompressed to one of the useable SNES formats before being put on the
  playfield. 1bit is usually used to store monochrome text, while 3bit is
  used for images that need at least five colors, but not more than eight.
  Games might also store their graphics in these packed formats in WRAM for
  quick transfer to VRAM whenever needed, so you may find these in
  savestates too. The SNES 2bpl format is exactly the same as the GameBoy's,
  while the NES format is more like two individual 1bpl tiles (rather than
  being interleaved).

  3bit was figured out from writing this program. So far Smc-Ripper is the
  only other one to support them. Then again, Magnus Runesson is only person
  I told about them too. 8bit was found with trial and error and later
  verified when emulator authors started releasing their source code. The
  other three were learned from not so helpful docs. If anybody out there
  know of another common bitplane format, please tell me.

-----------
SNES mode 7
-----------
  You will not likely find mode 7 graphics in ROMs, since they are usually
  compressed (and who knows how). The only commercial game I have ever seen
  them in is "Zelda" at 811008. However, there are some demos with them, and
  since you might also look in savestates, they are worth supporting. I
  don't know why nobody else decided include them in their viewer, since
  they are just about the simplest of all the SNES graphics fromats. It is
  the only (Nintendo) tile format that does not use bitplanes. Each one is a
  little linear 8x8 bitmap, or would be except for just one little quirk.
  When the graphics are stored in the SNES's VRAM, they are interleaved with
  tilemap numbers. One byte of graphics follows each byte of the tilemap.
  You can simply skip every even byte though to get only the pixels.

Type:       Noninterleaved as in ROMs   Odd interleaved as in VRAM
Column:     0  1  2  3  4  5  6  7      0   1   2   3   4   5   6   7   
           ------------------------    --------------------------------
     0|     0  1  2  3  4  5  6  7      1   3   5   7   9   11  13  15
     1|     8  9  10 11 12 13 14 15     17  19  21  23  25  27  29  31
     2|     16 17 18 19 20 21 22 23     33  35  37  39  41  43  45  47
Row: 3|     24 25 26 27 28 29 30 31     49  51  53  55  57  59  61  63
     4|     32 33 34 35 36 37 38 39     65  67  69  71  73  75  77  79
     5|     40 41 42 43 44 45 46 47     81  83  85  87  89  91  93  95
     6|     48 49 50 51 52 53 54 55     97  99  101 103 105 107 109 111
     7|     56 57 58 59 60 61 62 63     113 115 117 119 121 123 125 127

-----------
FX graphics
-----------
  Also very simple to work with, each 'tile' is really an 8x8 section out of
  a large linear bitmap 256 pixels wide. The only odd thing is that each
  pixel is 4bits, so what they did was interleave two 16 color bitmaps. The
  lower nybble of each byte is a pixel from the first bitmap and the higher
  nybble is from the other bitmap. So there really are two layers in one.
  Before they can be used on the scene, the fx chip does its
  streching/scaling effects on them and then converts them into the useable
  bitplane format for the PPU.

           As arranged in the ROM
Column:    0    1    2    3    4    5    6    7
           ---------------------------------------
     0|    0    1    2    3    4    5    6    7     8-255
     1|    256  257  258  259  260  261  262  263   264-511
     2|    512  513  514  515  516  517  518  519   520-767
Row: 3|    768  769  770  771  772  773  774  775   776-1023
     4|    1024 1025 1026 1027 1028 1029 1030 1031  1032-1279
     5|    1280 1281 1282 1283 1284 1285 1286 1287  1288-1535
     6|    1536 1537 1538 1539 1540 1541 1542 1543  1544-1791
     7|    1792 1793 1794 1795 1796 1797 1798 1799  1799-2047

------------------
Sega Genesis tiles
------------------
  Tiles are linear, going from top to bottom, each row (four bytes) goes
  left to right. The two nybble pixels per byte are stored in big endian
  form. So the leftmost pixel would be in the first byte bits 4-7, the
  second pixel to the right would be the first byte bits 0-3, and the
  rightmost pixel would be in the fourth byte bits 0-3. Thanks (not!) to all
  you Genesis emulator authors who would not spare a single sentence even
  that long to let me know that Sega didn't use planar graphics, and thanks
  (this time I mean it for real) to Wombatman for telling me the format :)

-----------
Virtual Boy
-----------
  Tiles are linear, going from top to bottom, each row (two bytes) goes left
  to right. The four 2bit pixels in each byte are stored (oddly) in little
  endian form. So the leftmost pixel would be in the first byte bits 0-1,
  the second pixel to the right would be the first byte bits 2-3, and the
  rightmost pixel would be in the second byte bits 6-7.

-----------
Nintendo 64
-----------
  The two modes so far found are 32bit (256 levels of
  red/green/blue/transparency) and 16bit (32 levels of red/green/blue and 1
  level of transparency). Both are linear (no tiles), going from top to
  bottom, each row (variable size) goes left to right. Complete transparency
  has a value of 0. For 16bit, 1 is opaque. For 32bit, 255 is completely
  opaque. If transparency is true (not opaque) and the other color values
  are greater than 0, you get translucency (like the colored transparency
  you see in stained glass).

  32bit pixel:
    Byte 0 = Red
    Byte 1 = Green
    Byte 2 = Blue
    Byte 3 = Transparency

  16bit pixel:
    Bit  0     = Transparency (either on or off)
    Bits 1-5   = Blue
    Bits 6-10  = Green
    Bits 11-15 = Red


==================
Other tile viewers (and editors!)
==================
  This is not a complete listing, just ones that I have happened to use.
  Each one is unique, so just try them all.

- Tile Layer         Several system formats
  SnowBro            http://home.sol.no/~kenhanse/nes/index.htm

- Smc-Ripper         Large screen and good interface (if you have a VESA
  card)
  Magnus Runesson    http://home.bip.net/magnusr/

- Naga               Older but still useful
  Louis Bontes

- TileEdit           Really nice interface, but no scrolling
  Qwertie            http://www.geocities.com/SiliconValley/Bay/6633/

- X-Char             Unfinished, but it looks nice
  (unknown)


============
Future plans
============
- Support 8x12 and 8x16 tiles sizes
- Find out how Sega ROMs have their tiles compressed
- Possibly learn some 65816 asm to understand snes compression
- Add window exporting to a bitmap
- Add raw tile exporting from the ROM window to a separate file


=======
History
=======
--===Ver 0.0 - 0.4===-- (Qbasic version)
- SNES 4bpl,2bpl tiles
- Rainbow and gray palettes
- SNES 1bpl,8bpl tiles
- 3bpl finally figured out in Zelda
- Mode 7 graphics

--===.10===-- (assembly version)
- Sega Genesis tiles
- NES 2bpl

--===.13===---
- Fx chip graphics, used in "StarFox" and "Mario World 2" (press '6')
- Pressing '7' now toggles between linear and interleaved mode 7.
- Widened window a little to allow more tiles to be seen. That space was
  simply blank anyway.
- Changed default offset to hex instead of decimal after spending stupid
  amounts of time converting hex offsets in an emulator to decimal so that I
  could find the graphics in the ROM. You can still use decimal though,
  press 'h' to toggle it.
- Allow user to specify palette from a savestate (with -p switch)
- Redid the small color bar on bottom to only show used colors

--===.14===--
- Window is wider, allowing complete window to be seen.
- Info is in a bar down on the bottom rather than right side. Filesize is no
  longer shown.
- Help was added for key reference (F1).
- Wrap is now shown in pixels rather than the number of 8x8 tiles.
- Keys quickly half/double wrap ({ }).
- Added two N64 graphics modes, 15bit high color and 24bit true color.
- Added pseudo true color palette for N64 modes. You must change to it
  manually since it is not automatically set when you change to those modes.
- Made fx chip graphics linear according to wrap. So it does not now
  automatically set the wrap to 32 tiles.

--===.15===--
- Added 3 linear graphics modes for 2,4,8 bits.
- Added goto from command line (-g #)


==================
Comments/Questions
==================
  If you do not like the program, please go find one you do. Otherwise, feel
  free to ask me any questions you might have about SpriteView, tile
  conversion, or the source code. If you know of a bug or have any info
  about other graphics modes, please tell me!

  FDwR@hotmail.com (or Juno)
  http://members.tripod.com/FDwR/snes.htm
  Dwayne Robinson (:Peekin:)


