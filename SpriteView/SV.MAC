; Definitions and little macros for SpriteView...
;
; The main code is in 'sv.asm'.
; Helper routines are contained in 'sv.inc'.
; The tile converting routines are in 'svtile.inc'

BITS 32

;============================================================
; Definitions
;------------------------------
;Start option flag definitions
MainOpPaletteIncluded           equ 1
StartOptions.FileGiven          equ 1
StartOptions.VideoModeGiven     equ 2
StartOptions.ShowAllFiles       equ 4
StartOptions.PaletteGiven       equ 8
MainOpLongFilenamesUse          equ 32
;------------------------------
Timer			equ 1132;memory location used to keep track of timer
;------------------------------
;flag for menu choices
MenuListSub		equ 1	;choice opens a submenu
MenuListDisabled	equ 2	;you can't use this choice now
MenuListDivider		equ 4	;divider exists between this and the next choice
MenuAttribHorizontal	equ 1	;most are vertical menus so this bit is usually off
MenuAttribEmbedded	equ 2	;the menu is a separate entity or embedded in the dialog box
MenuDrawFull		equ 1	;flag to redraw all choices
MenuDrawComplete	equ 2	;draw menu background, dividers, and border
MenuDrawNotMade		equ 4	;menu has not been constructed yet
MenuChngSelect		equ 1	;whenever a menu choice is changed, this is flagged
MenuChngAccept		equ 2	;when a choice is chosen, this flagged

;============================================================
; Structures (until NASM gets STRUC fixed in the newer version)
;------------------------------
%imacro StructNew 1
        %1:
	%define StructName %1
	%assign StructBase 0
%endmacro
;------------------------------
%imacro StructAdd 2
        ;StructName%1 equ StructBase
        %1 equ StructBase
	%assign StructBase StructBase+%2
%endmacro
;------------------------------
%imacro StructEnd 1
	Size_%1 equ StructBase
%endmacro
;------------------------------
StructNew Menu
StructAdd .ListSize,4		;size in bytes of menu list
StructAdd .ListPtr,4		;pointer to menu list
StructAdd .FontPtr,4		;font used by menu
StructAdd .Background,4		;pointer screen area behind opened menu
StructAdd .NumChoices,1		;number of choices in list
StructAdd .CurChoice,1		;current choice
StructAdd .PriorChoice,1	;choice selected just before current choice
StructAdd .Redraw,1		;flags specifying what to redraw
StructAdd .Attribs,2		;general attributes of menu
StructAdd .TopRow,2		;top row of menu
StructAdd .LeftCol,2		;left column of menu
StructAdd .Height,2		;total height of menu
StructAdd .Width,2		;total width of menu
StructAdd .ChoiceTopRow,2	;
StructAdd .ChoiceLeftCol,2	;
StructAdd .ChoiceHeight,2	;height of an individual choice
StructAdd .ChoiceWidth,2	;width of the choices
StructEnd Menu
;------------------------------
StructNew MenuList
StructAdd .Text,4		;pointers to each choice string in the menu
StructAdd .ChoiceID,1		;unique identification for each choice
StructAdd .Attribs,1		;attributes of each menu choice
StructAdd .Pos,2		;x or y position of choice, depending on menu format
StructEnd MenuList

;============================================================
; Special push/pulls/defs
;------------------------------
; (reg)
; No different from pop, I just like "pull" better (like SNES assembly)
; Pop is soda, something that shouldn't be around computers.
;
%imacro Pull 1
  pop %1
%endmacro
;------------------------------
; (prm1, prm2, prm3...)
; Used by routines for saving multiple registers before they are destroyed
;
%imacro PushAll 0-10
  %rep %0
    push %1
    %rotate 1
  %endrep
%endmacro
;------------------------------
; Better for calling routines when the parameters need to be pushed on from right
; to left instead of the normal left to right
;
%imacro PushAllReverse 0-10
  %rep %0
    %rotate -1
    push %1
  %endrep
%endmacro
;------------------------------
; Used before coming out of a routine to restore registers
;
%imacro PullAll 0-10
  %rep %0
    %rotate -1
    pop %1
  %endrep
%endmacro
;------------------------------
; (definition type, definition name)
; Used to easily add new definitions for error codes or switches
; Each one is added sequentially with the current definition type number, then the type
; is incremented by one for the next number
; The user does not and does not need to know the actual numbers used (and that is the point)
; but just that when that symbol is referred to, it will have the right meaning
;
%imacro AddDef 2
	%2 equ %1
	%assign %1 %1+1
%endmacro

;============================================================
; String macros
;------------------------------
; (string name, string) (len_stringname)
; Declares a label, the string associated with the label, and a length constant
%imacro String 2
	%1: db %2
	Len_%1 equ $-%1
%endmacro
;------------------------------
; (string name, string)
; Declares a label, and the null terminated string associated with the label
%imacro StrNull 2
	%1: db %2,0
%endmacro
;------------------------------
; (string1, string2, string3...)
; Adds a null to the end of whatever strings are passed onto it
; Turning them into 'ASCIIZ' or 'C' like strings
; No limit to the number
%imacro StringsASCIIZ 1-*
  %rep %0
    db %1,0
    %rotate 1
  %endrep
%endmacro
;------------------------------
%imacro MakeNumber 2
	mov eax,%1
	mov edi,%2
	call MakeNumString
%endmacro

;============================================================
; Graphics macros
;------------------------------
; (TopRow, BtmRow, LeftCol, RiteCol, Mode) ()
%imacro DrawBorder 5
	PushAll word %5,word %4,word %3,word %2,word %1
	call _DrawBorder
	add esp,byte 10
%endmacro
;------------------------------
; (TopRow, BtmRow, LeftCol, RiteCol, Color) ()
%imacro DrawBox 5
	PushAll word %5,word %4,word %3,word %2,word %1
	call _DrawBox
	add esp,byte 10
%endmacro
;------------------------------
; (words Char, TopRow, LeftCol, Color) ()
%imacro FontBlitChar 6
	PushAll word %6,word %5,word %4,word %3,word %2,word %1
	call _FontBlitChar
	add esp,byte 12
%endmacro
;------------------------------
; (dword String, words Length, words TopRow, LeftCol) ()
%imacro FontBlitStr 4
	PushAllReverse dword %1,word %2,word %3,word %4
	call _FontBlitStr
	add esp,byte 10
%endmacro
;------------------------------
; (dword String, words TopRow, LeftCol) ()
%imacro FontBlitPar 3
        PushAllReverse dword %1,dword %2|(%3<<16)
        call _FontBlitPar
        add esp,byte 8
%endmacro
;------------------------------
; (dword String, words Length, TopRow) ()
;%imacro FontBlitCenteredStr 3
;        PushAllReverse dword %1,word %2,word %3
;        call _FontBlitCenteredStr
;        add esp,byte 8
;%endmacro

;============================================================
; Object function macros
;------------------------------
; (words expected number of choices, menu type) (cf=failure, eax=to menu structure)
%imacro MenuCreate 2
	PushAllReverse word %1,word %2
	call _MenuCreate
	lea esp,[esp+4]		;do not modify carry flag
%endmacro
;------------------------------
; (word ptr to menu structure) (cf=failure)
%imacro MenuDestroy 1
	push dword %1
	call _MenuDestroy
	lea esp,[esp+4]		;do not modify carry flag
%endmacro
;------------------------------
; (dwords ptr to menu structure, ptr to new list, word number of choices) ()
%imacro MenuAddChoices 3
	PushAllReverse dword %1,dword %2,word %3
	call _MenuAddChoices
	lea esp,[esp+10]		;do not modify carry flag
%endmacro
;------------------------------
; (dword ptr to menu structure, words basechoice, count, ANDattributes, ORattributes) (cf=error)
%imacro MenuSetChoiceAttribs 5
	PushAllReverse dword %1,word %2,word %3,word (~%4 << 8) | %5
	call _MenuSetChoiceAttribs
	lea esp,[esp+10]		;do not modify carry flag
%endmacro
;------------------------------
%imacro MenuChoice 3
	dd %1			;dword ptr to choice's string
	db %2,%3		;ID byte and attributes
%endmacro
;------------------------------
; (dword ptr to menu structure, word new choice) (al=change, ah=choice)
%imacro MenuSetCurrentChoice 2
	PushAllReverse dword %1,word %2
	call _MenuSetCurrentChoice
	add esp,byte 6
%endmacro
